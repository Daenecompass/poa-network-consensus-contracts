{
  "stats": {
    "suites": 158,
    "tests": 616,
    "passes": 616,
    "pending": 0,
    "failures": 0,
    "start": "2020-03-31T06:47:12.210Z",
    "end": "2020-03-31T07:02:15.571Z",
    "duration": 903361,
    "testsRegistered": 616,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "a72800e2-4e2e-4623-af76-6972de13d709",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "96c4c765-4857-4568-a974-40237da2e774",
        "title": "BallotsStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "6d28abb6-5e31-4d8e-867c-d495c99e77c4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e73c15c3-6d55-4c5f-b770-f1d93e7d3403",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "823a9f85-57e5-47f8-a0ed-2fe69dc88ac1",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5a5c4c50-c768-4d87-aca1-d19bdbe3b39a",
        "title": "KeysManagerNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "3db49238-f9ec-4236-81da-e6afc149b8a6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "79797906-60df-4716-9e8f-c822cea0f2cb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0989736f-8258-4464-9373-d7dbd507412f",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "99a078b0-7883-4202-8d4b-ed08c715d0d0",
        "title": "ProxyStorageNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "7488a6e1-5bfc-42f8-b6c1-9bd8e6c48a18",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "bc79c628-11e7-4834-b89f-4ac3ddc4be73",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b40415e8-4cef-4795-8894-1350d7db77fb",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "09d7dc6f-5ae6-4c86-be66-9f5bd3928ff5",
        "title": "RewardByBlockNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "efcc1ba3-9f2e-46ed-a39f-90dcb4006e88",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0470bdec-da11-44fb-bd70-3ce6025f8dfd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5ca26eee-771e-4e48-a24e-a8d1b790d2cf",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "1962169b-aea9-40fc-be61-b941203960ca",
        "title": "RewardByTimeNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "ceb530d5-51b8-4ba8-a858-e71ab21f9a5a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "10db33d0-b21c-4e8b-b32c-d30412f1cd59",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2b2ae118-0eac-47a3-9109-a40ca777ff41",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "5b493251-6468-4d39-983a-1805d08fe023",
        "title": "ValidatorMetadataNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "5ca16fad-1bf3-4abc-a801-56a8d1c9ee3c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a6f5ebc1-4072-4cc3-81f1-e96bb3a46788",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "972c0de6-11f6-4662-9f60-dd5b64d616e4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "baa793d4-d2bd-4355-aa3c-ea5e7de59f18",
        "title": "VotingToChangeKeysNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "cd7d778e-7d37-45dd-8251-17f39b28ce33",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "af351793-a3bb-4b04-a36c-110e948244de",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "33919495-273f-4bf1-bbd5-96f5b13ce3ff",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "58af101f-5fd3-49c6-bd82-21940adb8e40",
        "title": "VotingToChangeMinThresholdNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "89e86d65-d0b2-4930-af55-76717bba5c2a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "466965a9-e38e-4e45-98c1-3dba18cfd48d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7e001cbd-3f72-4eb0-9606-2096fe03119b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3fef935a-28b7-4678-bc2a-299ad67cd476",
        "title": "VotingToChangeProxyAddressNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "bf2563e1-d203-4136-a164-e98346dedf5b",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "455ed0fc-ab15-4a81-8af7-73701cf893b4",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "378ce927-a3ac-4f11-84ce-420d78da1d48",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "9ae933be-d253-4147-a16e-dd22ee4c1ea1",
        "title": "VotingToManageEmissionFundsNew",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsNew \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "be8f3c1a-b2d9-4de5-b2ca-5f58d6eab25d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsNew \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5547c581-5a7a-44e2-a475-897085209653",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsNew \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2d306ced-5e6a-4153-b342-7e8b7fc87698",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "a0f3d58e-9409-4ddd-a7df-aadbe32abdd1",
        "title": "BallotsStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "BallotsStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "e94a4183-f0a0-4ae4-8ae8-61c51a6bbdfe",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "BallotsStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "80b1daed-3e84-4b8a-a182-6d53573892b2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "BallotsStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "0862c055-310d-47b1-85a8-579afdb3f7e8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7b25c2c6-adac-4479-addd-93322b02d22b",
        "title": "EternalStorageProxyMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "EternalStorageProxyMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "6d35cf73-88b5-4ec1-96ba-890adba38bce",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "EternalStorageProxyMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7dc8bca4-5720-49a3-ae1f-71b252a73e8f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "EternalStorageProxyMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "6d2ebfe5-379f-495e-9b72-34b63fb529af",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "d7833a17-0d57-4d24-af1d-4cf8cebc60db",
        "title": "KeysManagerMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "KeysManagerMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "ebb61834-6b95-4535-abfd-d3745804f760",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "KeysManagerMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e757aad7-d3b5-403c-ba1d-3615c392f007",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "KeysManagerMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d867f3cd-d39a-49e7-983f-8bc5eab4657b",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "53664059-898f-477b-b1d0-b5ecc70a680c",
        "title": "PoaNetworkConsensusMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "PoaNetworkConsensusMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "ddd89998-5814-45b9-be66-d9d7c50a5187",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "PoaNetworkConsensusMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ef6114b8-8d79-461f-9e00-fd2b4c77f3fe",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "PoaNetworkConsensusMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "13bf945a-6047-4b60-bd33-b555556319c4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "2f4699e5-4be1-475b-8002-0a780e18793d",
        "title": "ProxyStorageMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ProxyStorageMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "a5dc13e7-ec4b-4230-9ee0-5ec1c48f3008",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ProxyStorageMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5546db17-639e-491a-b47a-ef3968e83ee2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ProxyStorageMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "19625480-142a-4cc4-8ef0-a7241f0a3221",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "0c92c429-e29e-44a8-93d3-faba45db2097",
        "title": "RewardByBlockMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByBlockMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "8444d902-263b-4bd4-b3b9-8c3a10bb6257",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByBlockMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cd1a99a2-dfa8-4f7a-8d21-daf6c665ac2b",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByBlockMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c166f27d-51c1-4b25-ae34-cfedc9393649",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8d9d08a8-a039-4825-84d8-1510125a048f",
        "title": "RewardByTimeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "RewardByTimeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "5b656c01-ad9c-467c-8ba5-e0db112f58c2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "RewardByTimeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "29b2cf38-c2d3-4f36-9ddd-0c84cf8e9618",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "RewardByTimeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2d365edc-bde1-4b07-b9fb-cb7c7bd22b53",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "df45b1e2-1eb5-4925-b37a-3175ecfe2a59",
        "title": "ValidatorMetadataMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "ValidatorMetadataMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "e20f85bf-4ea9-4807-bdb2-88aab4dcf010",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "ValidatorMetadataMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1be11723-358c-4f10-bf9c-170d0a2cc850",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "ValidatorMetadataMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "dbef8798-9a9d-4fe2-837a-4aaf36722270",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "e266e308-4c26-4ada-be7a-369d187548f7",
        "title": "VotingToChangeKeysMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeKeysMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "b5ed7a42-e2e9-4d3b-a72e-cd2b3ec0d3d7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeKeysMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ebe371c5-8c4a-4335-98c5-9529fe50990a",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeKeysMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "a112136d-0245-49f9-812d-88eeaea72afd",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4720f0e7-1324-4b55-a16c-5a20fb312c28",
        "title": "VotingToChangeMinThresholdMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMinThresholdMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "4f6e4c9c-1473-4c28-883e-ce58eb3d88c4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMinThresholdMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1246d44a-e9c3-412e-8a3d-6c9efac6e2b6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMinThresholdMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c68d9c59-f207-4836-b279-2b3e355157b4",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "6fadca46-1161-490d-8895-c865148473aa",
        "title": "VotingToChangeMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "21db3792-1514-46db-afa0-6a0d66cd58cb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4d71a761-7104-41f5-bd41-07a9037c45f7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c22fc9d5-6775-4933-973c-a12f82d34440",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "07cb8f8c-fe84-4c1a-a53e-c72d91284098",
        "title": "VotingToChangeProxyAddressMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToChangeProxyAddressMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "c6822104-9f15-4cba-baf3-7f3f67318d69",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToChangeProxyAddressMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c8c445ec-a967-462d-a948-93182205864c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToChangeProxyAddressMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "42441cda-03af-4cc4-a3d9-5f51a090f017",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "3e88e66f-8bc2-41a2-ac95-ae87b283c184",
        "title": "VotingToManageEmissionFundsMock",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingToManageEmissionFundsMock \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "d1fe6afd-3962-4b1a-9033-d820a168ec96",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingToManageEmissionFundsMock \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "881a922c-8125-486c-8c90-324227d585fd",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingToManageEmissionFundsMock \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "1f4f11bc-8fa7-473e-abfb-04e727823e87",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "fb3c1b36-670b-469b-ac2c-2983971da12f",
        "title": "VotingKey",
        "fullFile": "",
        "file": "",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "VotingKey \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "series([\n  runner.initialize.bind(runner),\n  self.compileNewAbstractInterface.bind(this, runner),\n  self.deployTestDependencies.bind(this, abstraction, dependency_paths, runner)\n], done);",
            "err": {},
            "isRoot": false,
            "uuid": "2e94cac9-1bcb-4dc2-a317-38e897f7b039",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "VotingKey \"before each\" hook: before test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4fc9b29c-10f6-4b80-adb7-558a12b577cb",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "VotingKey \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2607cba2-5a9f-458c-913e-beb4044d2dee",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "7c09e1e8-6441-4294-b932-acfd9a42f666",
        "title": "Contract: BallotsStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
        "file": "/test/ballots_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 173,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "72fda840-a942-4f13-adb5-4b8bed2bc869",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "24a27a7d-41c4-42d9-881e-90a67bae89c9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 520,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);",
            "err": {},
            "isRoot": false,
            "uuid": "6e38fca3-ec10-4d8d-97dc-0e59ecb41043",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b8e682f9-0d6b-48fb-a72f-b4cb54e9d119",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "d6ce3b9b-9d8f-4d32-8919-bd4d071dc2bf",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4f1e5827-a9b3-4e9f-b34b-36e09fded1a4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9a6181bf-ff0f-4d15-8d40-93b3c5188c4b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4f1e5827-a9b3-4e9f-b34b-36e09fded1a4",
              "9a6181bf-ff0f-4d15-8d40-93b3c5188c4b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 55,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "50a4fb75-f084-4c6e-a46e-3aeb68d02794",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 219,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "24236380-d74b-4c1d-a757-ae35b3d9a831",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "24236380-d74b-4c1d-a757-ae35b3d9a831"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 219,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6225503c-434d-4e9f-815f-5ed816504650",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "c8d364f1-4fd2-4109-84a5-ca0ab5682786",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 163,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "fef6f7f1-2f26-4d35-bfc1-0a1bed063ded",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "0faecc13-9a25-4d2d-acde-55443817e97d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "e0dabf6a-7ab7-4f7d-b9f3-ef8b90b7def8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 64,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "bc8ac1e3-a068-4e11-bbe5-504c1b5cd90a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8d364f1-4fd2-4109-84a5-ca0ab5682786",
              "fef6f7f1-2f26-4d35-bfc1-0a1bed063ded",
              "0faecc13-9a25-4d2d-acde-55443817e97d",
              "e0dabf6a-7ab7-4f7d-b9f3-ef8b90b7def8",
              "bc8ac1e3-a068-4e11-bbe5-504c1b5cd90a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 446,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a076bfd3-a36d-4ee5-bd0a-478f9b0c9f9f",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 300,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "687a070c-ef33-4bf9-b13e-8fe24209f676",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1049,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "88a7dc67-a5f0-48fe-8c34-d473bfa7dda0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "687a070c-ef33-4bf9-b13e-8fe24209f676",
              "88a7dc67-a5f0-48fe-8c34-d473bfa7dda0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1349,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6c5ef83f-1461-4172-a6e2-57af4caa5efc",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "d2832150-5bfa-4f93-99e2-54951bda62fe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d2832150-5bfa-4f93-99e2-54951bda62fe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 57,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a072ebac-85d4-4840-a0e1-8d0ba924e2be",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 203,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "e4e82fae-90a5-455b-b3c8-0756d5f9686a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 935,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "a67b21e9-2846-4634-8583-203cb899ade2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e4e82fae-90a5-455b-b3c8-0756d5f9686a",
              "a67b21e9-2846-4634-8583-203cb899ade2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1138,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0ca4d18b-d801-4f28-a4c0-bc90e565969a",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_test.js",
            "file": "/test/ballots_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 66,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nballotsStorage = await BallotsStorage.new();\nballotsStorageOldImplementation = ballotsStorage.address;\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "79662b33-3112-4fa0-a823-82597e2e4283",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 112,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "34901901-6a6c-4b75-8621-38667de71888",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst newImplementation = ballotsStorageNew.address;\n(await ballotsEternalStorage.implementation.call()).should.be.equal(ballotsStorageOldImplementation);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "ef3c00ca-028b-4740-8838-f3d3348a148b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 97,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nconst oldVersion = await ballotsEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\n(await ballotsEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "89281403-1183-41e7-81a9-8b717975beb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.initialized.call()).should.be.equal(false);\nawait ballotsStorageNew.initialize();\n(await ballotsStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c412fa76-644b-427e-afde-287c105d7f84",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\n(await ballotsStorageNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "f7375a3d-d186-4b56-a44f-7518b94ed5f1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: BallotsStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(6, 1, true, {from: votingToChangeMinThreshold});\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(ballotsStorageNew.address, {from: proxyStorageStubAddress});\nballotsStorageNew = await BallotsStorageNew.at(ballotsEternalStorage.address);\nconst threshold = await ballotsStorageNew.getBallotThreshold.call(1);\nthreshold.should.be.bignumber.equal(6);\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "5b9b5686-7394-4ec6-b8e9-80b6a8cf9ebe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "34901901-6a6c-4b75-8621-38667de71888",
              "ef3c00ca-028b-4740-8838-f3d3348a148b",
              "89281403-1183-41e7-81a9-8b717975beb9",
              "c412fa76-644b-427e-afde-287c105d7f84",
              "f7375a3d-d186-4b56-a44f-7518b94ed5f1",
              "5b9b5686-7394-4ec6-b8e9-80b6a8cf9ebe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 672,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d517d5e8-2875-4f59-b862-3822f1dc5cea",
        "title": "Contract: BallotsStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
        "file": "/test/ballots_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1077,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "05886328-f20b-4658-9ab1-aeae8b509bf3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e631b0b7-b75b-4043-977b-69c391a26a1e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 570,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\nvotingToChangeKeys = accounts[0];\nvotingToChangeMinThreshold = accounts[3];\nvotingToChangeProxy = accounts[4];\nvotingToManageEmissionFunds = accounts[5];\nrewardByBlock = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 3]).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nawait proxyStorage.initializeAddresses(\n  keysManager.address,\n  votingToChangeKeys,\n  votingToChangeMinThreshold,\n  votingToChangeProxy,\n  votingToManageEmissionFunds,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock\n);\nlet ballotsStorageNew = await BallotsStorageNew.new();\nawait ballotsEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await ballotsEternalStorage.upgradeTo(ballotsStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait ballotsEternalStorage.setProxyStorage(proxyStorage.address);\nballotsStorage = await BallotsStorageNew.at(ballotsEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "16869066-6f0a-4d5f-bb8e-0081739e3f81",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: BallotsStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4fdb157a-580a-47ec-a7a5-81aa2b839485",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "8795465c-9940-46ba-a9de-24e1b50785fe",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "prevent from double init",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init prevent from double init",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.init([3, 2]).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d371972a-bba9-475f-a259-b23d25f45f1f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "thresholds are correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #init thresholds are correct",
                "timedOut": false,
                "duration": 25,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(3).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(1)\n);\nnew web3.BigNumber(2).should.be.bignumber.equal(\n  await ballotsStorage.getBallotThreshold.call(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "fbc54e06-b0d2-4f9a-b7bc-ffcde96ec255",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d371972a-bba9-475f-a259-b23d25f45f1f",
              "fbc54e06-b0d2-4f9a-b7bc-ffcde96ec255"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4056647b-75ac-49c5-9e16-c6923f827dd1",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy thresholds from an old contract",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #migrate should copy thresholds from an old contract",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nconst ballotsEternalStorageNew = await EternalStorageProxy.new(proxyStorage.address, ballotsStorageNew.address);\nballotsStorageNew = await BallotsStorage.at(ballotsEternalStorageNew.address);\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(0);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(0);\nawait ballotsStorageNew.migrate('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.fulfilled;\n(await ballotsStorageNew.getBallotThreshold.call(1)).should.be.bignumber.equal(3);\n(await ballotsStorageNew.getBallotThreshold.call(2)).should.be.bignumber.equal(2);\nawait ballotsStorageNew.migrate(ballotsStorage.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d7b0f7dc-abf3-4528-a59c-95c0b7a4c52b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7b0f7dc-abf3-4528-a59c-95c0b7a4c52b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 181,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1f16f1d1-e372-4522-8d3c-2d11b3021e70",
            "title": "#setThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeThreshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold can only be called from votingToChangeThreshold address",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await ballotsStorage.setThreshold(4, 1, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait setThreshold(4, 1, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "ba8db76f-5d52-459f-857c-12e9b47edde8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set for Invalid threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold cannot be set for Invalid threshold",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(3, 1, false, {from: accounts[3]});\nawait setThreshold(5, 0, false, {from: accounts[3]});\nawait setThreshold(5, -10, false, {from: accounts[3]});\nawait setThreshold(5, -1, false, {from: accounts[3]});\nawait setThreshold(5, 3, false, {from: accounts[3]});\nawait setThreshold(3, 2, false, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "069f036e-714e-4cbc-ac32-3aaef1a9a572",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new value cannot be equal to 0",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold new value cannot be equal to 0",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(0, 1, false, {from: accounts[3]});\nawait setThreshold(0, 2, false, {from: accounts[3]});\nawait setThreshold(4, 1, true, {from: accounts[3]});\nawait setThreshold(1, 2, true, {from: accounts[3]});",
                "err": {},
                "isRoot": false,
                "uuid": "11df60b3-aad4-45c2-951d-d80db5b945f2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for Keys threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for Keys threshold",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await setThreshold(5, 1, true, {from: accounts[3]});\nnew web3.BigNumber(5).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(1));",
                "err": {},
                "isRoot": false,
                "uuid": "20608025-e7f3-4432-8980-585b26eb4b75",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets new value for MetadataChange threshold",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #setThreshold sets new value for MetadataChange threshold",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(2).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));\nawait setThreshold(1, 2, true, {from: accounts[3]});\nnew web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getBallotThreshold.call(2));",
                "err": {},
                "isRoot": false,
                "uuid": "4664b81f-7de4-451a-afb5-a5131dbe9995",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ba8db76f-5d52-459f-857c-12e9b47edde8",
              "069f036e-714e-4cbc-ac32-3aaef1a9a572",
              "11df60b3-aad4-45c2-951d-d80db5b945f2",
              "20608025-e7f3-4432-8980-585b26eb4b75",
              "4664b81f-7de4-451a-afb5-a5131dbe9995"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 408,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "781cb683-24d7-4ea9-be1d-f1ad30ab13d9",
            "title": "#getProxyThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "return value is correct",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct",
                "timedOut": false,
                "duration": 293,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(6).should.be.bignumber.equal(getValidators.length);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\nnew web3.BigNumber(3).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "2772c3d7-77fa-4c4f-93d0-68476d3e4e52",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "return value is correct if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getProxyThreshold return value is correct if MoC is removed",
                "timedOut": false,
                "duration": 1080,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(1).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call())\nawait proxyStorage.setKeysManagerMock(masterOfCeremony);\nawait addValidator(accounts[1]);\nawait addValidator(accounts[2]);\nawait addValidator(accounts[3]);\nawait addValidator(accounts[4]);\nawait addValidator(accounts[5]);\nawait addValidator(accounts[6]);\nawait proxyStorage.setKeysManagerMock(keysManager.address);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nconst getValidators = await poaNetworkConsensus.getValidators.call();\nnew web3.BigNumber(7).should.be.bignumber.equal(getValidators.length);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(6);\nnew web3.BigNumber(4).should.be.bignumber.equal(await ballotsStorage.getProxyThreshold.call());",
                "err": {},
                "isRoot": false,
                "uuid": "2f846090-66c7-4053-b2a0-f72652e22b16",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2772c3d7-77fa-4c4f-93d0-68476d3e4e52",
              "2f846090-66c7-4053-b2a0-f72652e22b16"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1373,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7a16f9e1-da41-4905-9137-42986aad08e7",
            "title": "#getVotingToChangeThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns voting to change min threshold address",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getVotingToChangeThreshold returns voting to change min threshold address",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "votingToChangeMinThreshold.should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())\nawait proxyStorage.setVotingToChangeMinThresholdMock(accounts[4]);\naccounts[4].should.be.equal(await ballotsStorage.getVotingToChangeThreshold.call())",
                "err": {},
                "isRoot": false,
                "uuid": "36919068-df9a-44ca-814b-948fd84b4e97",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36919068-df9a-44ca-814b-948fd84b4e97"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "cec94401-fc29-4d62-93d0-848e457f84e7",
            "title": "#getBallotLimitPerValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/ballots_storage_upgrade_test.js",
            "file": "/test/ballots_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns correct limit",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit",
                "timedOut": false,
                "duration": 211,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "692945ec-d620-454e-a9fb-6ac1cf9a814d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "returns correct limit if MoC is removed",
                "fullTitle": "Contract: BallotsStorage upgraded [all features] #getBallotLimitPerValidator returns correct limit if MoC is removed",
                "timedOut": false,
                "duration": 925,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let limit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(200);\nawait addMiningKey(accounts[1]);\nawait addMiningKey(accounts[2]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(3);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(masterOfCeremony, {from: votingToChangeKeys});\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\nlimit = await ballotsStorage.getBallotLimitPerValidator.call();\nlimit.should.be.bignumber.equal(100);",
                "err": {},
                "isRoot": false,
                "uuid": "422e722b-876f-4bd4-8b35-52f084a610e4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "692945ec-d620-454e-a9fb-6ac1cf9a814d",
              "422e722b-876f-4bd4-8b35-52f084a610e4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1136,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "4908fd89-995f-4987-bae0-b3e30c3945c0",
        "title": "Contract: EmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
        "file": "/test/emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 936,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "889a0c8b-75cf-48d5-8bc6-6c43db86efdb",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "888d3aa7-7584-495b-ab1f-2fdec3e8deda",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: EmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 269,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "amount = web3.toWei(10, 'ether');\nvotingToManageEmissionFunds = accounts[0];\nawait EmissionFunds.new(0).should.be.rejectedWith(ERROR_MSG);\n\nemissionFunds = await EmissionFunds.new(\n  votingToManageEmissionFunds\n).should.be.fulfilled;\n\nawait web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);",
            "err": {},
            "isRoot": false,
            "uuid": "993ab482-14ae-460e-b8e1-6bff29d7e903",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "aa560c8e-5331-4882-b71d-5b8702718739",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "90210c8f-6b41-4898-93e9-9238a72d8c16",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should save VotingToManageEmissionFunds address",
                "fullTitle": "Contract: EmissionFunds [all features] constructor should save VotingToManageEmissionFunds address",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await emissionFunds.votingToManageEmissionFunds.call()).should.be.equal(\n  votingToManageEmissionFunds\n);",
                "err": {},
                "isRoot": false,
                "uuid": "f9cb5645-a30b-41e6-af0c-d9569e04a0dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f9cb5645-a30b-41e6-af0c-d9569e04a0dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "40bf41a0-d890-43d5-988a-0b874227d880",
            "title": "#fallback",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should receive funds",
                "fullTitle": "Contract: EmissionFunds [all features] #fallback should receive funds",
                "timedOut": false,
                "duration": 245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await web3.eth.sendTransaction({\n  from: accounts[1],\n  to: emissionFunds.address,\n  value: amount\n});\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amount * 2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "2d8147c0-2b6f-4a49-96f6-6be535663852",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d8147c0-2b6f-4a49-96f6-6be535663852"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 245,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6ad67574-c361-484a-8a26-e359d67c992b",
            "title": "#sendFundsTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo \"before each\" hook",
                "timedOut": false,
                "duration": 115,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[2];\nreceiverInitBalance = await web3.eth.getBalance(receiver);",
                "err": {},
                "isRoot": false,
                "uuid": "adf42fd3-9755-4d2b-b613-65f5a6a0ea9b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "93843189-63ab-4c2d-9026-f9ec8bb68b7a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send funds to receiver",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send funds to receiver",
                "timedOut": false,
                "duration": 244,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amountToSend)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "52950a14-7045-4b43-8000-e77420ffbdfd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should send entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should send entire amount",
                "timedOut": false,
                "duration": 261,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(amount)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "8bb5f001-d3da-4f5e-9c93-10718d7abb95",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount greater than balance",
                "timedOut": false,
                "duration": 248,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = amount + 1;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "373e8721-2695-43bf-8eec-29bc962247d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not send funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should not send funds if amount is too much",
                "timedOut": false,
                "duration": 242,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "0ff274b8-fe4d-4f7d-ae86-91916cca5c74",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if receiver is 0x0",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if receiver is 0x0",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = web3.toWei(5, 'ether');\nconst amountRemain = amount - amountToSend;\nconst {logs} = await emissionFunds.sendFundsTo(\n  '0x0000000000000000000000000000000000000000',\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namountRemain.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal('0x0000000000000000000000000000000000000000');\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToSend);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "cba4a725-e329-4a4e-8917-ec5a1bc80f5d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 250,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToSend = 0;\nconst {logs} = await emissionFunds.sendFundsTo(\n  receiver,\n  amountToSend,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nreceiverInitBalance.should.be.bignumber.equal(\n  await web3.eth.getBalance(receiver)\n);\nlogs[0].event.should.be.equal(\"FundsSentTo\");\nlogs[0].args.receiver.should.be.equal(receiver);\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "1f1d5a92-c4b9-43e8-9030-edcd7e27bd6e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail if receiver address is not full",
                "fullTitle": "Contract: EmissionFunds [all features] #sendFundsTo should fail if receiver address is not full",
                "timedOut": false,
                "duration": 492,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const signature = web3.sha3('sendFundsTo(address,uint256)').slice(0, 10);\nlet data = signature;\ndata += '0000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nlet receipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(0);\ndata = signature;\ndata += '000000000000000000000000000000000000000000000000000000000000000A';\ndata += '0000000000000000000000000000000000000000000000004563918244F40000';\nreceipt = await web3.eth.getTransactionReceipt(\n  await web3.eth.sendTransaction({\n    from: votingToManageEmissionFunds,\n    to: emissionFunds.address,\n    data: data\n  })\n);\nreceipt.logs.length.should.be.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "f7fba399-9710-4deb-98e5-2fc5db1aa9da",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "93843189-63ab-4c2d-9026-f9ec8bb68b7a",
              "52950a14-7045-4b43-8000-e77420ffbdfd",
              "8bb5f001-d3da-4f5e-9c93-10718d7abb95",
              "373e8721-2695-43bf-8eec-29bc962247d5",
              "0ff274b8-fe4d-4f7d-ae86-91916cca5c74",
              "cba4a725-e329-4a4e-8917-ec5a1bc80f5d",
              "1f1d5a92-c4b9-43e8-9030-edcd7e27bd6e",
              "f7fba399-9710-4deb-98e5-2fc5db1aa9da"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1896,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "87dc6672-eea1-48e8-ba72-ae933cead9d2",
            "title": "#burnFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(5, 'ether');\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "30ec508c-5977-4691-879c-93a5f3920720",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn funds",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn funds",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(4, 'ether');\nconst amountRemain = amount - amountToBurn;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(\n  amountRemain\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "278b5097-5e96-4f31-b2b1-1ef24edbe817",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should burn entire amount",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should burn entire amount",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await emissionFunds.burnFunds(\n  amount,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amount);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "74e881fa-c1d3-4457-a2e9-ad2a67383b89",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount greater than balance",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount greater than balance",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = amount + 1;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "3f8a1fb9-d83e-4bbc-b519-549bcd9f0b65",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not burn funds if amount is too much",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should not burn funds if amount is too much",
                "timedOut": false,
                "duration": 139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = web3.toWei(11, 'ether');\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToBurn);\nlogs[0].args.success.should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "232e1ef5-f1e2-4bae-ba2a-db7c493e8ae1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #burnFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToBurn = 0;\nconst {logs} = await emissionFunds.burnFunds(\n  amountToBurn,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsBurnt\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);\nlogs[0].args.success.should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "0d62a4af-e466-4c3d-84cc-f2ed7eba5ea9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "30ec508c-5977-4691-879c-93a5f3920720",
              "278b5097-5e96-4f31-b2b1-1ef24edbe817",
              "74e881fa-c1d3-4457-a2e9-ad2a67383b89",
              "3f8a1fb9-d83e-4bbc-b519-549bcd9f0b65",
              "232e1ef5-f1e2-4bae-ba2a-db7c493e8ae1",
              "0d62a4af-e466-4c3d-84cc-f2ed7eba5ea9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 692,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ae384ac0-b0d6-47a1-9cf7-2a18f7e26d05",
            "title": "#freezeFunds",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/emission_funds_test.js",
            "file": "/test/emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by VotingToManageEmissionFunds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds may only be called by VotingToManageEmissionFunds",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(5, 'ether');\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "66e5fd02-3464-4d05-9760-ebfa1e6bd82f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should freeze funds",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should freeze funds",
                "timedOut": false,
                "duration": 136,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = web3.toWei(4, 'ether');\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\n\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(amountToFreeze);",
                "err": {},
                "isRoot": false,
                "uuid": "5b1171da-2fab-4507-9d3f-c1269bb60ca5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be fulfilled if amount is zero",
                "fullTitle": "Contract: EmissionFunds [all features] #freezeFunds should be fulfilled if amount is zero",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const amountToFreeze = 0;\nconst {logs} = await emissionFunds.freezeFunds(\n  amountToFreeze,\n  {from: votingToManageEmissionFunds}\n).should.be.fulfilled;\namount.should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\nlogs[0].event.should.be.equal(\"FundsFrozen\");\nlogs[0].args.caller.should.be.equal(votingToManageEmissionFunds);\nlogs[0].args.amount.should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "d4ff7fd3-14de-4602-99fe-73786aac9cc2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66e5fd02-3464-4d05-9760-ebfa1e6bd82f",
              "5b1171da-2fab-4507-9d3f-c1269bb60ca5",
              "d4ff7fd3-14de-4602-99fe-73786aac9cc2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 306,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "993a69b6-a826-4489-af50-d80543dd623b",
        "title": "Contract: EternalStorageProxy [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
        "file": "/test/eternal_storage_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 289,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "fc2c5a54-0d47-494b-9818-94b396b86c72",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d11cf5cb-dca3-4d23-aa0e-1b05cce52fbf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: EternalStorageProxy [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2d34c2a6-0698-4ba4-8702-f8332731fbee",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "b4840242-8481-4b83-9e28-df7805199ab5",
            "title": "constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should revert if implementation address is equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should revert if implementation address is equal to 0x0",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await EternalStorageProxy.new(\n  accounts[1],\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4aac4084-1787-4d7f-87ce-3616405e7ce4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow ProxyStorage address equal to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should allow ProxyStorage address equal to 0x0",
                "timedOut": false,
                "duration": 54,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  '0x0000000000000000000000000000000000000000',\n  accounts[1]\n).should.be.fulfilled;\ninstance.address.should.be.equal(\n  await instance.getProxyStorage.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "aebaac8f-18a3-4b30-ad8f-6603c11c2ae1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set ProxyStorage address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set ProxyStorage address",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getProxyStorage.call()).should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "3ae5a7fe-7599-4992-9365-ca5dc5959592",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set implementation address",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "4de7a51f-351b-4625-aba1-f87fdf0667b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] constructor should set owner",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "2833eac8-5404-4fa7-a70e-368ec7483daf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4aac4084-1787-4d7f-87ce-3616405e7ce4",
              "aebaac8f-18a3-4b30-ad8f-6603c11c2ae1",
              "3ae5a7fe-7599-4992-9365-ca5dc5959592",
              "4de7a51f-351b-4625-aba1-f87fdf0667b6",
              "2833eac8-5404-4fa7-a70e-368ec7483daf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 283,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e73156d0-0bfc-4324-b5f2-011225c39a57",
            "title": "#renounceOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 32,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1381a0c2-ec65-47cd-a6e4-5a3a03116e2e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.renounceOwnership({from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait instance.renounceOwnership().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "58c6926c-690b-4611-9eca-d078f575ff66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set owner to 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #renounceOwnership should set owner to 0x0",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.renounceOwnership().should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlogs[0].event.should.be.equal(\"OwnershipRenounced\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);",
                "err": {},
                "isRoot": false,
                "uuid": "89be6ada-b029-4472-9677-c4a87c1cf2dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "58c6926c-690b-4611-9eca-d078f575ff66",
              "89be6ada-b029-4472-9677-c4a87c1cf2dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 59,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "65ce7f46-075e-47fa-a2e2-078d0a0a1dde",
            "title": "#transferOwnership",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership \"before each\" hook",
                "timedOut": false,
                "duration": 35,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "de4331f9-b4d3-4dab-9d9b-755d59a65536",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by an owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership may only be called by an owner",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  accounts[3],\n  {from: accounts[4]}\n).should.be.rejectedWith(ERROR_MSG);\nawait instance.transferOwnership(accounts[3]).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8ba365d3-ddb8-4336-b4e8-bcf6230c19a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change owner",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should change owner",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.transferOwnership(accounts[3]).should.be.fulfilled;\n(await instance.getOwner.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"OwnershipTransferred\");\nlogs[0].args.previousOwner.should.be.equal(accounts[0]);\nlogs[0].args.newOwner.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "cd3f4cbe-4648-41b4-8633-b6f2fc7a215a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change owner if its address is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #transferOwnership should not change owner if its address is 0x0",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.transferOwnership(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5ca9a579-1efa-46c2-946f-2028b5b6943a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8ba365d3-ddb8-4336-b4e8-bcf6230c19a2",
              "cd3f4cbe-4648-41b4-8633-b6f2fc7a215a",
              "5ca9a579-1efa-46c2-946f-2028b5b6943a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 84,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8bf705f5-c1e1-472e-b5e9-86cde8a8940b",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/eternal_storage_proxy_test.js",
            "file": "/test/eternal_storage_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 25,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "instance = await EternalStorageProxy.new(\n  accounts[1],\n  accounts[2]\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "5e36a9f1-9663-4931-ad34-2ec85bd65ecf",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await instance.upgradeTo(accounts[3]).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await instance.upgradeTo(accounts[3], {from: accounts[1]});\nlogs[0].event.should.be.equal(\"Upgraded\");",
                "err": {},
                "isRoot": false,
                "uuid": "08c79819-a93f-4921-9ccb-c4f7526d36df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is the same",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is the same",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  accounts[2],\n  {from: accounts[1]}\n).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "8f35cdf5-9855-4ecf-926d-577d565e2c53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not change implementation address if it is 0x0",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should not change implementation address if it is 0x0",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await instance.upgradeTo(\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "bb2e4919-6669-4f4b-9325-2149b6f436a7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n).should.be.fulfilled;\n(await instance.implementation.call()).should.be.equal(accounts[3]);\nlogs[0].event.should.be.equal(\"Upgraded\");\nlogs[0].args.version.should.be.bignumber.equal(1);\nlogs[0].args.implementation.should.be.equal(accounts[3]);",
                "err": {},
                "isRoot": false,
                "uuid": "67be15be-aa21-473e-a90a-4e91f1eab88f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment version",
                "fullTitle": "Contract: EternalStorageProxy [all features] #upgradeTo should increment version",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await instance.version.call()).should.be.bignumber.equal(0);\nconst {logs} = await instance.upgradeTo(\n  accounts[3],\n  {from: accounts[1]}\n);\nlogs[0].event.should.be.equal(\"Upgraded\");\n(await instance.version.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "64d7d659-936b-44d8-8600-f0a1e9dc44e9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "08c79819-a93f-4921-9ccb-c4f7526d36df",
              "8f35cdf5-9855-4ecf-926d-577d565e2c53",
              "bb2e4919-6669-4f4b-9325-2149b6f436a7",
              "67be15be-aa21-473e-a90a-4e91f1eab88f",
              "64d7d659-936b-44d8-8600-f0a1e9dc44e9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 131,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "f5a3c369-d0dd-4399-b503-603c4faa2772",
        "title": "Contract: KeysManager [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
        "file": "/test/keys_manager_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 389,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a08b11c4-c636-4cc3-8f4e-a4d70a7a3cc2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "62bd838d-efa7-4131-8404-7e96b0047c1d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 578,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "6801b298-48df-46e6-b0a2-2ff5fa76c6ab",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "37a0c0e8-ffe4-4d8c-a316-dec45c8e1215",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "0d902098-28c5-4b9e-99f4-8043b36ad50d",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "ddb41119-f2c7-4709-8c59-f6e3c78c8979",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "c5c80c28-906d-4434-9bd5-ca85aa0440ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "386e6f29-de02-4364-bc6b-40ab80d3823d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ddb41119-f2c7-4709-8c59-f6e3c78c8979",
              "c5c80c28-906d-4434-9bd5-ca85aa0440ac",
              "386e6f29-de02-4364-bc6b-40ab80d3823d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 77,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a560625d-bbc5-4c16-a605-82d4ff152595",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "57a4caf5-4f31-43b4-b105-7a0d5b178fb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 42,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "da1bb765-a0c5-4f3e-9844-728221472b90",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2ac3cbd0-a34a-4f0b-842f-de4551cc4b76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "85fecbdc-d0a1-4773-ba11-225a7a7a4536",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2cd3ccb2-384d-4c20-b004-5df670006050",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 469,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "438c365c-589a-4e78-bf3c-1efeec071466",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "96e3e748-3a55-4971-a301-4dffbc73b467",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "e0c42765-9f55-4c64-b126-dafeb0ed7685",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "57a4caf5-4f31-43b4-b105-7a0d5b178fb2",
              "da1bb765-a0c5-4f3e-9844-728221472b90",
              "2ac3cbd0-a34a-4f0b-842f-de4551cc4b76",
              "85fecbdc-d0a1-4773-ba11-225a7a7a4536",
              "2cd3ccb2-384d-4c20-b004-5df670006050",
              "438c365c-589a-4e78-bf3c-1efeec071466",
              "96e3e748-3a55-4971-a301-4dffbc73b467",
              "e0c42765-9f55-4c64-b126-dafeb0ed7685"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1002,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9eea6477-4426-47bd-a05b-f0fba332e90c",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "367ce16e-8639-49c6-a4f4-72b22e5d7207",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "212160a0-6674-46a4-b06e-50797b2db525",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "76799ced-a3a2-4e30-9df1-e85f70d6e04f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d54fa961-ccc7-44e6-8815-27c8dac0b8e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 278,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0f30d0cd-bb56-4686-9137-d36d712bea61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "f3a34e75-2c1d-4c44-bbbf-4d885a212efd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "d4e994cb-b2f6-4d98-b8f8-443f08c79a08",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "12c98fb9-f321-493c-b733-8bcf2dc91e96",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 128,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "24169b69-c937-4b5f-83a1-06c55dc62431",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "198762fa-1e44-4f21-9816-8d1979ce116d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "367ce16e-8639-49c6-a4f4-72b22e5d7207",
              "212160a0-6674-46a4-b06e-50797b2db525",
              "76799ced-a3a2-4e30-9df1-e85f70d6e04f",
              "d54fa961-ccc7-44e6-8815-27c8dac0b8e1",
              "0f30d0cd-bb56-4686-9137-d36d712bea61",
              "f3a34e75-2c1d-4c44-bbbf-4d885a212efd",
              "d4e994cb-b2f6-4d98-b8f8-443f08c79a08",
              "12c98fb9-f321-493c-b733-8bcf2dc91e96",
              "24169b69-c937-4b5f-83a1-06c55dc62431",
              "198762fa-1e44-4f21-9816-8d1979ce116d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1621,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8bb885d0-80c2-4fb8-866b-416ef02b870e",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "00e17837-55c2-4e8f-a5ee-4eebcf00e079",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "57cda26a-3166-4105-8b89-91f20bf9a0dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 50,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "2e9a0940-d85f-483a-9400-78d000ac18bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "dc86da5b-7b57-428f-b48d-0e358b3d6f31",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot add removed mining key",
                "fullTitle": "Contract: KeysManager [all features] #addMiningKey cannot add removed mining key",
                "timedOut": false,
                "duration": 208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let data;\nconst key = accounts[3];\ndata = await keysManager.addMiningKey(key).should.be.fulfilled;\ndata.logs[0].event.should.be.equal('MiningKeyChanged');\ndata.logs[0].args.action.should.be.equal('added');\ndata = await keysManager.removeMiningKey(key).should.be.fulfilled;\ndata.logs[0].event.should.be.equal('MiningKeyChanged');\ndata.logs[0].args.action.should.be.equal('removed');\ndata = await keysManager.addMiningKey(key).should.be.fulfilled;\n(data.logs[0] === undefined).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "cb67030c-096a-4a22-98a0-66e56a0b73fa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00e17837-55c2-4e8f-a5ee-4eebcf00e079",
              "57cda26a-3166-4105-8b89-91f20bf9a0dc",
              "2e9a0940-d85f-483a-9400-78d000ac18bb",
              "dc86da5b-7b57-428f-b48d-0e358b3d6f31",
              "cb67030c-096a-4a22-98a0-66e56a0b73fa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 502,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "acfdad4c-c1d6-43df-9fa5-68decefd899e",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "feff3055-d64d-472f-b8c6-9d1c5dc4ffdc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "229d26d4-adfe-485e-9d68-5609b91a2c07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 133,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "dc3b8f3d-b2ab-425c-b329-f61b35592a8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "f1e0a450-f236-43d8-8de4-a5482d7ebd30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 206,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "f28b605d-7d1e-42ca-b1ba-cba1a4a6a360",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "feff3055-d64d-472f-b8c6-9d1c5dc4ffdc",
              "229d26d4-adfe-485e-9d68-5609b91a2c07",
              "dc3b8f3d-b2ab-425c-b329-f61b35592a8f",
              "f1e0a450-f236-43d8-8de4-a5482d7ebd30",
              "f28b605d-7d1e-42ca-b1ba-cba1a4a6a360"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 762,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "082ea717-0e82-4e16-b051-5a1bd9c6b9c0",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "a76abcf1-d0b7-443f-ae3c-edaa377dc9d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "46d83bf7-0d17-4ddf-910a-9c805634bd0f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 134,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "87d34936-d9a6-4241-b91e-a1e8726ce163",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "55721d8b-0d4e-4108-837a-e0364e66a3b6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "33ac64e2-d6e5-446f-803f-12a2e40067b2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a76abcf1-d0b7-443f-ae3c-edaa377dc9d5",
              "46d83bf7-0d17-4ddf-910a-9c805634bd0f",
              "87d34936-d9a6-4241-b91e-a1e8726ce163",
              "55721d8b-0d4e-4108-837a-e0364e66a3b6",
              "33ac64e2-d6e5-446f-803f-12a2e40067b2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 735,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "38f3811b-24dc-4c9c-a8ff-9adc2f2d3cc8",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "f956ff7f-f710-407f-a4bd-2a3b9a1094fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 543,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "34522c5b-f74e-443d-ac5f-e60668e9631f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 298,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "2b95b5ff-d702-4f39-879d-bd9a332b8c7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 941,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "a8845683-9f83-4b04-9c0e-1ef01e795415",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "599af3c5-37c3-44b7-963e-09aaa04afc20",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f956ff7f-f710-407f-a4bd-2a3b9a1094fc",
              "34522c5b-f74e-443d-ac5f-e60668e9631f",
              "2b95b5ff-d702-4f39-879d-bd9a332b8c7c",
              "a8845683-9f83-4b04-9c0e-1ef01e795415",
              "599af3c5-37c3-44b7-963e-09aaa04afc20"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2175,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "48eb077d-67cf-4e8c-9fca-b1bc527ff919",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "1d701bf7-1523-4e73-8b2f-c7112a0df034",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "06d253e1-234e-456f-a703-1cdec8544be9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "2777e3c2-6716-4358-b3e1-d452cfeaa403",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d701bf7-1523-4e73-8b2f-c7112a0df034",
              "06d253e1-234e-456f-a703-1cdec8544be9",
              "2777e3c2-6716-4358-b3e1-d452cfeaa403"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 664,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4e2beba9-a2fa-44b4-86db-dd40ec44d44a",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "b0241191-f0bc-4585-ad33-2574c5e8f259",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 197,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "b48e0d97-0b81-4342-9695-966a5ab2ebbd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 216,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "0e46a20e-beef-4f51-b74c-a6b04412e46c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b0241191-f0bc-4585-ad33-2574c5e8f259",
              "b48e0d97-0b81-4342-9695-966a5ab2ebbd",
              "0e46a20e-beef-4f51-b74c-a6b04412e46c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 591,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8b598b79-fafd-4626-a25a-f4fc49221696",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 696,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "f88592eb-2e8b-4614-ba42-00467e5ce44d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot swap to removed mining key",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey cannot swap to removed mining key",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[1], accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "4295814c-7ba7-4b4a-a9a8-38692008162a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "2c3e67fa-d78d-4d34-b698-60d6e77f8f68",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 558,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "4cb96eb3-1086-423d-a3ec-040bf946f1c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f88592eb-2e8b-4614-ba42-00467e5ce44d",
              "4295814c-7ba7-4b4a-a9a8-38692008162a",
              "2c3e67fa-d78d-4d34-b698-60d6e77f8f68",
              "4cb96eb3-1086-423d-a3ec-040bf946f1c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1810,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "350e9c27-55bc-4f1f-a45b-0f5c5c114238",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "98b7113e-e1c6-492e-a5af-d92ad6d07cee",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98b7113e-e1c6-492e-a5af-d92ad6d07cee"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 171,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c7dcad14-77ba-4caa-afb3-1b5bab0e213f",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 211,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b9faf39a-dd30-468c-9ecb-fe7b69872647",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b9faf39a-dd30-468c-9ecb-fe7b69872647"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 211,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "01952bba-e700-429f-b650-b9f74e2b2263",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 320,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "92a9a07b-4442-4f46-8d94-1917f1cabe5f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "92a9a07b-4442-4f46-8d94-1917f1cabe5f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 320,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8a38b96c-fc55-48a2-a289-3e2ee22c7eb4",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 947,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "2a43dceb-7e43-45f6-acad-710644d16fa5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4d78838d-24be-4ea4-90ac-bad4ed098816",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2a43dceb-7e43-45f6-acad-710644d16fa5",
              "4d78838d-24be-4ea4-90ac-bad4ed098816"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1132,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5c4b8789-47fa-471a-bfc5-0f6b59f1e505",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_test.js",
            "file": "/test/keys_manager_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 139,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nkeysManager = await KeysManagerMock.new();\nkeysManagerOldImplementation = keysManager.address;\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nawait keysManager.setProxyStorage(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "68020cb0-8ee7-43d6-bd8f-c25d1c109273",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "4959bbac-5f8f-4180-83f5-39edc5fdc26e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet newImplementation = keysManagerNew.address;\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(keysManagerOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "ba98306f-43b0-4530-be08-387c138ab63e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 89,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nlet oldVersion = await keysManagerEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\n(await keysManagerEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "0c5428d2-8dfb-4054-91a6-412cb1948516",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.initialized.call()).should.be.equal(false);\nawait keysManagerNew.initialize();\n(await keysManagerNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "7ee503a4-a40a-4dc0-ba18-16cc257921d9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 78,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManagerNew.new();\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\n(await keysManagerNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "45f75105-b008-4900-8b66-8d3c113d9eb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: KeysManager [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keys = await keysManager.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nawait keysManager.setProxyStorage(proxyStorageMock.address);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManager.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(keysManagerNew.address, {from: proxyStorageStubAddress});\nkeysManagerNew = await KeysManagerNew.at(keysManagerEternalStorage.address);\nkeys = await keysManagerNew.validatorKeys.call(accounts[2]);\nkeys.should.be.deep.equal([accounts[3], accounts[4], true, true, true]);",
                "err": {},
                "isRoot": false,
                "uuid": "89c9921b-15d9-4c44-89f9-1957f6b46041",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4959bbac-5f8f-4180-83f5-39edc5fdc26e",
              "ba98306f-43b0-4530-be08-387c138ab63e",
              "0c5428d2-8dfb-4054-91a6-412cb1948516",
              "7ee503a4-a40a-4dc0-ba18-16cc257921d9",
              "45f75105-b008-4900-8b66-8d3c113d9eb4",
              "89c9921b-15d9-4c44-89f9-1957f6b46041"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 673,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "ecea8045-af19-4bfb-b456-311ba0392ebb",
        "title": "Contract: KeysManager upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
        "file": "/test/keys_manager_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2629,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "50a9f86c-f4ff-41fc-8e7e-348377e4f5ab",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9bcc333b-0472-4d08-add8-86d27af7318c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 601,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\",\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nlet ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvalidatorMetadata = await ValidatorMetadata.new();\nlet validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvalidatorMetadata = ValidatorMetadata.at(validatorMetadataEternalStorage.address);\nlet keysManagerNew = await KeysManagerNew.new();\nawait keysManagerEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await keysManagerEternalStorage.upgradeTo(keysManagerNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait keysManagerEternalStorage.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerNew.at(keysManagerEternalStorage.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsStorage.address,\n  validatorMetadata.address,\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "b17f25b5-4b26-4836-94d2-2eb7e2208cc5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: KeysManager upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d9406743-ff90-4ce5-b047-718d6bfcebce",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "562d4aea-f3ed-4ddf-bd7c-6a2cc68f28c6",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets masterOfCeremony, proxyStorage, poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor sets masterOfCeremony, proxyStorage, poaConsensus",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "masterOfCeremony.should.be.equal(await keysManager.masterOfCeremony.call());\nproxyStorageMock.address.should.be.equal(await keysManager.proxyStorage.call());\npoaNetworkConsensusMock.address.should.be.equal(await keysManager.poaNetworkConsensus.call());",
                "err": {},
                "isRoot": false,
                "uuid": "fbbce515-573f-4d43-b781-89e3b893e316",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds masterOfCeremony to validators hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor adds masterOfCeremony to validators hash",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const validator = await keysManager.validatorKeys.call(masterOfCeremony);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b59ade2e-d3e2-457a-8d40-54c76cdf99a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called twice",
                "fullTitle": "Contract: KeysManager upgraded [all features] #constructor cannot be called twice",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.init(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "27fafa39-9b48-4f00-a4fb-287fb86e532f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fbbce515-573f-4d43-b781-89e3b893e316",
              "b59ade2e-d3e2-457a-8d40-54c76cdf99a3",
              "27fafa39-9b48-4f00-a4fb-287fb86e532f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 87,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2f5d15fb-f6a2-410e-b9e2-579e9bafb2de",
            "title": "#initiateKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called by master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys can only be called by master of ceremony",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c8089cd6-704d-410d-adcb-4040046e206d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot allow 0x0 addresses",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys cannot allow 0x0 addresses",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys('0x0').should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "98ca77f4-f006-4b06-a2a5-0004f023d8d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "72a08171-0dac-46b6-9786-9181d893ef0d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize already initialized key after validator created mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize already initialized key after validator created mining key",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.fulfilled;   \nawait keysManager.createKeys(accounts[3],accounts[4],accounts[5], {from: accounts[2]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[2], {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "73d83881-5768-4abb-a6e1-e8bb34c4a8c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not equal to master of ceremony",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not equal to master of ceremony",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(masterOfCeremony, {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e18e51db-4f8c-47d0-a150-16c0545603e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to initialize more than maxNumberOfInitialKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should not allow to initialize more than maxNumberOfInitialKeys",
                "timedOut": false,
                "duration": 544,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let maxNumberOfInitialKeys = await keysManager.maxNumberOfInitialKeys.call();\nmaxNumberOfInitialKeys.should.be.bignumber.equal(12);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000013', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8cb6ed0d-69e3-4878-bf6d-58d338325b48",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment initialKeyCount by 1",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should increment initialKeyCount by 1",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let initialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(0);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\ninitialKeysCount = await keysManager.initialKeysCount.call();\ninitialKeysCount.should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "06312ab3-0bbd-425f-a211-d1306a15e7d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set initialKeys hash to activated status",
                "fullTitle": "Contract: KeysManager upgraded [all features] #initiateKeys should set initialKeys hash to activated status",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "new web3.BigNumber(0).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nconst {logs} = await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nnew web3.BigNumber(1).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));\nlet initialKeysCount = await keysManager.initialKeysCount.call();\n// event InitialKeyCreated(address indexed initialKey, uint256 time, uint256 initialKeysCount);\nlogs[0].event.should.equal(\"InitialKeyCreated\");\nlogs[0].args.initialKey.should.be.equal(accounts[1]);\ninitialKeysCount.should.be.bignumber.equal(logs[0].args.initialKeysCount);",
                "err": {},
                "isRoot": false,
                "uuid": "acc85c35-bf31-45d2-b846-1478787751a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c8089cd6-704d-410d-adcb-4040046e206d",
              "98ca77f4-f006-4b06-a2a5-0004f023d8d5",
              "72a08171-0dac-46b6-9786-9181d893ef0d",
              "73d83881-5768-4abb-a6e1-e8bb34c4a8c4",
              "e18e51db-4f8c-47d0-a150-16c0545603e1",
              "8cb6ed0d-69e3-4878-bf6d-58d338325b48",
              "06312ab3-0bbd-425f-a211-d1306a15e7d5",
              "acc85c35-bf31-45d2-b846-1478787751a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1014,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "a9ae483f-c4a3-45f9-afcc-e6828d4cf4dc",
            "title": "#createKeys",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from initialized key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should only be called from initialized key",
                "timedOut": false,
                "duration": 122,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[2], accounts[3], accounts[4], {from: accounts[1]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6c9475f4-35e3-4e8f-af9d-0cb1b1685438",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to 0x0",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to 0x0",
                "timedOut": false,
                "duration": 175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(\n  '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  '0x0000000000000000000000000000000000000000',\n  accounts[4],\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[1]}\n).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(\n  accounts[2],\n  accounts[3],\n  accounts[4],\n  {from: accounts[1]}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3f38e77c-e1a9-46d9-bb3b-59f98c36f111",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "params should not be equal to each other",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys params should not be equal to each other",
                "timedOut": false,
                "duration": 110,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(masterOfCeremony, masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], masterOfCeremony, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1b68f3d9-2c61-440d-88e0-7739d511e686",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "any of params should not be equal to initialKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys any of params should not be equal to initialKey",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[1], masterOfCeremony, accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[1], accounts[2], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(masterOfCeremony, accounts[2], accounts[1], {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "87a4cec4-06de-48bb-9841-e52d46fe4529",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow passing the same key after it is already created",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should not allow passing the same key after it is already created",
                "timedOut": false,
                "duration": 302,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait keysManager.initiateKeys(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[2], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[3], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[4], accounts[7], accounts[6], {from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait keysManager.createKeys(accounts[8], accounts[7], accounts[6], {from: accounts[5]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "be1750fb-fbc0-49aa-9aa9-a27edc5fe780",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign mining, voting, payout keys to relative mappings",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign mining, voting, payout keys to relative mappings",
                "timedOut": false,
                "duration": 140,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nconst {logs} = await keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]}).should.be.fulfilled;\ntrue.should.be.equal(\n  await keysManager.isMiningActive.call(accounts[4])\n)\ntrue.should.be.equal(\n  await keysManager.isVotingActive.call(accounts[3])\n)\ntrue.should.be.equal(\n  await keysManager.isPayoutActive.call(accounts[4])\n)\n// event ValidatorInitialized(address indexed miningKey, address indexed votingKey, address indexed payoutKey);\nlogs[0].event.should.be.equal('ValidatorInitialized');\nlogs[0].args.miningKey.should.be.equal(accounts[4]);\nlogs[0].args.votingKey.should.be.equal(accounts[3]);\nlogs[0].args.payoutKey.should.be.equal(accounts[2]);",
                "err": {},
                "isRoot": false,
                "uuid": "56449558-1ccd-4885-b711-335ec93864d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign voting <-> mining key and payout <-> mining key relationships",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should assign voting <-> mining key and payout <-> mining key relationships",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(accounts[4], accounts[3], accounts[2], {from: accounts[1]});\naccounts[4].should.be.equal(\n  await keysManager.getMiningKeyByVoting.call(accounts[3])\n);\naccounts[4].should.be.equal(\n  await keysManager.miningKeyByPayout.call(accounts[2])\n);",
                "err": {},
                "isRoot": false,
                "uuid": "2de46e3b-9b30-43cb-9ea9-e86254db39d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "adds validator to poaConsensus contract",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys adds validator to poaConsensus contract",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst index = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\n(await poaNetworkConsensusMock.pendingList.call(index)).should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ba67a61e-3303-4ea5-97fd-5c14497d3f4a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 213,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nconst validatorKey = await keysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  accounts[3],\n  accounts[2],\n  true,\n  true,\n  true\n])",
                "err": {},
                "isRoot": false,
                "uuid": "1df60adb-495e-4cfd-842e-d1dac471fbb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #createKeys should set validatorKeys hash",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[4];\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, accounts[3], accounts[2], {from: accounts[1]});\nnew web3.BigNumber(2).should.be.bignumber.equal(await keysManager.getInitialKeyStatus.call(accounts[1]));",
                "err": {},
                "isRoot": false,
                "uuid": "78b83311-eb68-41f6-befc-246a8e097abe",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6c9475f4-35e3-4e8f-af9d-0cb1b1685438",
              "3f38e77c-e1a9-46d9-bb3b-59f98c36f111",
              "1b68f3d9-2c61-440d-88e0-7739d511e686",
              "87a4cec4-06de-48bb-9841-e52d46fe4529",
              "be1750fb-fbc0-49aa-9aa9-a27edc5fe780",
              "56449558-1ccd-4885-b711-335ec93864d7",
              "2de46e3b-9b30-43cb-9ea9-e86254db39d3",
              "ba67a61e-3303-4ea5-97fd-5c14497d3f4a",
              "1df60adb-495e-4cfd-842e-d1dac471fbb8",
              "78b83311-eb68-41f6-befc-246a8e097abe"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1542,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "550eb593-6b37-47d0-9e56-ae36b0126126",
            "title": "#addMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.setInitEnabled().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], false, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "094a079e-24fc-42fa-ac81-23eb2c4fb325",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from votingToChangeKeys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should only be called from votingToChangeKeys",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addMiningKey(accounts[1],{from: accounts[5]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setVotingContractMock(accounts[2]);\nawait addMiningKey(accounts[1], true, {from: accounts[2]});",
                "err": {},
                "isRoot": false,
                "uuid": "8f1c0153-ce8a-47c2-816e-0abe16516dd2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add more than maxLimit",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should not let add more than maxLimit",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensusMock.setCurrentValidatorsLength(2001);\nawait addMiningKey(accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "03d120af-546f-4114-ad1d-888d37a7a23b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorKeys hash",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey should set validatorKeys hash",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await keysManager.addMiningKey(accounts[2]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[2]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false]\n)\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('added');",
                "err": {},
                "isRoot": false,
                "uuid": "1b5bd7f1-a6ef-49d9-b61d-b7cb7e5756cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot add removed mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addMiningKey cannot add removed mining key",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let data;\nconst key = accounts[3];\ndata = await keysManager.addMiningKey(key).should.be.fulfilled;\ndata.logs[0].event.should.be.equal('MiningKeyChanged');\ndata.logs[0].args.action.should.be.equal('added');\ndata = await keysManager.removeMiningKey(key).should.be.fulfilled;\ndata.logs[0].event.should.be.equal('MiningKeyChanged');\ndata.logs[0].args.action.should.be.equal('removed');\ndata = await keysManager.addMiningKey(key).should.be.fulfilled;\n(data.logs[0] === undefined).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c6d0a0f9-4231-4c08-9e98-43306f0b21fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "094a079e-24fc-42fa-ac81-23eb2c4fb325",
              "8f1c0153-ce8a-47c2-816e-0abe16516dd2",
              "03d120af-546f-4114-ad1d-888d37a7a23b",
              "1b5bd7f1-a6ef-49d9-b61d-b7cb7e5756cd",
              "c6d0a0f9-4231-4c08-9e98-43306f0b21fb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 487,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9ded88e6-1d96-46b1-a3ba-6dad38c306b0",
            "title": "#addVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "1d8ed0a3-21df-4638-9d98-37547429391e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 119,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[1], accounts[1], false);\nawait addVotingKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "0e956be8-d3de-45fd-baab-be45c56d2763",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add VotingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should add VotingKey",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.addVotingKey(accounts[2], accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addVotingKey(accounts[2], accounts[1]).should.be.fulfilled;\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(accounts[2]);\nminingKey.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "f981a9a4-ed15-49ac-82e4-0bea0a3d9ee9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey should only be called if mining is active",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "af809220-7abf-410e-8cd9-8eeaaa678c37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addVotingKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nfalse.should.be.equal(await keysManager.isVotingActive.call(accounts[2]));\ntrue.should.be.equal(await keysManager.isVotingActive.call(accounts[3]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "cfcfc746-d20a-4436-8588-dfb03cdd7dcf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1d8ed0a3-21df-4638-9d98-37547429391e",
              "0e956be8-d3de-45fd-baab-be45c56d2763",
              "f981a9a4-ed15-49ac-82e4-0bea0a3d9ee9",
              "af809220-7abf-410e-8cd9-8eeaaa678c37",
              "cfcfc746-d20a-4436-8588-dfb03cdd7dcf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 870,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "578b43a8-56af-406b-b375-e565d1e965b3",
            "title": "#addPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "b299cde6-a7f5-4e04-a960-854af1744d7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called if params are not the same",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey may only be called if params are not the same",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[1], accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "02a88f8f-49c0-4ef3-8bce-5a87a9382ec6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add PayoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should add PayoutKey",
                "timedOut": false,
                "duration": 135,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addPayoutKey(accounts[2], accounts[1], false);\nawait addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.addPayoutKey(accounts[2], accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('added');\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "7e1bbe03-d136-4178-866f-b3f8d51d34af",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called if mining is active",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey should only be called if mining is active",
                "timedOut": false,
                "duration": 185,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait addPayoutKey(accounts[2], accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "81c093c2-a4f9-4d2f-8356-33fc6d7afaa4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "swaps keys if voting already exists",
                "fullTitle": "Contract: KeysManager upgraded [all features] #addPayoutKey swaps keys if voting already exists",
                "timedOut": false,
                "duration": 279,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addPayoutKey(accounts[3], accounts[1], true);\ntrue.should.be.equal(await keysManager.isPayoutActive.call(accounts[1]));\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "38b57bc9-9ad3-496d-85de-6c29a0786a89",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b299cde6-a7f5-4e04-a960-854af1744d7c",
              "02a88f8f-49c0-4ef3-8bce-5a87a9382ec6",
              "7e1bbe03-d136-4178-866f-b3f8d51d34af",
              "81c093c2-a4f9-4d2f-8356-33fc6d7afaa4",
              "38b57bc9-9ad3-496d-85de-6c29a0786a89"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 819,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e33a2a97-f55f-4d0c-b555-f6a2a8495c0f",
            "title": "#removeMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nlet result = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "48550eb1-b3b0-4bdf-ae6a-a025150821d8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove miningKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should remove miningKey",
                "timedOut": false,
                "duration": 537,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removeMiningKey(accounts[1], {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[3]}).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst {logs} = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n);\nlogs[0].event.should.be.equal('MiningKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');\nlogs[1].event.should.be.equal('VotingKeyChanged');\nlogs[1].args.key.should.be.equal(accounts[3]);\nlogs[1].args.miningKey.should.be.equal(accounts[1]);\nlogs[1].args.action.should.be.equal('removed');\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\nlet result = await keysManager.removeVotingKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nresult = await keysManager.removeMiningKey(accounts[1]);\nresult.logs.length.should.be.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "d4b8dbbd-6539-405b-8840-bab712d098db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes validator from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes validator from poaConsensus",
                "timedOut": false,
                "duration": 288,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst {logs} = await keysManager.removeMiningKey(accounts[1]);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nlet currentValidatorsLength = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength.sub(1).toNumber(); i++){\n    let pending = await poaNetworkConsensusMock.pendingList.call(i);\n    pendingList.push(pending);\n}\npendingList.should.not.contain(accounts[1]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(accounts[1]);\nconst expected = currentValidatorsLength.sub(1);\nconst actual = await poaNetworkConsensusMock.getCurrentValidatorsLength.call();\nexpected.should.be.bignumber.equal(actual);",
                "err": {},
                "isRoot": false,
                "uuid": "038c5a48-503f-4c07-8a76-08a3c8b72eeb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "removes MoC from poaConsensus",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey removes MoC from poaConsensus",
                "timedOut": false,
                "duration": 822,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys('0x0000000000000000000000000000000000000001', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000002', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000003', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000004', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000005', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000006', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000007', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000008', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000009', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000010', {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000011', {from: masterOfCeremony}).should.be.fulfilled;\n\nlet result = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs.length.should.be.equal(0);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait keysManager.initiateKeys('0x0000000000000000000000000000000000000012', {from: masterOfCeremony}).should.be.fulfilled;\n\nresult = await keysManager.removeMiningKey(masterOfCeremony);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensusMock.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "5be3e210-cce2-4fd8-b6ca-f49e7f2d333e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeMiningKey should still enforce removal of votingKey to 0x0 even if voting key did not exist",
                "timedOut": false,
                "duration": 253,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1], true);\nresult = await keysManager.removeMiningKey(accounts[1]).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('MiningKeyChanged');\nresult.logs[0].args.key.should.be.equal(accounts[1]);\nresult.logs[0].args.action.should.be.equal('removed');\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\n(await keysManager.getMiningKeyByVoting.call(validator[0])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(validator[1])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);",
                "err": {},
                "isRoot": false,
                "uuid": "444f914a-dedf-4903-89fe-45e507cd1b3e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "48550eb1-b3b0-4bdf-ae6a-a025150821d8",
              "d4b8dbbd-6539-405b-8840-bab712d098db",
              "038c5a48-503f-4c07-8a76-08a3c8b72eeb",
              "5be3e210-cce2-4fd8-b6ca-f49e7f2d333e",
              "444f914a-dedf-4903-89fe-45e507cd1b3e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2038,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3a96db10-596c-490f-a2ae-0a35fd289264",
            "title": "#removeVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removeVotingKey(mining, false);",
                "err": {},
                "isRoot": false,
                "uuid": "b577aa3a-f5c4-42ce-8e21-496a606f284a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should be successful only for active voting key",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait addMiningKey(mining, true);\nawait addPayoutKey(payout, mining, true);\nconst result = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nresult.logs.length.should.be.equal(0);\nawait addVotingKey(voting, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.miningKey.should.be.equal(mining);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "63c15e7e-da6c-47c0-9e6b-841627b46bbf",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove votingKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removeVotingKey should remove votingKey",
                "timedOut": false,
                "duration": 201,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {mining, voting, payout} = {mining: accounts[1], voting: accounts[3], payout: accounts[2]};\nawait keysManager.removeVotingKey(mining, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(mining, true);\nawait addVotingKey(voting, mining, true);\nawait addPayoutKey(payout, mining, true);\nconst {logs} = await keysManager.removeVotingKey(mining).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(mining);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  payout,\n  true,\n  false,\n  true]\n)\nlogs[0].event.should.be.equal('VotingKeyChanged');\nlogs[0].args.key.should.be.equal(voting);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.getMiningKeyByVoting.call(voting);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "7152ce49-f0fe-4060-a29e-dae6fff8037a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b577aa3a-f5c4-42ce-8e21-496a606f284a",
              "63c15e7e-da6c-47c0-9e6b-841627b46bbf",
              "7152ce49-f0fe-4060-a29e-dae6fff8037a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 621,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8ca40f7d-b236-4cf5-96c6-18e427f7e2f8",
            "title": "#removePayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called if KeysManager.init had been called before",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey may only be called if KeysManager.init had been called before",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait keysManager.setInitEnabled().should.be.fulfilled;\nawait removePayoutKey(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "f932c5b2-ba19-467f-aba1-9ed7e0cb35a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be successful only for active payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should be successful only for active payout key",
                "timedOut": false,
                "duration": 262,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nawait removePayoutKey(accounts[1], false);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.miningKey.should.be.equal(accounts[1]);\nlogs[0].args.action.should.be.equal('removed');",
                "err": {},
                "isRoot": false,
                "uuid": "e850e5fa-f4cb-4511-8c46-8ce04fa54d76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove payoutKey",
                "fullTitle": "Contract: KeysManager upgraded [all features] #removePayoutKey should remove payoutKey",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.removePayoutKey(accounts[1], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nawait addVotingKey(accounts[3], accounts[1], true);\nconst {logs} = await keysManager.removePayoutKey(accounts[1]).should.be.fulfilled;\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)\nlogs[0].event.should.be.equal('PayoutKeyChanged');\nlogs[0].args.key.should.be.equal(accounts[2]);\nlogs[0].args.action.should.be.equal('removed');\nconst miningKey = await keysManager.miningKeyByPayout.call(accounts[2]);\nminingKey.should.be.equal('0x0000000000000000000000000000000000000000');",
                "err": {},
                "isRoot": false,
                "uuid": "6f31cabd-65af-4e68-9416-4ba397b782a2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f932c5b2-ba19-467f-aba1-9ed7e0cb35a5",
              "e850e5fa-f4cb-4511-8c46-8ce04fa54d76",
              "6f31cabd-65af-4e68-9416-4ba397b782a2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 652,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9b980062-8b29-46cb-8f1b-16760de4cab1",
            "title": "#swapMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap mining key",
                "timedOut": false,
                "duration": 598,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapMiningKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[5], accounts[1], true);\nconst validatorData = [\n  \"Djamshut\", \"Roosvelt\", \"123asd\", \"Moskva\", \"ZZ\", \"234\", 23423, \"\", false\n];\nawait validatorMetadata.setTime(55555);\nawait validatorMetadata.createMetadata(...validatorData, {from: accounts[5]}).should.be.fulfilled;\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[4], accounts[3], false);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false\n]);\nconst validatorNew = await keysManager.validatorKeys.call(accounts[2]);\nvalidatorNew.should.be.deep.equal([\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false\n]);\n(await validatorMetadata.validators.call(accounts[2])).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\n(await validatorMetadata.validators.call(accounts[1])).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "512b9d5f-b9b0-42f5-91cc-3a34cb1a9252",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot swap to removed mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey cannot swap to removed mining key",
                "timedOut": false,
                "duration": 254,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addMiningKey(accounts[1], true);\nawait swapMiningKey(accounts[2], accounts[1], true);\nawait swapMiningKey(accounts[1], accounts[2], false);",
                "err": {},
                "isRoot": false,
                "uuid": "de8eed6f-00b7-4278-8522-b2c099f561ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should swap MoC",
                "timedOut": false,
                "duration": 323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await keysManager.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\nawait swapMiningKey(accounts[1], masterOfCeremony, true);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await keysManager.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensusMock.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensusMock.isValidator.call(accounts[1])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c0edd335-74a0-4c35-a59f-2575a790ce66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should keep voting and payout keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapMiningKey should keep voting and payout keys",
                "timedOut": false,
                "duration": 439,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldMining = accounts[1];\nconst voting = accounts[2];\nconst payout = accounts[3];\nconst newMining = accounts[4];\nawait addMiningKey(oldMining, true);\nawait addVotingKey(voting, oldMining, true);\nawait addPayoutKey(payout, oldMining, true);\nconst {logs} = await keysManager.swapMiningKey(newMining, oldMining).should.be.fulfilled;\n//const mining = await keysManager.getMiningKeyByVoting.call(voting);\nconst validator = await keysManager.validatorKeys.call(oldMining);\nnewMining.should.be.equal(await keysManager.getMiningKeyByVoting.call(voting));\nnewMining.should.be.equal(await keysManager.miningKeyByPayout.call(payout));\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst validatorNew = await keysManager.validatorKeys.call(newMining);\nvalidatorNew.should.be.deep.equal(\n  [ voting,\n  payout,\n  true,\n  true,\n  true]\n)\noldMining.should.be.equal(await keysManager.getMiningKeyHistory.call(newMining));\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(oldMining);\nvalidators.should.contain(newMining);",
                "err": {},
                "isRoot": false,
                "uuid": "94a8f99b-0a91-4be1-979f-b9901e68f789",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "512b9d5f-b9b0-42f5-91cc-3a34cb1a9252",
              "de8eed6f-00b7-4278-8522-b2c099f561ac",
              "c0edd335-74a0-4c35-a59f-2575a790ce66",
              "94a8f99b-0a91-4be1-979f-b9901e68f789"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1614,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6ec0e665-b21a-4417-822b-0237a63f3e43",
            "title": "#swapVotingKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap voting key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapVotingKey should swap voting key",
                "timedOut": false,
                "duration": 171,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapVotingKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addVotingKey(accounts[2], accounts[1], true);\nawait swapVotingKey(accounts[3], accounts[1], true);\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ accounts[3],\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "07d89993-49de-4600-a177-3bf31c9480c5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "07d89993-49de-4600-a177-3bf31c9480c5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 171,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "788929de-45e6-4333-9370-5abd440022b1",
            "title": "#swapPayoutKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap payout key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #swapPayoutKey should swap payout key",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.swapPayoutKey(accounts[1], accounts[2], {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);\nawait addMiningKey(accounts[1], true);\nawait addPayoutKey(accounts[2], accounts[1], true);\nconst {logs} = await keysManager.swapPayoutKey(accounts[3], accounts[1]);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nconst validator = await keysManager.validatorKeys.call(accounts[1]);\nvalidator.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  accounts[3],\n  true,\n  false,\n  true]\n);\n(await keysManager.miningKeyByPayout.call(accounts[2])).should.be.equal(\n  '0x0000000000000000000000000000000000000000'\n);\n(await keysManager.miningKeyByPayout.call(accounts[3])).should.be.equal(\n  accounts[1]\n);",
                "err": {},
                "isRoot": false,
                "uuid": "eb0d32e6-279f-4485-ab60-c06788f9b375",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb0d32e6-279f-4485-ab60-c06788f9b375"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 190,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5fcfb547-3c91-4941-9833-8af35ecd7348",
            "title": "#migrateInitialKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can copy initial keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateInitialKey can copy initial keys",
                "timedOut": false,
                "duration": 322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await keysManager.initiateKeys(accounts[1]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\nkeysManager.address.should.be.equal(\n  await newKeysManager.previousKeysManager.call()\n);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\n\nawait newKeysManager.migrateInitialKey(\n  accounts[1],\n  {from: accounts[9]}\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateInitialKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateInitialKey(accounts[1]).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(accounts[1]);\nlogs[0].args.name.should.be.equal(\"initialKey\");\nawait newKeysManager.migrateInitialKey(accounts[1]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(1).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[1])\n)\nawait newKeysManager.migrateInitialKey(accounts[2]).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(0).should.be.bignumber.equal(\n  await newKeysManager.getInitialKeyStatus.call(accounts[2])\n)",
                "err": {},
                "isRoot": false,
                "uuid": "b828280b-1f46-40eb-9d18-af2f445261c6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b828280b-1f46-40eb-9d18-af2f445261c6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 322,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6b753097-2065-4f68-bbdd-258f478b7e39",
            "title": "#migrateMiningKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/keys_manager_upgrade_test.js",
            "file": "/test/keys_manager_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "copies validator keys",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey copies validator keys",
                "timedOut": false,
                "duration": 1005,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[2];\nconst votingKey = accounts[3];\nconst payoutKey = accounts[4];\nconst miningKey2 = accounts[5];\nconst miningKey3 = accounts[6];\n\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey2, true);\nawait swapMiningKey(miningKey3, miningKey2, true);\nawait keysManager.initiateKeys(accounts[1], {from: masterOfCeremony}).should.be.fulfilled;\nawait keysManager.createKeys(miningKey, votingKey, payoutKey, {from: accounts[1]}).should.be.fulfilled;\n\nconst validatorKeyFromOld = await keysManager.validatorKeys.call(miningKey);\nvalidatorKeyFromOld.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\n\nlet newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\n// mining #1\nawait newKeysManager.migrateMiningKey(\n  '0x0000000000000000000000000000000000000000'\n).should.be.rejectedWith(ERROR_MSG);\nawait newKeysManager.migrateMiningKey(accounts[9]).should.be.rejectedWith(ERROR_MSG);\nlet {logs} = await newKeysManager.migrateMiningKey(miningKey).should.be.fulfilled;\nlogs[0].event.should.equal(\"Migrated\");\nlogs[0].args.key.should.be.equal(miningKey);\nlogs[0].args.name.should.be.equal(\"miningKey\");\nawait newKeysManager.migrateMiningKey(miningKey).should.be.rejectedWith(ERROR_MSG);\nlet initialKeys = await newKeysManager.initialKeysCount.call();\ninitialKeys.should.be.bignumber.equal(1);\nconst validatorKey = await newKeysManager.validatorKeys.call(miningKey);\nvalidatorKey.should.be.deep.equal([\n  votingKey,\n  payoutKey,\n  true,\n  true,\n  true\n]);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.getMiningKeyByVoting.call(votingKey)\n);\nminingKey.should.be.equal(\n  await newKeysManager.miningKeyByPayout.call(payoutKey)\n);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isVotingActive.call(votingKey)\n)\ntrue.should.be.equal(\n  await newKeysManager.isPayoutActive.call(miningKey)\n)\n// mining #2\nawait newKeysManager.migrateMiningKey(miningKey3).should.be.fulfilled;\nconst validatorKey2 = await newKeysManager.validatorKeys.call(miningKey3);\nvalidatorKey2.should.be.deep.equal([\n  \"0x0000000000000000000000000000000000000000\",\n  \"0x0000000000000000000000000000000000000000\",\n  true,\n  false,\n  false\n]);\ntrue.should.be.equal(\n  await newKeysManager.isMiningActive.call(miningKey3)\n);\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(miningKey3)\n);\n(await keysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);\n(await newKeysManager.getMiningKeyHistory.call(miningKey3)).should.be.equal(\n  miningKey2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9651c737-caa4-4650-a982-8029d8bb8903",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "throws when trying to copy invalid mining key",
                "fullTitle": "Contract: KeysManager upgraded [all features] #migrateMiningKey throws when trying to copy invalid mining key",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = await KeysManagerMock.new();\nconst newKeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, newKeysManager.address);\nnewKeysManager = await KeysManagerMock.at(newKeysManagerEternalStorage.address);\nawait newKeysManager.init(keysManager.address).should.be.fulfilled;\n\ntrue.should.be.equal(\n  await newKeysManager.successfulValidatorClone.call(masterOfCeremony)\n);\nawait newKeysManager.migrateMiningKey(masterOfCeremony).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "72a5542d-b8e4-4dcc-a38a-4ffb741cc3a0",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9651c737-caa4-4650-a982-8029d8bb8903",
              "72a5542d-b8e4-4dcc-a38a-4ffb741cc3a0"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1174,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "b50c6097-0103-4c89-b216-b1e89186c260",
        "title": "Contract: ValidatorMetadata [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
        "file": "/test/metadata_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2804,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "8ef8f1e5-5d10-4c09-86f9-346caa6c3bc4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "886f1f2a-1858-46b1-96fd-38e38c90e685",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 724,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\n\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "7a788d32-b9bf-410a-924d-b822334f9c3e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4be4ef88-a821-4f1e-a824-fde5049c3c4c",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "6f8f9c33-8309-4f74-8643-bf8caf5557fb",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "9bc5b5a8-29c6-4ab9-8acf-316495bce941",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 159,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "85bd27e9-5f45-4473-8aa3-e4abe718baf8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "e91fcb90-a983-46eb-a08b-b45110c91ace",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "086d36ed-64cf-4112-a265-2314dbbad2cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9bc5b5a8-29c6-4ab9-8acf-316495bce941",
              "85bd27e9-5f45-4473-8aa3-e4abe718baf8",
              "e91fcb90-a983-46eb-a08b-b45110c91ace",
              "086d36ed-64cf-4112-a265-2314dbbad2cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 524,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0173d426-6e96-4598-b9a7-689c4a3d2b91",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 607,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "a969e3f8-c454-4a85-97d4-ce1aaf42b23d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a969e3f8-c454-4a85-97d4-ce1aaf42b23d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 607,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "d84bc62c-2941-46fe-85cc-3ad91eae8085",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 846,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "42cc591c-39c0-4aec-a1bb-4a6dab11acab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "42cc591c-39c0-4aec-a1bb-4a6dab11acab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 846,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8f413b40-7020-456f-be95-538a71dbdbb2",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 350,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "aa122e51-da6e-4d4b-a216-25b51d704cd8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "aa122e51-da6e-4d4b-a216-25b51d704cd8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 350,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "4e883a11-7a1a-49c8-890f-b3d1b7d598ca",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 172,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "aae242a0-d032-49d8-913b-05ed0c381f32",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "3918bf80-4d28-470b-ad5b-79584fdc83a8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "73877a72-0dcb-466a-9450-5d893338824b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 400,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "1edc99d7-cf35-4f13-ad94-5c505efc57b9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3918bf80-4d28-470b-ad5b-79584fdc83a8",
              "73877a72-0dcb-466a-9450-5d893338824b",
              "1edc99d7-cf35-4f13-ad94-5c505efc57b9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 557,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2b56967c-ca9e-4c3a-832a-cedbbb1bfe1c",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 423,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "d49020bc-7eda-4657-b0c0-f2dece3df46d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 504,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "61bf5764-d281-4c15-a777-b13f5e2dc9c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d49020bc-7eda-4657-b0c0-f2dece3df46d",
              "61bf5764-d281-4c15-a777-b13f5e2dc9c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 927,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "558ae82c-18a5-4da1-a048-4a1d9e5eb753",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 215,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "25c841c4-9c72-4982-a889-79bab023a48e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 359,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "dcd4b6c6-493b-4f16-9fdc-b48a5ebc0618",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 286,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "04db3a4a-10f2-4964-8e28-f4226002f671",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 538,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "2c0d6171-1c00-4206-adb0-4af947c5d51d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "25c841c4-9c72-4982-a889-79bab023a48e",
              "dcd4b6c6-493b-4f16-9fdc-b48a5ebc0618",
              "04db3a4a-10f2-4964-8e28-f4226002f671",
              "2c0d6171-1c00-4206-adb0-4af947c5d51d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1398,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2c945e09-6a2c-4461-bf62-1bdefb81aa85",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata [all features] #finalize happy path",
                "timedOut": false,
                "duration": 701,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a1fac06c-d5f6-418d-9229-6bc2ed3c7871",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a1fac06c-d5f6-418d-9229-6bc2ed3c7871"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 701,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ca7f0c50-6767-413d-9477-1bf157414a34",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "2d013615-e94c-40fd-a736-84387db6dd17",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2d013615-e94c-40fd-a736-84387db6dd17"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e8c3b44b-411d-469a-9d0d-60b0278bf822",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_test.js",
            "file": "/test/metadata_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 81,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nmetadata = await ValidatorMetadata.new();\nmetadataOldImplementation = metadata.address;\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "a2140524-e23f-4e5b-854e-bc8bfb9280d4",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "442773c2-f970-4826-99e6-d970581b6676",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet newImplementation = metadataNew.address;\n(await metadataEternalStorage.implementation.call()).should.be.equal(metadataOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "085baab3-24b0-4ff6-8fa8-a278cf4314f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nlet oldVersion = await metadataEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\n(await metadataEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "3e85d4df-ccee-46dd-a687-1e785bb9234e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 98,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.initialized.call()).should.be.equal(false);\nawait metadataNew.initialize();\n(await metadataNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "d6b53a1a-8b7b-430c-a00f-9c79a233c1ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\n(await metadataNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "e40a4d25-2892-4e50-86ac-b42cea236f39",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ValidatorMetadata [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 248,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(55555);\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadataEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait upgradeTo(metadataNew.address, {from: proxyStorageStubAddress});\nmetadataNew = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nconst validators = await metadataNew.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "597ce874-5bfe-44cf-ae75-49bc4db6cfb1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "442773c2-f970-4826-99e6-d970581b6676",
              "085baab3-24b0-4ff6-8fa8-a278cf4314f8",
              "3e85d4df-ccee-46dd-a687-1e785bb9234e",
              "d6b53a1a-8b7b-430c-a00f-9c79a233c1ca",
              "e40a4d25-2892-4e50-86ac-b42cea236f39",
              "597ce874-5bfe-44cf-ae75-49bc4db6cfb1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 626,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "1f0d4ae1-3798-45e9-b6e9-3a9370c52b83",
        "title": "Contract: ValidatorMetadata upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
        "file": "/test/metadata_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1558,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "4ec2894a-85c1-4d21-939c-96d6593024f5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7ee01af2-808d-49e5-ae72-39740cda19f5",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 833,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (typeof masterOfCeremony === 'undefined') {\n  masterOfCeremony = accounts[0];\n}\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nminingKey = accounts[1];\nminingKey2 = accounts[4];\nminingKey3 = accounts[5];\nvotingKey3 = accounts[7];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadata.new();\nmetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, metadata.address);\nmetadata = await ValidatorMetadata.at(metadataEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  metadataEternalStorage.address,\n  accounts[0]\n);\nlet metadataNew = await ValidatorMetadataNew.new();\nawait metadataEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await metadataEternalStorage.upgradeTo(metadataNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait metadataEternalStorage.setProxyStorage(proxyStorageMock.address);\nmetadata = await ValidatorMetadataNew.at(metadataEternalStorage.address);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKey, miningKey);\nawait addMiningKey(miningKey2);\nawait addVotingKey(votingKey2, miningKey2);\nawait addMiningKey(miningKey3);\nawait addVotingKey(votingKey3, miningKey3);\nawait metadata.setTime(55555);",
            "err": {},
            "isRoot": false,
            "uuid": "5898cd07-e6d2-4c3a-a222-f74aaa7e3452",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ValidatorMetadata upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b9dbe138-5a56-4a78-b6ba-e054dadd32e9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "aabb9c16-6a1d-406a-90d4-04b65be036ae",
            "title": "#createMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata happy path",
                "timedOut": false,
                "duration": 149,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getTime.call()).should.be.bignumber.equal(55555);\nconst {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal('MetadataCreated');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "00e6de12-7457-4c3e-9f87-021ae06e2b76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if fullAddress is too long",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if fullAddress is too long",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let localFakeData = fakeData.slice();\nlocalFakeData[3] = 'a'.repeat(201);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nlocalFakeData[3] = 'a'.repeat(200);\nawait metadata.createMetadata(...localFakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "48d324c1-f649-40f9-b453-1fa3d9265d4f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called by non-voting key",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called by non-voting key",
                "timedOut": false,
                "duration": 71,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: miningKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "793b167c-1a73-4ebf-89c1-0f0abf5701f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create metadata if called second time",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #createMetadata should not let create metadata if called second time",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "265ba4aa-3f8f-4bf8-aff5-ed383cd70f00",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "00e6de12-7457-4c3e-9f87-021ae06e2b76",
              "48d324c1-f649-40f9-b453-1fa3d9265d4f",
              "793b167c-1a73-4ebf-89c1-0f0abf5701f3",
              "265ba4aa-3f8f-4bf8-aff5-ed383cd70f00"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 621,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6d3aaab1-3d9d-4511-a70f-1b922ab7930f",
            "title": "#clearMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #clearMetadata happy path",
                "timedOut": false,
                "duration": 556,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey2); // voters array\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.clearMetadata(miningKey);\nresult.logs[0].event.should.be.equal('MetadataCleared');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "dfdba0a7-79f8-4330-b7e0-ff6659471899",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dfdba0a7-79f8-4330-b7e0-ff6659471899"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 556,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ae55ab89-89d1-44d3-8acf-a9d4cf0647b1",
            "title": "#moveMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #moveMetadata happy path",
                "timedOut": false,
                "duration": 952,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nresult.logs[0].event.should.be.equal('MetadataCreated');\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.setTime(4444);\nresult = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nresult.logs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nresult.logs[0].args.miningKey.should.be.equal(miningKey);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.fulfilled;\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nresult = await metadata.moveMetadata(miningKey, miningKey2);\nresult.logs[0].event.should.be.equal('MetadataMoved');\nresult.logs[0].args.oldMiningKey.should.be.equal(miningKey);\nresult.logs[0].args.newMiningKey.should.be.equal(miningKey2);\nawait proxyStorageMock.setKeysManagerMock(keysManager.address);\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey)).should.be.deep.equal([\n  toHex(\"\"),\n  toHex(\"\"),\n  toHex(\"\"),\n  \"\",\n  toHex(\"\"),\n  toHex(\"\"),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nconfirmations = await metadata.confirmations.call(miningKey2);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nconfirmations[1][0].should.be.equal(miningKey3); // voters array\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\n(await metadata.pendingChanges.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "25261913-3c11-4ec5-9e87-664915249ca2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "25261913-3c11-4ec5-9e87-664915249ca2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 952,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "53ec0a4d-3ec7-47de-9ed9-d859f18608b5",
            "title": "#initMetadata",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #initMetadata happy path",
                "timedOut": false,
                "duration": 365,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorData = [\n  \"Djamshut\", // bytes32 _firstName\n  \"Roosvelt\", // bytes32 _lastName\n  \"123asd\",   // bytes32 _licenseId\n  \"Moskva\",   // string _fullAddress\n  \"ZZ\",       // bytes32 _state\n  \"234\",      // bytes32 _zipcode\n  23423,      // uint256 _expirationDate\n  123,        // uint256 _createdDate\n  0,          // uint256 _updatedDate\n  3,          // uint256 _minThreshold\n  accounts[8] // address _miningKey\n];\nawait metadata.initMetadata(...validatorData, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[10] = miningKey;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\n(await metadata.validators.call(miningKey)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[7] = 0;\nvalidatorData[10] = miningKey2;\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);\nvalidatorData[7] = 123;\nawait metadata.initMetadata(...validatorData).should.be.fulfilled;\n(await metadata.validators.call(miningKey2)).should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(123),\n  new web3.BigNumber(0),\n  new web3.BigNumber(3),\n  toHex(\"\"),\n  false\n]);\nvalidatorData[10] = miningKey3;\nawait metadata.initMetadataDisable({from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.initMetadataDisable().should.be.fulfilled;\n(await metadata.initMetadataDisabled.call()).should.be.equal(true);\nawait metadata.initMetadata(...validatorData).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7d44e112-b4dd-4717-8107-4db2d2581fcd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7d44e112-b4dd-4717-8107-4db2d2581fcd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 365,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "46175353-39e9-46bc-9c6e-e23accdf8348",
            "title": "#changeRequest",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest \"before each\" hook",
                "timedOut": false,
                "duration": 88,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "9dd22475-39e3-4491-b7fa-f6c7028e0742",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest happy path",
                "timedOut": false,
                "duration": 139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "cffd63db-16f9-4985-9a7e-41eb4c6d71a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let call if there is no metadata",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest should not let call if there is no metadata",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.changeRequest(...newMetadata, {from: accounts[4]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "59fd3a02-6823-4a39-af8c-427ec86969d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "resets confirmations when changeRequest recreated",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #changeRequest resets confirmations when changeRequest recreated",
                "timedOut": false,
                "duration": 427,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nlet confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count\nconst {logs} = await metadata.changeRequest(...anotherData, {from: votingKey}).should.be.fulfilled;\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(0); // voters count\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nconfirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "698882c4-2903-47a3-8148-5d1bf1209fb3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cffd63db-16f9-4985-9a7e-41eb4c6d71a5",
              "59fd3a02-6823-4a39-af8c-427ec86969d0",
              "698882c4-2903-47a3-8148-5d1bf1209fb3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 589,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "059b6a3c-b31b-4488-a2b2-7d8a69a9f06c",
            "title": "#cancelPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange happy path",
                "timedOut": false,
                "duration": 441,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);\nlogs[0].event.should.be.equal(\"ChangeRequestInitiated\");\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "980ee9f7-b8c4-4e30-b9f8-7c893f2e2e30",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let delete records for someone else miningKey",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #cancelPendingChange should not let delete records for someone else miningKey",
                "timedOut": false,
                "duration": 396,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.cancelPendingChange({from: votingKey}).should.be.fulfilled;\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nconst {logs} = await metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.cancelPendingChange({from: votingKey2}).should.be.fulfilled;\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Djamshut\"),\n  toHex(\"Roosvelt\"),\n  pad(web3.toHex(\"123asd\")),\n  \"Moskva\",\n  toHex(\"ZZ\"),\n  pad(web3.toHex(\"234\")),\n  new web3.BigNumber(23423),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(0),\n  new web3.BigNumber(2),\n  toHex(\"info@poa.net\"),\n  false\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "002f708b-79a2-4426-b5ca-f4b70d5c692e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "980ee9f7-b8c4-4e30-b9f8-7c893f2e2e30",
              "002f708b-79a2-4426-b5ca-f4b70d5c692e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 837,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "6c206d0b-1758-4a7b-8230-2aef21debf56",
            "title": "#confirmPendingChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not let confirm your own changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not let confirm your own changes",
                "timedOut": false,
                "duration": 208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2ba9e579-c66c-4efd-845e-4821f5920aa8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should confirm changes",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should confirm changes",
                "timedOut": false,
                "duration": 259,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count\nlogs[0].event.should.be.equal('Confirmed');\nlogs[0].args.miningKey.should.be.equal(miningKey);\nlogs[0].args.votingSender.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "d738e43f-a143-4929-860a-545fff83ac2a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent from double voting",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange prevent from double voting",
                "timedOut": false,
                "duration": 283,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nconst {logs} = await metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(1); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "9c05530e-6a95-421d-bf3e-59d66588f590",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not exceed confirmations limit",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #confirmPendingChange should not exceed confirmations limit",
                "timedOut": false,
                "duration": 479,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey4 = accounts[8];\nconst votingKey4 = accounts[9];\nawait addMiningKey(miningKey4);\nawait addVotingKey(votingKey4, miningKey4);\nawait metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey4}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nconst confirmations = await metadata.confirmations.call(miningKey);\nconfirmations[0].should.be.bignumber.equal(2); // voters count",
                "err": {},
                "isRoot": false,
                "uuid": "5ea879c6-bb27-4f7c-b7d5-884c7d888aed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2ba9e579-c66c-4efd-845e-4821f5920aa8",
              "d738e43f-a143-4929-860a-545fff83ac2a",
              "9c05530e-6a95-421d-bf3e-59d66588f590",
              "5ea879c6-bb27-4f7c-b7d5-884c7d888aed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1229,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "349d2e0e-aba7-448e-950b-b3dfb55b6e09",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 618,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await metadata.createMetadata(...fakeData, {from: votingKey}).should.be.fulfilled;\nawait metadata.setTime(4444);\nawait metadata.changeRequest(...newMetadata, {from: votingKey}).should.be.fulfilled;\nawait metadata.confirmPendingChange(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey2});\nawait metadata.finalize(miningKey, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait metadata.confirmPendingChange(miningKey, {from: votingKey3});\nconst {logs} = await metadata.finalize(miningKey, {from: votingKey}).should.be.fulfilled;\nawait metadata.finalize(miningKey2, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nconst validators = await metadata.validators.call(miningKey);\nvalidators.should.be.deep.equal([\n  toHex(\"Feodosiy\"),\n  toHex(\"Kennedy\"),\n  pad(web3.toHex(\"123123\")),\n  \"Petrovka 38\",\n  toHex(\"ZA\"),\n  pad(web3.toHex(\"1337\")),\n  new web3.BigNumber(71),\n  new web3.BigNumber(55555),\n  new web3.BigNumber(4444),\n  new web3.BigNumber(2),\n  toHex(\"\"),\n  false\n]);\nconst pendingChanges = await metadata.pendingChanges.call(miningKey);\npendingChanges.should.be.deep.equal([\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  \"\",\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000000000000000000000000000',\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  new web3.BigNumber(0),\n  toHex(\"\"),\n  false\n]);\nlogs[0].event.should.be.equal('FinalizedChange');\nlogs[0].args.miningKey.should.be.equal(miningKey);",
                "err": {},
                "isRoot": false,
                "uuid": "ce015b7d-a949-4923-9264-09b40177c8c2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ce015b7d-a949-4923-9264-09b40177c8c2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 618,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5d642d9e-0467-4cf8-89c9-1e88ba5e0c0d",
            "title": "#getMinThreshold",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/metadata_upgrade_test.js",
            "file": "/test/metadata_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns default value",
                "fullTitle": "Contract: ValidatorMetadata upgraded [all features] #getMinThreshold returns default value",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await metadata.getMinThreshold.call()).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "fe34fc09-0bd9-4b26-861a-8af96049bd40",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fe34fc09-0bd9-4b26-861a-8af96049bd40"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 17,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "21c45106-85c5-45c2-8606-96dc512b3fbb",
        "title": "Contract: PoaNetworkConsensus [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
        "file": "/test/poa_network_consensus_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1398,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "63b3c17d-7b33-4356-ac90-30a0bf916859",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7f3edf96-f512-4b36-8caf-ddf2439c059a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 196,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[9];\nawait PoaNetworkConsensus.new('0x0000000000000000000000000000000000000000', []).should.be.rejectedWith(ERROR_MSG);\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []).should.be.fulfilled;;\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensus.address).should.be.fulfilled;\n\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorageMock.address).should.be.rejectedWith(ERROR_MSG);\n\nawait proxyStorageMock.initializeAddresses(\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  accounts[0]\n);",
            "err": {},
            "isRoot": false,
            "uuid": "be53938d-cacf-4e14-9510-2721eb644788",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: PoaNetworkConsensus [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "95420c65-8d83-43ce-92c9-dd5355c15693",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "92bb5ee7-17fb-4e2e-a968-d799280c5725",
            "title": "default values",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "finalized should be false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values finalized should be false",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validators = await poaNetworkConsensus.getValidators.call();\nlet finalized = await poaNetworkConsensus.finalized.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony\n]);\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "7b5c89b6-355f-42d6-9037-e5bc3e5a9e55",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "checks systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values checks systemAddress",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let systemAddress = await poaNetworkConsensus.systemAddress.call();\nsystemAddress.should.be.equal('0xfffffffffffffffffffffffffffffffffffffffe');",
                "err": {},
                "isRoot": false,
                "uuid": "888925c0-eecc-4ff8-b662-63b3d52be28c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allows you to set current list of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values allows you to set current list of validators",
                "timedOut": false,
                "duration": 66,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorsList = [accounts[2], accounts[3], accounts[4]];\nlet poa = await PoaNetworkConsensus.new(masterOfCeremony, validatorsList).should.be.fulfilled;\nlet validators = await poa.getValidators.call();\nvalidators.should.be.deep.equal([\n  masterOfCeremony,\n  ...validatorsList\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "03c2ecbc-1791-44f3-b209-32703bb44318",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "validators in the list must differ",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] default values validators in the list must differ",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [masterOfCeremony, accounts[3], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[2], accounts[4]]\n).should.be.rejectedWith(ERROR_MSG);\nawait PoaNetworkConsensus.new(\n  masterOfCeremony,\n  [accounts[2], accounts[3], accounts[3]]\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "78131c22-1ea5-41a8-9d06-7ba3dc24e837",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "7b5c89b6-355f-42d6-9037-e5bc3e5a9e55",
              "888925c0-eecc-4ff8-b662-63b3d52be28c",
              "03c2ecbc-1791-44f3-b209-32703bb44318",
              "78131c22-1ea5-41a8-9d06-7ba3dc24e837"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 192,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "220772bc-0157-425f-8061-a759d3b870a3",
            "title": "#finalizeChange",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called by systemAddress",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should only be called by systemAddress",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.finalizeChange().should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dd80b323-38e8-4c88-8894-c1049f0a8949",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to true",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set finalized to true",
                "timedOut": false,
                "duration": 53,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nfinalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.true;",
                "err": {},
                "isRoot": false,
                "uuid": "672d99a1-777d-4ad7-af86-a9e7420bbf42",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set currentValidators to pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange should set currentValidators to pendingList",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setSystemAddress(accounts[0]);\nconst { logs } = await poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nlogs[0].event.should.be.equal('ChangeFinalized');\nlogs[0].args.newSet.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "f701ecd5-0a17-4455-b586-7da9d1cbb1bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "set currentValidators to pendingList after addValidator call",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #finalizeChange set currentValidators to pendingList after addValidator call",
                "timedOut": false,
                "duration": 231,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nlet pendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\ncurrentValidators.should.be.deep.equal(pendingList);\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call()\nconst expected = [masterOfCeremony, accounts[1], accounts[2]];\ncurrentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\ncurrentValidators = [];\npendingList = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nexpected.should.be.deep.equal(pendingList);\nexpected.should.be.deep.equal(currentValidators);",
                "err": {},
                "isRoot": false,
                "uuid": "79a476f1-b482-42ea-a101-488bb44747f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dd80b323-38e8-4c88-8894-c1049f0a8949",
              "672d99a1-777d-4ad7-af86-a9e7420bbf42",
              "f701ecd5-0a17-4455-b586-7da9d1cbb1bb",
              "79a476f1-b482-42ea-a101-488bb44747f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 406,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e7fbfa25-46db-4e55-b24b-874266948fe8",
            "title": "#addValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 60,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.addValidator(accounts[1], true, {from: accounts[2]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageMock.setKeysManagerMock(accounts[5]);\nawait addValidator(accounts[1], true, {from: accounts[5]});",
                "err": {},
                "isRoot": false,
                "uuid": "5050e5f4-30fa-4f43-8082-f4ffeed9bf10",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow to add already existing validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow to add already existing validator",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait addValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "a9a034b6-295a-4ba9-9f0d-1c8bf55e83b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not allow 0x0 addresses",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should not allow 0x0 addresses",
                "timedOut": false,
                "duration": 57,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator('0x0', false);\nawait addValidator('0x0000000000000000000000000000000000000000', false);",
                "err": {},
                "isRoot": false,
                "uuid": "ffc96430-17c6-49ad-84de-a75def37acb9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set validatorsState for new validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set validatorsState for new validator",
                "timedOut": false,
                "duration": 70,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nlet pendingList = await poaNetworkConsensus.getPendingList.call();\nstate[0].should.be.true;\nstate[2].should.be.bignumber.equal(pendingList.length - 1)",
                "err": {},
                "isRoot": false,
                "uuid": "b3560aed-c204-4c25-b898-a1d362713bac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should set finalized to false",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nlet finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "ed248335-dbd2-44d7-98d4-dc7bae82a166",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should emit InitiateChange with blockhash and pendingList as params",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #addValidator should emit InitiateChange with blockhash and pendingList as params",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nconst {logs} = await poaNetworkConsensus.addValidator(accounts[1], true).should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet currentValidators = [];\nfor (let i = 0; i < currentValidatorsLength.toNumber(10); i++) {\n  let validator = await poaNetworkConsensus.currentValidators.call(i);\n  currentValidators.push(validator);\n}\ncurrentValidators.push(accounts[1]);\nlogs[0].args['newSet'].should.deep.equal(currentValidators);  \nlogs[0].event.should.be.equal('InitiateChange');",
                "err": {},
                "isRoot": false,
                "uuid": "a081fc21-c403-42f5-a5b8-bbf1ab83e48e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5050e5f4-30fa-4f43-8082-f4ffeed9bf10",
              "a9a034b6-295a-4ba9-9f0d-1c8bf55e83b9",
              "ffc96430-17c6-49ad-84de-a75def37acb9",
              "b3560aed-c204-4c25-b898-a1d362713bac",
              "ed248335-dbd2-44d7-98d4-dc7bae82a166",
              "a081fc21-c403-42f5-a5b8-bbf1ab83e48e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 366,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fd5f2988-d621-4731-8e2c-fda3fc8f870e",
            "title": "#swapValidatorKey",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should swap validator key",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap validator key",
                "timedOut": false,
                "duration": 321,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);\n\nawait swapValidatorKey(accounts[2], accounts[3], false);\nawait swapValidatorKey(accounts[2], accounts[1], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(2);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "9c52ef55-ba61-4025-9ebb-1e2c94906fa2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should swap MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #swapValidatorKey should swap MoC",
                "timedOut": false,
                "duration": 210,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n\nawait swapValidatorKey(accounts[1], masterOfCeremony, true);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.isValidator.call(accounts[1])).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(accounts[1]);\n(await poaNetworkConsensus.masterOfCeremonyPending.call()).should.be.equal('0x0000000000000000000000000000000000000000');\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "c828de55-c123-4daf-b25e-90e5e877d380",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9c52ef55-ba61-4025-9ebb-1e2c94906fa2",
              "c828de55-c123-4daf-b25e-90e5e877d380"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 531,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8ab0c19a-0055-4d39-a530-2624ca132e71",
            "title": "#removeValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should remove validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove validator",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "eb641e61-81a1-4fb2-9735-e8242c4073f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should remove MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should remove MoC",
                "timedOut": false,
                "duration": 184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(1);\nawait removeValidator(masterOfCeremony, true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(false);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getCurrentValidatorsLength.call()).should.be.bignumber.equal(0);\n(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(false);\n(await poaNetworkConsensus.masterOfCeremony.call()).should.be.equal(masterOfCeremony);\n(await poaNetworkConsensus.isMasterOfCeremonyRemoved.call()).should.be.equal(true);\n(await poaNetworkConsensus.isMasterOfCeremonyRemovedPending.call()).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "a0f04245-7c4e-48ce-8009-c967f1adea6a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be called from keys manager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be called from keys manager",
                "timedOut": false,
                "duration": 86,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await removeValidator(accounts[1], false);\nawait proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);",
                "err": {},
                "isRoot": false,
                "uuid": "1f4030b4-e843-490f-aa8c-3a2567294305",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should only be allowed to remove from existing set of validators",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should only be allowed to remove from existing set of validators",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait removeValidator(accounts[1], false);",
                "err": {},
                "isRoot": false,
                "uuid": "03258252-d2ad-4ad5-9874-e4b8356f0477",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease length of pendingList",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should decrease length of pendingList",
                "timedOut": false,
                "duration": 199,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait addValidator(accounts[2], true);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nlet currentValidatorsLength = await poaNetworkConsensus.getCurrentValidatorsLength.call();\nlet pendingList = [];\nfor(let i = 0; i < currentValidatorsLength; i++){\n  let pending = await poaNetworkConsensus.pendingList.call(i);\n  pendingList.push(pending);\n}\nconst indexOfRemovedElement = pendingList.indexOf(accounts[1]);\npendingList.splice(indexOfRemovedElement, 1);\nconst { logs } = await poaNetworkConsensus.removeValidator(accounts[1],true).should.be.fulfilled;\nlet pendingListFromContract = logs[0].args['newSet'];\npendingListFromContract.length.should.be.equal(currentValidatorsLength.toNumber(10) - 1);\npendingList.should.be.deep.equal(pendingListFromContract);\nlogs[0].event.should.be.equal('InitiateChange');\nconst expected = [masterOfCeremony, accounts[2]];\nexpected.should.be.deep.equal(pendingList);",
                "err": {},
                "isRoot": false,
                "uuid": "8cb65beb-7fc3-4fb9-8fd7-dc1a9dcddacb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change validatorsState",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should change validatorsState",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst state = await poaNetworkConsensus.validatorsState.call(accounts[1]);\nstate[0].should.be.false;\nstate[2].should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "93a0bb3e-6cc7-4854-9df8-0d2df4064b3f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should set finalized to false",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #removeValidator should set finalized to false",
                "timedOut": false,
                "duration": 87,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setKeysManagerMock(accounts[0]);\nawait addValidator(accounts[1], true);\nawait removeValidator(accounts[1], true);\nconst finalized = await poaNetworkConsensus.finalized.call();\nfinalized.should.be.false;",
                "err": {},
                "isRoot": false,
                "uuid": "4ddc9854-84a5-4713-992b-d5128cc7ae02",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "eb641e61-81a1-4fb2-9735-e8242c4073f3",
              "a0f04245-7c4e-48ce-8009-c967f1adea6a",
              "1f4030b4-e843-490f-aa8c-3a2567294305",
              "03258252-d2ad-4ad5-9874-e4b8356f0477",
              "8cb65beb-7fc3-4fb9-8fd7-dc1a9dcddacb",
              "93a0bb3e-6cc7-4854-9df8-0d2df4064b3f",
              "4ddc9854-84a5-4713-992b-d5128cc7ae02"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 736,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e36745da-3f15-4d13-a8a1-e99df44a1d80",
            "title": "#setProxyStorage",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "can be called by MoC",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by MoC",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: masterOfCeremony}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "5c3b54bc-41f4-4705-b4cd-88d8ee43c9c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called by owner",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can be called by owner",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait poaNetworkConsensus.setProxyStorage(accounts[5], {from: accounts[0]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "cbe1ff22-bcf1-49b3-8dd9-734d25cdf58a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can only be called once",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage can only be called once",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// we already call it in the beforeEach block, hence why I expect it to be rejected\nawait poaNetworkConsensus.setProxyStorage(nonOwner, {from: nonOwner}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "35792233-99da-4edd-ba0e-c9050d542cb2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage('0x0000000000000000000000000000000000000000', {from: masterOfCeremony}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4f9549c5-2ed5-4d8e-882a-e0103c1e4e12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets proxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets proxyStorage",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.proxyStorage.call()).should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "87b57802-3178-4176-bb84-9f08c8f17946",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets wasProxyStorageSet",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage sets wasProxyStorageSet",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\n(await poaNetworkConsensus.wasProxyStorageSet.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "06e03617-7385-4cec-8b5c-db0af01cc843",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "emits MoCInitializedProxyStorage",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage emits MoCInitializedProxyStorage",
                "timedOut": false,
                "duration": 29,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newProxyStorage = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nconst {logs} = await poaNetworkConsensus.setProxyStorage(newProxyStorage, {from: masterOfCeremony}).should.be.fulfilled;\nlogs[0].event.should.be.equal('MoCInitializedProxyStorage');\nlogs[0].args.proxyStorage.should.be.equal(newProxyStorage);",
                "err": {},
                "isRoot": false,
                "uuid": "da4bddf2-ec9a-4ca2-8e17-4370a5366028",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "#getKeysManager",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #setProxyStorage #getKeysManager",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newKeysManager = accounts[3];\nawait poaNetworkConsensus.setWasProxyStorageSetMock(false);\nawait proxyStorageMock.setKeysManagerMock(newKeysManager);\n(await poaNetworkConsensus.getKeysManager.call()).should.be.equal(newKeysManager);",
                "err": {},
                "isRoot": false,
                "uuid": "ba361566-0d43-48f6-b23f-f515b1b192e9",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5c3b54bc-41f4-4705-b4cd-88d8ee43c9c6",
              "cbe1ff22-bcf1-49b3-8dd9-734d25cdf58a",
              "35792233-99da-4edd-ba0e-c9050d542cb2",
              "4f9549c5-2ed5-4d8e-882a-e0103c1e4e12",
              "87b57802-3178-4176-bb84-9f08c8f17946",
              "06e03617-7385-4cec-8b5c-db0af01cc843",
              "da4bddf2-ec9a-4ca2-8e17-4370a5366028",
              "ba361566-0d43-48f6-b23f-f515b1b192e9"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 362,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ca3653cd-8d77-4698-9976-9827d8cef330",
            "title": "#isValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidator returns true for validator",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidator.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.isValidator.call(accounts[2])).should.be.equal(false);",
                "err": {},
                "isRoot": false,
                "uuid": "3230d2cc-e9be-4efa-9d26-6233f47ae178",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3230d2cc-e9be-4efa-9d26-6233f47ae178"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 23,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "35708852-6aeb-46e5-9076-7152ef8533d1",
            "title": "#isValidatorFinalized",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/poa_network_consensus_test.js",
            "file": "/test/poa_network_consensus_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "returns true for finalized validator",
                "fullTitle": "Contract: PoaNetworkConsensus [all features] #isValidatorFinalized returns true for finalized validator",
                "timedOut": false,
                "duration": 1205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.setSystemAddress(accounts[0]);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.finalized.call()).should.be.true;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nfor (let i = 1; i <= 4; i++) {\n  await addValidator(accounts[i], true);\n}\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(false);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(false);\n}\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n\nfor (let i = 1; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[1], accounts[2], accounts[3], accounts[4]\n]);\nawait swapValidatorKey(accounts[5], accounts[1], true);\n(await poaNetworkConsensus.getValidators.call()).should.not.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 4; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal(\n  await poaNetworkConsensus.getPendingList.call()\n);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\nfor (let i = 2; i <= 5; i++) {\n  (await poaNetworkConsensus.isValidatorFinalized.call(accounts[i])).should.be.equal(true);\n  (await poaNetworkConsensus.validatorsState.call(accounts[i]))[1].should.be.equal(true);\n}\nawait removeValidator(accounts[1], false);\nawait removeValidator(accounts[3], true);\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensus.isValidatorFinalized.call(masterOfCeremony)).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(masterOfCeremony))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[1])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[1]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[2])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[2]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[3])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[3]))[1].should.be.equal(false);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[4])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[4]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[5])).should.be.equal(true);\n(await poaNetworkConsensus.validatorsState.call(accounts[5]))[1].should.be.equal(true);\n(await poaNetworkConsensus.isValidatorFinalized.call(accounts[6])).should.be.equal(false);\n(await poaNetworkConsensus.validatorsState.call(accounts[6]))[1].should.be.equal(false);\n(await poaNetworkConsensus.getValidators.call()).should.be.deep.equal([\n  masterOfCeremony, accounts[4], accounts[2], accounts[5]\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "29a2dc22-49a2-413b-8a43-f1cda75143b4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "29a2dc22-49a2-413b-8a43-f1cda75143b4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1205,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "503156f5-51ba-4d56-ae1c-b20fd068183a",
        "title": "Contract: ProxyStorage [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
        "file": "/test/proxy_storage_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 971,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "498c0013-cc67-44a0-893b-9a3b1d3f55a3",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9610cfd3-8d6e-421e-9848-61982f18b68e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 749,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "97508d36-b903-4113-afc3-2d81390972d7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "f732c409-21f2-42ff-9f38-5d043e65e9a8",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "883e9f37-5157-48ad-aea1-6823249fc6b9",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "98f4f7e7-0b28-4094-8a6f-f4af838c6300",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "98f4f7e7-0b28-4094-8a6f-f4af838c6300"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e1391777-27ef-4866-975c-43b75898dde3",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "cb2f02ed-5d70-413d-a624-7e8c8664f46e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f86e167d-9e6f-4929-84c2-fcd7ccaf7edf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "cb2f02ed-5d70-413d-a624-7e8c8664f46e",
              "f86e167d-9e6f-4929-84c2-fcd7ccaf7edf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 191,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "69920d96-0fb4-45d5-a89b-9f3e24fbf05e",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 36,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fd567fdc-a4d1-46c1-9208-ba7172e1bf77",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "17ee752f-abe4-428d-879b-d916e0531edb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "fd860429-afad-4a66-8031-13f508129c53",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "19e868d0-399b-47ab-9072-005cd5386b98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 125,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "3b1e3e34-fec8-427a-83f8-55748c49e2d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "2936d1cb-e5e3-4b0f-a3be-769406e7d218",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 109,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "7051b6db-ec21-4bc9-b378-f47b994a3c6c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "148dae68-0390-4be3-a26e-e01469d9a4b2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 121,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5b5db5d6-6c2a-4985-af42-fc4d2961eb36",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "50dda126-9200-4637-835d-086c8f060458",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets rewardByBlock",
                "fullTitle": "Contract: ProxyStorage [all features] #setContractAddress sets rewardByBlock",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlock.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(9, rewardByBlockNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nconst eternalProxyAddress = await proxyStorage.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nrewardByBlockNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "4891809b-cd41-4203-9997-8b8fe9d9efaa",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "17ee752f-abe4-428d-879b-d916e0531edb",
              "fd860429-afad-4a66-8031-13f508129c53",
              "19e868d0-399b-47ab-9072-005cd5386b98",
              "3b1e3e34-fec8-427a-83f8-55748c49e2d5",
              "2936d1cb-e5e3-4b0f-a3be-769406e7d218",
              "7051b6db-ec21-4bc9-b378-f47b994a3c6c",
              "148dae68-0390-4be3-a26e-e01469d9a4b2",
              "5b5db5d6-6c2a-4985-af42-fc4d2961eb36",
              "50dda126-9200-4637-835d-086c8f060458",
              "4891809b-cd41-4203-9997-8b8fe9d9efaa"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1015,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "646630f9-0b1a-46f4-9224-d0255bf92c2b",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_test.js",
            "file": "/test/proxy_storage_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage (itself)",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo may only be called by ProxyStorage (itself)",
                "timedOut": false,
                "duration": 176,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nawait proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "e1951f61-3f55-465c-9abc-63a1cc4ada87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 102,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.implementation.call()).should.be.equal(\n  proxyStorageNew.address\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a62d8c6d-ce69-4421-8edf-52a558beaffb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 100,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nconst oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\n(await proxyStorageEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "c227b625-07ad-4971-92eb-9a53fb60aca3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 123,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.initialized.call()).should.be.equal(false);\nawait proxyStorageNew.initialize();\n(await proxyStorageNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "1386db1b-9153-4aec-b951-ad88fef549c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: ProxyStorage [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[0]);\nawait upgradeTo(proxyStorageNew.address, {from: accounts[0]});\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorageNew = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\n(await proxyStorageNew.getPoaConsensus.call()).should.be.equal(poaNetworkConsensus.address);",
                "err": {},
                "isRoot": false,
                "uuid": "b5dfc87c-657a-4212-8310-ca297b9ce2f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e1951f61-3f55-465c-9abc-63a1cc4ada87",
              "a62d8c6d-ce69-4421-8edf-52a558beaffb",
              "c227b625-07ad-4971-92eb-9a53fb60aca3",
              "1386db1b-9153-4aec-b951-ad88fef549c6",
              "b5dfc87c-657a-4212-8310-ca297b9ce2f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 589,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8edc8ee8-afe9-4739-82c8-3c197e4e09d8",
        "title": "Contract: ProxyStorage upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
        "file": "/test/proxy_storage_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1248,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "9be779b8-e4fa-4847-8680-8f9bc3b0f6c6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 3,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "55c23408-4d1c-4200-86df-a85f43648c1d",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 759,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "masterOfCeremony = accounts[0];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\n(await proxyStorageEternalStorage.getProxyStorage.call()).should.be.equal(\n  proxyStorageEternalStorage.address\n);\nconst proxyStorageNew = await ProxyStorageNew.new();\nawait proxyStorageEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await proxyStorageEternalStorage.upgradeTo(proxyStorageNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait proxyStorageEternalStorage.setProxyStorage(proxyStorageEternalStorage.address);\nproxyStorage = await ProxyStorageNew.at(proxyStorageEternalStorage.address);\nkeysManager = await KeysManager.new();\nkeysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nvalidatorMetadata = await ValidatorMetadata.new();\nvalidatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\n\nballotsStorage = await BallotsStorage.new();\nballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nvotingToChangeKeys = await VotingToChangeKeys.new();\nvotingToChangeKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeKeys.address);\nvotingToChangeMinThreshold = await VotingToChangeMinThreshold.new();\nvotingToChangeMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeMinThreshold.address);\nvotingToChangeProxy = await VotingToChangeProxy.new();\nvotingToChangeProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToChangeProxy.address);\nvotingToManageEmissionFunds = await VotingToManageEmissionFunds.new();\nvotingToManageEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingToManageEmissionFunds.address);\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);",
            "err": {},
            "isRoot": false,
            "uuid": "83c1f0a2-0a16-4253-8c25-d74d6aba69c7",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: ProxyStorage upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cffdac01-e413-4ae1-b9bf-077123a6185e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "f36c6657-a88b-4222-8a59-a4301beb5695",
            "title": "#constructor",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets PoA",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #constructor sets PoA",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "poaNetworkConsensus.address.should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9b453622-edc5-4776-8b63-c2322ba75f13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b453622-edc5-4776-8b63-c2322ba75f13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "858cf045-18fd-4e36-a5be-2858c882ec87",
            "title": "#initializeAddresses",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "sets all addresses",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses sets all addresses",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\nkeysManagerEternalStorage.address.should.be.equal(\n  await proxyStorage.getKeysManager.call()\n);\nvotingToChangeKeysEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeKeys.call()\n);\nvotingToChangeMinThresholdEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeMinThreshold.call()\n);\nvotingToChangeProxyEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToChangeProxy.call()\n);\nvotingToManageEmissionFundsEternalStorage.address.should.be.equal(\n  await proxyStorage.getVotingToManageEmissionFunds.call()\n);\nballotsEternalStorage.address.should.be.equal(\n  await proxyStorage.getBallotsStorage.call()\n);\nvalidatorMetadataEternalStorage.address.should.be.equal(\n  await proxyStorage.getValidatorMetadata.call()\n);\nrewardByBlockEternalStorage.address.should.be.equal(\n  await proxyStorage.getRewardByBlock.call()\n);\nlogs[0].event.should.be.equal('ProxyInitialized');\nlogs[0].args.keysManagerEternalStorage.should.be.equal(keysManagerEternalStorage.address);\nlogs[0].args.votingToChangeKeysEternalStorage.should.be.equal(votingToChangeKeysEternalStorage.address);\nlogs[0].args.votingToChangeMinThresholdEternalStorage.should.be.equal(votingToChangeMinThresholdEternalStorage.address);\nlogs[0].args.votingToChangeProxyEternalStorage.should.be.equal(votingToChangeProxyEternalStorage.address);\nlogs[0].args.votingToManageEmissionFundsEternalStorage.should.be.equal(votingToManageEmissionFundsEternalStorage.address);\nlogs[0].args.ballotsStorageEternalStorage.should.be.equal(ballotsEternalStorage.address);\nlogs[0].args.validatorMetadataEternalStorage.should.be.equal(validatorMetadataEternalStorage.address);\nlogs[0].args.rewardByBlockEternalStorage.should.be.equal(rewardByBlockEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "d14f3e56-45a9-424a-a93f-07ae96f574df",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents Moc to call it more than once",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #initializeAddresses prevents Moc to call it more than once",
                "timedOut": false,
                "duration": 67,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "false.should.be.equal(await proxyStorage.mocInitialized.call());\nconst {logs} = await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.fulfilled;\ntrue.should.be.equal(await proxyStorage.mocInitialized.call());\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "27e90210-9493-481b-b358-33664de3922d",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d14f3e56-45a9-424a-a93f-07ae96f574df",
              "27e90210-9493-481b-b358-33664de3922d"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 209,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "fb4175fe-0b89-4ed5-b2a9-9e687fcc1917",
            "title": "#setContractAddress",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/proxy_storage_upgrade_test.js",
            "file": "/test/proxy_storage_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress \"before each\" hook",
                "timedOut": false,
                "duration": 38,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeysEternalStorage.address,\n  votingToChangeMinThresholdEternalStorage.address,\n  votingToChangeProxyEternalStorage.address,\n  votingToManageEmissionFundsEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address,\n  {from: masterOfCeremony}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d0153bb2-f216-421d-853e-085a3daca3a6",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "can only be called from votingToChangeProxy address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress can only be called from votingToChangeProxy address",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setContractAddress(1, accounts[2], {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, accounts[2], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "fdd63f35-6d21-475b-a5be-6195669be31e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be set to 0x0 address",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress cannot be set to 0x0 address",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, '0x0000000000000000000000000000000000000000', false, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "c4db4ff1-dd5c-4b9c-b8b4-c3fdb43e3674",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets keysManager",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets keysManager",
                "timedOut": false,
                "duration": 116,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let keysManagerNew = await KeysManager.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(1, keysManagerNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nkeysManagerNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "82ba8fdc-39a3-4144-b958-689fce33e2c3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeKeys",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeKeys",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeKeysNew = await VotingToChangeKeys.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(2, votingToChangeKeysNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeKeysNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "95c9712f-af43-4cc9-8505-a2db15a8a3c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets votingToChangeMinThreshold",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets votingToChangeMinThreshold",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingToChangeMinThresholdNew = await VotingToChangeMinThreshold.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(3, votingToChangeMinThresholdNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvotingToChangeMinThresholdNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "ffe33a56-bedb-4596-9993-1ff3478be53f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets ballotsStorage",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets ballotsStorage",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let ballotsStorageNew = await BallotsStorage.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(5, ballotsStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nballotsStorageNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8f6328db-d993-4be7-b8c9-dffa17624e20",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets poaConsensus",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets poaConsensus",
                "timedOut": false,
                "duration": 69,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(6, accounts[5], true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\naccounts[5].should.be.equal(\n  await proxyStorage.getPoaConsensus.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "c4386384-4308-4966-ab12-5bf58127456d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets validatorMetadata",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets validatorMetadata",
                "timedOut": false,
                "duration": 124,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let validatorMetadataNew = await ValidatorMetadata.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(7, validatorMetadataNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nlet eternalProxyAddress = await proxyStorage.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nvalidatorMetadataNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "a5df7d67-9517-4a33-8afd-3410f9ff47a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "changes proxyStorage (itself) implementation",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress changes proxyStorage (itself) implementation",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const oldVersion = await proxyStorageEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nlet proxyStorageNew = await ProxyStorageMock.new();\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(8, proxyStorageNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nproxyStorageNew.address.should.be.equal(\n  await proxyStorageEternalStorage.implementation.call()\n);\nnewVersion.should.be.bignumber.equal(\n  await proxyStorageEternalStorage.version.call()\n);",
                "err": {},
                "isRoot": false,
                "uuid": "32bad5d0-3c16-4a96-bc4a-f9a747e3db5b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "sets rewardByBlock",
                "fullTitle": "Contract: ProxyStorage upgraded [all features] #setContractAddress sets rewardByBlock",
                "timedOut": false,
                "duration": 188,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlock.new();\n\nawait proxyStorage.setVotingToChangeProxyMock(accounts[4]);\nawait setContractAddress(9, rewardByBlockNew.address, true, {from: accounts[4]});\nawait proxyStorage.setVotingToChangeProxyMock(votingToChangeProxyEternalStorage.address);\n\nconst eternalProxyAddress = await proxyStorage.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nrewardByBlockNew.address.should.be.equal(\n  await eternalProxy.implementation.call()\n)",
                "err": {},
                "isRoot": false,
                "uuid": "e5be986c-66a8-47e8-8ad4-e56a867f8e7e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fdd63f35-6d21-475b-a5be-6195669be31e",
              "c4db4ff1-dd5c-4b9c-b8b4-c3fdb43e3674",
              "82ba8fdc-39a3-4144-b958-689fce33e2c3",
              "95c9712f-af43-4cc9-8505-a2db15a8a3c6",
              "ffe33a56-bedb-4596-9993-1ff3478be53f",
              "8f6328db-d993-4be7-b8c9-dffa17624e20",
              "c4386384-4308-4966-ab12-5bf58127456d",
              "a5df7d67-9517-4a33-8afd-3410f9ff47a9",
              "32bad5d0-3c16-4a96-bc4a-f9a747e3db5b",
              "e5be986c-66a8-47e8-8ad4-e56a867f8e7e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1106,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "500f951b-07aa-44bf-9fb5-8559c9fcaafc",
        "title": "Contract: RewardByBlock [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
        "file": "/test/reward_by_block_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 849,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "e36176ed-9810-4634-a37f-7ac471b09086",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "11ef9e4c-22a5-4f36-a3b0-6838f5eb6e54",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 742,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockOldImplementation = rewardByBlock.address;\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "4fe029b1-b678-45a8-872c-8b0b04cc66ad",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "af64a38b-293e-4cbc-a382-3f3e54e4e676",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "fb1aaa16-469a-4bf8-b633-b6ff318a89e8",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 166,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "40a71578-c5c7-48d7-9bbd-9b9b65e68beb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "79942857-9dc1-441f-89d6-5b469a0e80a0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "dfe4a4b7-db8e-4ac1-9a9a-f97a33301091",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "206860e3-6fe7-45a5-a799-3ab8813d6758",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 832,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "f966a0fd-13c8-4685-b9dc-2ba7595c7963",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 106,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "cf8f134b-58c7-4b1d-b3af-0825366f8ea1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1175,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "895cbb09-e6b6-47a8-b058-0b60c0cbf2ea",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "40a71578-c5c7-48d7-9bbd-9b9b65e68beb",
              "79942857-9dc1-441f-89d6-5b469a0e80a0",
              "dfe4a4b7-db8e-4ac1-9a9a-f97a33301091",
              "206860e3-6fe7-45a5-a799-3ab8813d6758",
              "f966a0fd-13c8-4685-b9dc-2ba7595c7963",
              "cf8f134b-58c7-4b1d-b3af-0825366f8ea1",
              "895cbb09-e6b6-47a8-b058-0b60c0cbf2ea"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2381,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "71ae388f-c65d-4144-b2b0-c1a63b448a01",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "3ecfcfaf-f0dd-49f8-8388-daef2b145404",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "61a61185-4a0e-4730-a06a-3b58ec22f616",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 20,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "704a750f-8afd-46c4-85ae-00a1289dc47f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 295,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "570ba7b8-789c-4897-bd04-7225be2a5a83",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "d155393c-d480-4821-a1d3-0353839f2c9e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3ecfcfaf-f0dd-49f8-8388-daef2b145404",
              "61a61185-4a0e-4730-a06a-3b58ec22f616",
              "704a750f-8afd-46c4-85ae-00a1289dc47f",
              "570ba7b8-789c-4897-bd04-7225be2a5a83",
              "d155393c-d480-4821-a1d3-0353839f2c9e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 531,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "68bde896-ef7e-4156-ade9-77581684a0ff",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_test.js",
            "file": "/test/reward_by_block_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "c280fa89-16d6-464f-8e04-16a05f22933d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst newImplementation = rewardByBlockNew.address;\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(rewardByBlockOldImplementation);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "e45c4348-606c-4d13-a471-2cb9ce595362",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nconst oldVersion = await rewardByBlockEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByBlockEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "2c4b7492-a42b-46bf-bff2-06493c781017",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 114,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.initialized.call()).should.be.equal(false);\nawait rewardByBlockNew.initialize();\n(await rewardByBlockNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "a59726da-18e7-4182-bc7f-1ce7a8a33a13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByBlock [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 90,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByBlockNew.address, {from: proxyStorageStubAddress});\nrewardByBlockNew = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\n(await rewardByBlockNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "e590a96e-06b6-498f-b92e-a23bb1d60880",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "c280fa89-16d6-464f-8e04-16a05f22933d",
              "e45c4348-606c-4d13-a471-2cb9ce595362",
              "2c4b7492-a42b-46bf-bff2-06493c781017",
              "a59726da-18e7-4182-bc7f-1ce7a8a33a13",
              "e590a96e-06b6-498f-b92e-a23bb1d60880"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 486,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "0cbbcf8a-9c1e-4a19-9b13-0981aaf59a7b",
        "title": "Contract: RewardByBlock upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
        "file": "/test/reward_by_block_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 947,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a93d7739-e805-47ad-8e7d-9143a63319b6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "cc6946bf-1bd7-4de4-a820-ab534bde5e4e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 847,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByBlock = await RewardByBlock.new();\nrewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nconst rewardByBlockNew = await RewardByBlockNew.new();\nawait rewardByBlockEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByBlockEternalStorage.upgradeTo(rewardByBlockNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByBlockEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByBlock = await RewardByBlockNew.at(rewardByBlockEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';",
            "err": {},
            "isRoot": false,
            "uuid": "fcb75f83-5e44-49fc-8e8b-0d12f161ee8f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByBlock upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e36b7c9d-6235-43eb-a32b-480b14abd5e6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "7cd806b0-75a5-40b7-a7e1-7beadf7b2433",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.reward([miningKey], [0]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward([miningKey], [0], {from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "e3604832-7c71-4158-b8ca-e943e024bd3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if input array contains more than one item",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if input array contains more than one item",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey, miningKey2],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4819af0d-1ceb-43bc-95cc-365790c726ca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if lengths of input arrays are not equal",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if lengths of input arrays are not equal",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [0, 0],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "bc8cbd98-68a0-434b-9fa9-8ea4e58792ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if `kind` parameter is not 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should revert if `kind` parameter is not 0",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.setSystemAddress(systemAddress);\nawait rewardByBlock.reward(\n  [miningKey],\n  [1],\n  {from: systemAddress}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2d3610d5-a1c3-49c2-9de0-99c1f142d4b8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout key and EmissionFunds",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to payout key and EmissionFunds",
                "timedOut": false,
                "duration": 842,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\nconst totalMinted = web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount);\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(totalMinted);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(totalMinted);",
                "err": {},
                "isRoot": false,
                "uuid": "1804d807-98d8-4c8a-aa30-e34d7a028267",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign reward to mining key if payout key is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign reward to mining key if payout key is 0",
                "timedOut": false,
                "duration": 111,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const result = await keysManager.removePayoutKey(\n  miningKey,\n  {from: votingToChangeKeys}\n);\nresult.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst {logs} = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nlogs[0].event.should.be.equal('Rewarded');\nlogs[0].args.receivers.should.be.deep.equal([miningKey, emissionFundsAddress]);\nlogs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nlogs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());",
                "err": {},
                "isRoot": false,
                "uuid": "95cdc1ca-c4fc-471a-b2ab-ca180b20b6f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to extra receivers and clear extra receivers list",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #reward should assign rewards to extra receivers and clear extra receivers list",
                "timedOut": false,
                "duration": 1200,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.setSystemAddress(systemAddress);\nlet result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(5);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\nresult = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[2], accounts[3]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('2');\nresult.logs[0].args.rewards[3].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[1])).should.be.bignumber.equal(10);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedTotallyByBridge.call(accounts[3])).should.be.bignumber.equal(0);\n(await rewardByBlock.mintedForAccount.call(payoutKey)).should.be.bignumber.equal(blockRewardAmount * 2);\n(await rewardByBlock.mintedForAccount.call(emissionFundsAddress)).should.be.bignumber.equal(emissionFundsAmount * 2);\n(await rewardByBlock.mintedForAccount.call(accounts[2])).should.be.bignumber.equal(4);\n(await rewardByBlock.mintedForAccount.call(accounts[3])).should.be.bignumber.equal(6);\n\n(await rewardByBlock.mintedForAccountInBlock.call(payoutKey, web3.eth.blockNumber)).should.be.bignumber.equal(blockRewardAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(emissionFundsAddress, web3.eth.blockNumber)).should.be.bignumber.equal(emissionFundsAmount);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[2], web3.eth.blockNumber)).should.be.bignumber.equal(2);\n(await rewardByBlock.mintedForAccountInBlock.call(accounts[3], web3.eth.blockNumber)).should.be.bignumber.equal(3);\n\n(await rewardByBlock.mintedInBlock.call(web3.eth.blockNumber)).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3)\n);\n(await rewardByBlock.mintedTotally.call()).should.be.bignumber.equal(\n  web3.toBigNumber(blockRewardAmount).plus(emissionFundsAmount).plus(2).plus(3).mul(2)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "9e60af32-2c8d-4611-bbe0-0883dcb0ec80",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e3604832-7c71-4158-b8ca-e943e024bd3b",
              "4819af0d-1ceb-43bc-95cc-365790c726ca",
              "bc8cbd98-68a0-434b-9fa9-8ea4e58792ed",
              "2d3610d5-a1c3-49c2-9de0-99c1f142d4b8",
              "1804d807-98d8-4c8a-aa30-e34d7a028267",
              "95cdc1ca-c4fc-471a-b2ab-ca180b20b6f7",
              "9e60af32-2c8d-4611-bbe0-0883dcb0ec80"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2331,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "04dacf0a-9923-4c53-9956-75355924e423",
            "title": "#addExtraReceiver",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_block_upgrade_test.js",
            "file": "/test/reward_by_block_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by bridge contract",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver may only be called by bridge contract",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(1, accounts[1]).should.be.rejectedWith(ERROR_MSG);\nawait rewardByBlock.addExtraReceiver(1, accounts[1], {from: accounts[2]}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "78822b2b-e7dc-422f-816a-6b98cc3b322a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if receiver address is 0x0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if receiver address is 0x0",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  1,\n  '0x0000000000000000000000000000000000000000',\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "98735218-fc3f-4fcc-a15d-527b8d6f8d32",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should revert if amount is 0",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should revert if amount is 0",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByBlock.addExtraReceiver(\n  0,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "eaf3d03b-2eef-4042-9dc0-6c91eac6cef8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can be called repeatedly for the same recipient",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver can be called repeatedly for the same recipient",
                "timedOut": false,
                "duration": 310,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);\nawait rewardByBlock.addExtraReceiver(\n  1,\n  accounts[1],\n  {from: accounts[2]}\n).should.be.fulfilled;\nawait rewardByBlock.addExtraReceiver(\n  2,\n  accounts[1],\n  {from: accounts[3]}\n).should.be.fulfilled;\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[1]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(3);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(1);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(2);\nawait rewardByBlock.setSystemAddress(systemAddress);\nconst result = await rewardByBlock.reward(\n  [miningKey],\n  [0],\n  {from: systemAddress}\n).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress, accounts[1]]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal('3');\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiverAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[1])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.bridgeAmount.call(accounts[3])).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "db935397-7d21-420c-bf51-9f060c75bafc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should add receivers",
                "fullTitle": "Contract: RewardByBlock upgraded [all features] #addExtraReceiver should add receivers",
                "timedOut": false,
                "duration": 170,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(0);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(0);\nlet result = await rewardByBlock.addExtraReceiver(2, accounts[2], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(1);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[2]);\nresult.logs[0].args.amount.should.be.bignumber.equal(2);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);\nresult = await rewardByBlock.addExtraReceiver(3, accounts[3], {from: accounts[1]}).should.be.fulfilled;\n(await rewardByBlock.extraReceiverByIndex.call(0)).should.be.equal(accounts[2]);\n(await rewardByBlock.extraReceiverByIndex.call(1)).should.be.equal(accounts[3]);\n(await rewardByBlock.extraReceiverAmount.call(accounts[2])).should.be.bignumber.equal(2);\n(await rewardByBlock.extraReceiverAmount.call(accounts[3])).should.be.bignumber.equal(3);\n(await rewardByBlock.extraReceiversLength.call()).should.be.bignumber.equal(2);\nresult.logs[0].event.should.be.equal('AddedReceiver');\nresult.logs[0].args.receiver.should.be.equal(accounts[3]);\nresult.logs[0].args.amount.should.be.bignumber.equal(3);\nresult.logs[0].args.bridge.should.be.equal(accounts[1]);",
                "err": {},
                "isRoot": false,
                "uuid": "30a4f937-4570-4b10-8527-8d5b19c483b6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78822b2b-e7dc-422f-816a-6b98cc3b322a",
              "98735218-fc3f-4fcc-a15d-527b8d6f8d32",
              "eaf3d03b-2eef-4042-9dc0-6c91eac6cef8",
              "db935397-7d21-420c-bf51-9f060c75bafc",
              "30a4f937-4570-4b10-8527-8d5b19c483b6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 559,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8e8732b9-f9c3-4b67-a710-4c915f4b3ec5",
        "title": "Contract: RewardByTime [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
        "file": "/test/reward_by_time_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 1058,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "5eb3a309-ebef-40d8-8b97-7eae1fa21447",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "fa73a588-c513-45f8-8032-d5aced9f76f6",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 750,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeOldImplementation = rewardByTime.address;\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "4f300f29-d841-40f9-ade0-09cd81aa73d0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d2e4f46e-babc-405c-8901-3ac1c1082e2e",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "58722fd5-590b-44ef-9ff6-4cd3c6c1df4c",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "71abc9e8-c546-4001-998b-41d9d8275e99",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 3058,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "d964db38-196e-4533-8019-bd9ecc421cb4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1322,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n\nconst miningKey4 = '0x0000000000000000000000000000000000000001';\nawait addMiningKey(miningKey4);\nawait addPayoutKey(payoutKey2, miningKey4);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "c1f3c334-72fb-47f1-940d-de272687ce86",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "71abc9e8-c546-4001-998b-41d9d8275e99",
              "d964db38-196e-4533-8019-bd9ecc421cb4",
              "c1f3c334-72fb-47f1-940d-de272687ce86"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 4495,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "1ecadb86-a08e-453f-8096-caee2330d99a",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_test.js",
            "file": "/test/reward_by_time_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "0334ec9a-d9b3-4ce4-8404-3f5992dfbbbe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst newImplementation = rewardByTimeNew.address;\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(rewardByTimeOldImplementation);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "8b403fad-f795-4fa1-9e3f-46f0ad5b9cb0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nconst oldVersion = await rewardByTimeEternalStorage.version.call();\nconst newVersion = oldVersion.add(1);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\n(await rewardByTimeEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "be5a173d-f809-4227-8e37-84609fecc8f8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 118,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.initialized.call()).should.be.equal(false);\nawait rewardByTimeNew.initialize();\n(await rewardByTimeNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "2fa2bbf0-e693-4f20-bdcf-b4fce7b28f8d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: RewardByTime [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 95,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorageStubAddress);\nawait upgradeTo(rewardByTimeNew.address, {from: proxyStorageStubAddress});\nrewardByTimeNew = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\n(await rewardByTimeNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "5339c45e-a05e-4c37-aa97-3b5668de40cc",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0334ec9a-d9b3-4ce4-8404-3f5992dfbbbe",
              "8b403fad-f795-4fa1-9e3f-46f0ad5b9cb0",
              "be5a173d-f809-4227-8e37-84609fecc8f8",
              "2fa2bbf0-e693-4f20-bdcf-b4fce7b28f8d",
              "5339c45e-a05e-4c37-aa97-3b5668de40cc"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 487,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "2c62a03e-e018-46f3-9c7a-f0da98ab0cec",
        "title": "Contract: RewardByTime upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
        "file": "/test/reward_by_time_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 871,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "35f2267b-d67d-482e-9736-f5008d0256b8",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c3120f48-aa19-46ba-864b-f9eca65cf779",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 851,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nminingKey = accounts[1];\nminingKey2 = accounts[2];\nminingKey3 = accounts[3];\npayoutKey = accounts[4];\npayoutKey2 = accounts[5];\npayoutKey3 = accounts[6];\nsystemAddress = accounts[7];\nvotingToChangeKeys = accounts[9];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingToChangeKeys,\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  accounts[9],\n  validatorMetadataEternalStorage.address,\n  accounts[9]\n);\nawait addMiningKey(miningKey);\nawait addMiningKey(miningKey2);\nawait addMiningKey(miningKey3);\nawait addPayoutKey(payoutKey, miningKey);\nawait addPayoutKey(payoutKey2, miningKey2);\nawait addPayoutKey(payoutKey3, miningKey3);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nrewardByTime = await RewardByTime.new();\nrewardByTimeEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByTime.address);\nrewardByTime = await RewardByTime.at(rewardByTimeEternalStorage.address);\nconst rewardByTimeNew = await RewardByTimeNew.new();\nawait rewardByTimeEternalStorage.setProxyStorage(accounts[8]);\nconst {logs} = await rewardByTimeEternalStorage.upgradeTo(rewardByTimeNew.address, {from: accounts[8]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait rewardByTimeEternalStorage.setProxyStorage(proxyStorage.address);\nrewardByTime = await RewardByTimeNew.at(rewardByTimeEternalStorage.address);\nblockRewardAmount = web3.toWei(1, 'ether');\nemissionFundsAmount = web3.toWei(1, 'ether');\nemissionFundsAddress = '0x0000000000000000000000000000000000000000';\nthreshold = 5;",
            "err": {},
            "isRoot": false,
            "uuid": "22036d76-ae80-43bb-a981-46cb19795805",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: RewardByTime upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "60503e89-dfce-4ab3-906d-807c475b2bd6",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "005c71e2-eb82-4a4a-9ef5-efdbe4791e94",
            "title": "#reward",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/reward_by_time_upgrade_test.js",
            "file": "/test/reward_by_time_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by system address",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward may only be called by system address",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.reward().should.be.rejectedWith(ERROR_MSG);\nawait rewardByTime.setSystemAddress(systemAddress);\nawait rewardByTime.reward({from: systemAddress}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "867630e5-4bee-4e18-80b6-c23b0df7d440",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should assign rewards to payout keys and EmissionFunds",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should assign rewards to payout keys and EmissionFunds",
                "timedOut": false,
                "duration": 2347,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\nlet lastTime = 100 + threshold * 4;\nlet keyIndex = 1;\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\nconst keysArray = [\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n];\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal(keysArray);\nfor (let k = 0; k < 10; k++) {\n  const time = getRandomInt(lastTime + 4, lastTime + 81);\n  //console.log('time = ' + time);\n  const receiversCount = Math.floor((time - lastTime) / threshold);\n  let receivers = [];\n  await rewardByTime.setTime(time);\n  result = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\n  if (receiversCount > 0) {\n    result.logs[0].event.should.be.equal('Rewarded');\n  }\n  let i, n;\n  for (i = keyIndex, n = 0; n < receiversCount; i++, n++) {\n    receivers.push(keysArray[i % keysArray.length]);\n    result.logs[0].args.rewards[n].toString().should.be.equal(blockRewardAmount.toString());\n  }\n  if (receiversCount > 0) {\n    receivers.push(emissionFundsAddress);\n    result.logs[0].args.receivers.should.be.deep.equal(receivers);\n    result.logs[0].args.rewards[n].toString().should.be.equal((emissionFundsAmount * receiversCount).toString());\n    lastTime = lastTime + threshold * receiversCount;\n    keyIndex = i % keysArray.length;\n    (await rewardByTime.lastTime.call()).should.be.bignumber.equal(lastTime);\n    (await rewardByTime.keyIndex.call()).should.be.bignumber.equal(keyIndex);\n  }\n}",
                "err": {},
                "isRoot": false,
                "uuid": "c876bcb5-7d85-46db-851a-3be4f2d8e0ff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should work fine after some validators are removed and added",
                "fullTitle": "Contract: RewardByTime upgraded [all features] #reward should work fine after some validators are removed and added",
                "timedOut": false,
                "duration": 1174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await rewardByTime.setSystemAddress(systemAddress);\nlet result;\n\nawait rewardByTime.setTime(100);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([masterOfCeremony, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nresult = await keysManager.removeMiningKey(miningKey2, {from: votingToChangeKeys});\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(107);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([payoutKey, emissionFundsAddress]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(emissionFundsAmount.toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(2);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey2,\n  payoutKey3\n]);\nawait rewardByTime.setTime(123);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey2,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 4);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(135);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  masterOfCeremony,\n  emissionFundsAddress\n]);\nresult.logs[0].args.rewards[0].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[1].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[2].toString().should.be.equal(blockRewardAmount.toString());\nresult.logs[0].args.rewards[3].toString().should.be.equal((emissionFundsAmount * 3).toString());\n(await rewardByTime.lastTime.call()).should.be.bignumber.equal(100 + threshold * 7);\n(await rewardByTime.keyIndex.call()).should.be.bignumber.equal(1);\nconst miningKey4 = '0x0000000000000000000000000000000000000001';\nawait addMiningKey(miningKey4);\nawait addPayoutKey(payoutKey2, miningKey4);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3\n]);\nawait rewardByTime.setTime(147);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  payoutKey,\n  payoutKey3,\n  emissionFundsAddress\n]);\n(await rewardByTime.getPayoutKeys.call()).should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2\n]);\nawait rewardByTime.setTime(166);\nresult = await rewardByTime.reward({from: systemAddress}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal('Rewarded');\nresult.logs[0].args.receivers.should.be.deep.equal([\n  masterOfCeremony,\n  payoutKey,\n  payoutKey3,\n  payoutKey2,\n  emissionFundsAddress\n]);",
                "err": {},
                "isRoot": false,
                "uuid": "d49136d0-6867-4974-9f04-b24994657a70",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "867630e5-4bee-4e18-80b6-c23b0df7d440",
              "c876bcb5-7d85-46db-851a-3be4f2d8e0ff",
              "d49136d0-6867-4974-9f04-b24994657a70"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3641,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "8bcf1d19-211c-4215-9c06-138caa527c3e",
        "title": "Contract: Voting to change keys [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
        "file": "/test/voting_to_change_keys_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 542,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "3dbeb6e6-5496-42e6-b45f-8ce6ee375fde",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "ab07dff5-6fe2-4fa6-9606-98dac30afec9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 569,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "b615ffab-eea3-4def-af14-448ac96bc1d5",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "9c753241-c8fd-4c22-ad27-03c7630f9c81",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "e6b16bae-314b-4e2a-8cc7-ad8aa926cdda",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 631,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "33c1d207-a278-4dcc-9f2f-b6590b9211ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "67dc4e94-40ea-4d04-8ba3-a1cf26c6925b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 341,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "8b71ceae-54c9-477e-9495-0ad1be05aa7f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 356,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "5f70faf0-2efd-40c5-a184-70f4d704c459",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 341,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "f9d23a8e-cbe2-4ba2-ac24-de9f7ba1f405",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8458,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "80f59472-d2cf-44e7-a8cd-cf66e5208959",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create a ballot for adding removed mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot cannot create a ballot for adding removed mining key",
                "timedOut": false,
                "duration": 423,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nconst {logs} = await keysManager.removeMiningKey(accounts[2]);\nlogs[0].event.should.be.equal(\"MiningKeyChanged\");\n\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,                      // _ballotType (KeyAdding)\n  1,\n  \"memo\",\n  accounts[2],            // _affectedKey\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,                      // _ballotType (KeyAdding)\n  1,\n  \"memo\",\n  accounts[3],            // _affectedKey\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "4ddd11f1-56b1-4777-ba30-baa5f6a63353",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create a ballot for swapping to removed mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallot cannot create a ballot for swapping to removed mining key",
                "timedOut": false,
                "duration": 429,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nconst {logs} = await keysManager.removeMiningKey(accounts[2]);\nlogs[0].event.should.be.equal(\"MiningKeyChanged\");\n\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,                      // _ballotType (KeySwap)\n  1,\n  \"memo\",\n  accounts[2],            // _affectedKey\n  accounts[1],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,                      // _ballotType (KeySwap)\n  1,\n  \"memo\",\n  accounts[3],            // _affectedKey\n  accounts[1],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "78ddd3e5-3eb9-49a3-abc2-b8a2d06a9b2b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "33c1d207-a278-4dcc-9f2f-b6590b9211ea",
              "67dc4e94-40ea-4d04-8ba3-a1cf26c6925b",
              "8b71ceae-54c9-477e-9495-0ad1be05aa7f",
              "5f70faf0-2efd-40c5-a184-70f4d704c459",
              "f9d23a8e-cbe2-4ba2-ac24-de9f7ba1f405",
              "80f59472-d2cf-44e7-a8cd-cf66e5208959",
              "4ddd11f1-56b1-4777-ba30-baa5f6a63353",
              "78ddd3e5-3eb9-49a3-abc2-b8a2d06a9b2b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11106,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "95c5b925-d611-4fb3-805a-433cd8524df8",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 179,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "53fecad4-69e7-4c7c-9f8c-2ac2fdfa3cc2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 243,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "2e15014f-7ec9-4ce4-99b8-f9125d0de357",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f025c1d1-63b2-4e3c-b0db-b80e9a8b2273",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "56294b6f-cb44-4833-9143-d3d2b17b2073",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1047,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "3509ccef-a149-4eef-8eeb-acb1185b9938",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 1794,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "d55eb436-5472-4f4e-9568-654519549585",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create a ballot with earlier removed mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #createBallotToAddNewValidator cannot create a ballot with earlier removed mining key",
                "timedOut": false,
                "duration": 578,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nlet data = await keysManager.removePayoutKey(miningKeyForVotingKey);\ndata.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\n\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\ndata = await keysManager.removeMiningKey(accounts[5]);\ndata.logs[0].event.should.be.equal(\"MiningKeyChanged\");\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[5],       // _newMiningKey\n  accounts[6],       // _newVotingKey\n  accounts[7],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[8],       // _newMiningKey\n  accounts[6],       // _newVotingKey\n  accounts[7],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6ef5f985-9990-4aac-95b4-41b0aaf917ed",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2e15014f-7ec9-4ce4-99b8-f9125d0de357",
              "f025c1d1-63b2-4e3c-b0db-b80e9a8b2273",
              "56294b6f-cb44-4833-9143-d3d2b17b2073",
              "3509ccef-a149-4eef-8eeb-acb1185b9938",
              "d55eb436-5472-4f4e-9568-654519549585",
              "6ef5f985-9990-4aac-95b4-41b0aaf917ed"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3840,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "0505b7c5-b34d-4011-8b21-d8138f051ab6",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 244,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "4126ebac-9712-4c91-ada7-fcfda84c1846",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "696eeade-03bd-4ee7-8819-e239dfc83134",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "27228793-c0e3-44f5-a3e9-7f72ad25a81a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 656,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "12176074-ce97-4d32-b9bf-4fec49b0f494",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 44,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "eae2d9b8-c341-45f0-a804-1d722141ad11",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d61f350e-16b2-4d1c-9672-d5f5969369ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2bdcf4d8-b0a8-49f5-8b2c-5801a684fc8a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 229,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2a05ae1f-801e-4237-b4ef-341492a3ac5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cb9cc7cd-e54d-4ddd-88e7-764a76332dd7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 145,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b68a0038-d350-4f2e-9172-b0adcd040727",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "696eeade-03bd-4ee7-8819-e239dfc83134",
              "27228793-c0e3-44f5-a3e9-7f72ad25a81a",
              "12176074-ce97-4d32-b9bf-4fec49b0f494",
              "eae2d9b8-c341-45f0-a804-1d722141ad11",
              "d61f350e-16b2-4d1c-9672-d5f5969369ef",
              "2bdcf4d8-b0a8-49f5-8b2c-5801a684fc8a",
              "2a05ae1f-801e-4237-b4ef-341492a3ac5e",
              "cb9cc7cd-e54d-4ddd-88e7-764a76332dd7",
              "b68a0038-d350-4f2e-9172-b0adcd040727"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1691,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "701311a3-bc46-4ca9-bb13-668aa98ee9d5",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 365,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "874887e6-d962-4ced-bffd-38a4f783f8cf",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 547,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9f9a8e4a-d88b-479b-911d-8bfbe1510b71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 697,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "4b04867d-2a29-4c05-80b2-00b757c54037",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 836,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "fc4c40b5-5849-49c7-9606-6dbf78d6a3c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 1759,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ee686911-ef8e-4360-a906-af26f46b1805",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 883,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "736f6163-eb9a-4261-aaf9-d15068f0be56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 1571,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "7e5f08ff-9adb-46ca-b033-b368d78f6ac7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 877,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "5ddb638a-4930-4ae1-ba7b-cbf33d8556fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 875,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "7a82f9e4-708f-4e85-8530-213a0a4ccbaa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 868,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8fe6cc72-060e-41a0-874b-8322018e049c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 853,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8aa13cc8-7395-4a11-a673-777654dc9cff",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "d13cd750-3723-4d45-9c6f-560c101966b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1490,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "5ee6efb6-731a-45bf-a57a-d0222227e8e1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1374,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "74b323c3-cb43-43a2-8ae6-79019bc81d7e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9f9a8e4a-d88b-479b-911d-8bfbe1510b71",
              "4b04867d-2a29-4c05-80b2-00b757c54037",
              "fc4c40b5-5849-49c7-9606-6dbf78d6a3c4",
              "ee686911-ef8e-4360-a906-af26f46b1805",
              "736f6163-eb9a-4261-aaf9-d15068f0be56",
              "7e5f08ff-9adb-46ca-b033-b368d78f6ac7",
              "5ddb638a-4930-4ae1-ba7b-cbf33d8556fb",
              "7a82f9e4-708f-4e85-8530-213a0a4ccbaa",
              "8fe6cc72-060e-41a0-874b-8322018e049c",
              "8aa13cc8-7395-4a11-a673-777654dc9cff",
              "d13cd750-3723-4d45-9c6f-560c101966b3",
              "5ee6efb6-731a-45bf-a57a-d0222227e8e1",
              "74b323c3-cb43-43a2-8ae6-79019bc81d7e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 13757,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "86bd7563-83bb-4954-a696-362074471093",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1620,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1a766d3a-7b11-44be-9e58-6b7e3e0d6b1e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1a766d3a-7b11-44be-9e58-6b7e3e0d6b1e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1620,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "2ca0b69e-ebdf-4ae8-b2d1-dffd3e7717b9",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_test.js",
            "file": "/test/voting_to_change_keys_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 139,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeKeysMock.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "69f75c41-3163-43ae-985a-25615a9698e0",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 83,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "9eed7e19-80b3-4e7d-866e-83cc64eda7e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "a610dee1-c6d7-45d7-ac6d-da52cad290ce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "622161a2-444f-4067-b008-a009b07404e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 101,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "f1911cdc-6c7d-475d-bd9f-1f101da18860",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "4f1c9159-85dd-465c-8307-3d54db5fa2a3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: Voting to change keys [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 718,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const payoutKeyToAdd = accounts[0];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nconst votingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait finalize(votingId, true, {from: votingKey});\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeKeysNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeKeysNew.at(votingEternalStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await votingNew.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "2eab4824-69cf-4af6-8360-5d666fb981b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9eed7e19-80b3-4e7d-866e-83cc64eda7e8",
              "a610dee1-c6d7-45d7-ac6d-da52cad290ce",
              "622161a2-444f-4067-b008-a009b07404e2",
              "f1911cdc-6c7d-475d-bd9f-1f101da18860",
              "4f1c9159-85dd-465c-8307-3d54db5fa2a3",
              "2eab4824-69cf-4af6-8360-5d666fb981b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1144,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "95c655c5-94b5-40cf-80a8-3b8efad8feb7",
        "title": "Contract: Voting to change keys upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
        "file": "/test/voting_to_change_keys_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3178,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "b020025d-30d8-4b61-84d8-6683d5822012",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "7f60f7b3-78fd-4404-be27-8ea4e1841383",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 706,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nminingKeyForVotingKey = accounts[1];\nmasterOfCeremony = accounts[0];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\nlet ballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nvoting = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingEternalStorage.address,\n  accounts[0],\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeKeysMock.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "6f871dfe-faa2-4b04-bc9d-d9771cffefce",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: Voting to change keys upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "c277530d-94e3-4d2b-bf69-f891d07ca610",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "7bc2f999-1a0f-4fd8-b773-088ab75f92c9",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 609,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nlet result = await keysManager.swapMiningKey(accounts[3], accounts[1]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait addVotingKey(votingKey, accounts[3]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\n\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[3],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[4],       // _affectedKey\n  accounts[5],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[0].should.be.bignumber.equal(VOTING_START_DATE);\nballotInfo[1].should.be.bignumber.equal(VOTING_END_DATE);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "9cdeb5c7-22b4-4bc1-9ac7-7a4e4bd673dc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create voting with invalid duration",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create voting with invalid duration",
                "timedOut": false,
                "duration": 129,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(10, 'days').unix();\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = 0\nVOTING_END_DATE = moment.utc().add(2, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(2, 'seconds').unix();\nVOTING_END_DATE = 0\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  1, // _affectedKeyType\n  \"memo\",\n  accounts[1], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "15285807-0f1d-4efe-8a85-02eca573647d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for MoC",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for MoC",
                "timedOut": false,
                "duration": 379,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  masterOfCeremony, // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "961525c2-bcf0-4ce5-a087-4f4827579856",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add votingKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add votingKey for 0x0",
                "timedOut": false,
                "duration": 341,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  '0x0000000000000000000000000000000000000000', // _miningKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1, // _ballotType\n  2, // _affectedKeyType\n  \"memo\",\n  accounts[5], // _affectedKey\n  accounts[2], // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "1c2bc1ab-2100-41dd-a621-2bf46b8f7449",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let add payoutKey for 0x0",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let add payoutKey for 0x0",
                "timedOut": false,
                "duration": 346,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[2],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "7f0e310d-27b5-46b5-8c87-d49d7dfa00a9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8139,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n);\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); //add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3],\n  accounts[2],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "1b815e03-675b-4c26-84cd-b218fbbe4d76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create a ballot for adding removed mining key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot cannot create a ballot for adding removed mining key",
                "timedOut": false,
                "duration": 419,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nconst {logs} = await keysManager.removeMiningKey(accounts[2]);\nlogs[0].event.should.be.equal(\"MiningKeyChanged\");\n\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,                      // _ballotType (KeyAdding)\n  1,\n  \"memo\",\n  accounts[2],            // _affectedKey\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,                      // _ballotType (KeyAdding)\n  1,\n  \"memo\",\n  accounts[3],            // _affectedKey\n  '0x0000000000000000000000000000000000000000',\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "28bd4329-db06-452b-ac82-ea11937d6d84",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create a ballot for swapping to removed mining key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallot cannot create a ballot for swapping to removed mining key",
                "timedOut": false,
                "duration": 431,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nconst {logs} = await keysManager.removeMiningKey(accounts[2]);\nlogs[0].event.should.be.equal(\"MiningKeyChanged\");\n\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,                      // _ballotType (KeySwap)\n  1,\n  \"memo\",\n  accounts[2],            // _affectedKey\n  accounts[1],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,                      // _ballotType (KeySwap)\n  1,\n  \"memo\",\n  accounts[3],            // _affectedKey\n  accounts[1],\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0367ac76-bcb0-404b-8bb1-3660c4b0c077",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9cdeb5c7-22b4-4bc1-9ac7-7a4e4bd673dc",
              "15285807-0f1d-4efe-8a85-02eca573647d",
              "961525c2-bcf0-4ce5-a087-4f4827579856",
              "1c2bc1ab-2100-41dd-a621-2bf46b8f7449",
              "7f0e310d-27b5-46b5-8c87-d49d7dfa00a9",
              "1b815e03-675b-4c26-84cd-b218fbbe4d76",
              "28bd4329-db06-452b-ac82-ea11937d6d84",
              "0367ac76-bcb0-404b-8bb1-3660c4b0c077"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 10793,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ede5ac5f-edfb-421f-8072-6ce89ec100ae",
            "title": "#createBallotToAddNewValidator",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator \"before each\" hook",
                "timedOut": false,
                "duration": 205,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addPayoutKey(accounts[6], miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "8188831f-d690-45df-ad55-ea5045a334b2",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator happy path",
                "timedOut": false,
                "duration": 232,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: miningKeyForVotingKey}\n).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\n\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[3], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  accounts[4], // newVotingKey\n  accounts[5], // newPayoutKey\n  '0x0000000000000000000000000000000000000000', // miningKey\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(1);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "a8ee3283-8328-46e2-a0fa-7b3c9d48d386",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed voting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed voting key",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  votingKey,         // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "14ec8e8c-7b9a-4997-9c77-eb8519527bfc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny adding already existed payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator deny adding already existed payout key",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[6],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[3],       // _newMiningKey\n  accounts[4],       // _newVotingKey\n  accounts[5],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "c5792c47-1d14-4025-a743-5b23514e28aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should create validator with all keys after finalization",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should create validator with all keys after finalization",
                "timedOut": false,
                "duration": 1082,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(5);",
                "err": {},
                "isRoot": false,
                "uuid": "4dfc3a6e-cecc-40a9-af8a-d071b5309239",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow removing new validator if finalizeChange did not happen",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator should allow removing new validator if finalizeChange did not happen",
                "timedOut": false,
                "duration": 1879,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nconst {logs} = await keysManager.removePayoutKey(miningKeyForVotingKey);\nlogs[0].event.should.be.equal(\"PayoutKeyChanged\");\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[7],       // _newMiningKey\n  accounts[8],       // _newVotingKey\n  accounts[9],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(true);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(true);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(true);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal(accounts[7]);\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal(accounts[7]);\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nVOTING_START_DATE = moment.utc().add(20, 'days').unix();\nVOTING_END_DATE = moment.utc().add(30, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  2,                 // _ballotType (KeyRemoval)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[7],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.accept, {from: accounts[6]}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(id, true, {from: votingKey});\n(await poaNetworkConsensusMock.isValidator.call(accounts[7])).should.be.equal(false);\n(await keysManager.isMiningActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.isVotingActive.call(accounts[8])).should.be.equal(false);\n(await keysManager.isPayoutActive.call(accounts[7])).should.be.equal(false);\n(await keysManager.miningKeyByVoting.call(accounts[8])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.miningKeyByPayout.call(accounts[9])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getVotingByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n(await keysManager.getPayoutByMining.call(accounts[7])).should.be.equal('0x0000000000000000000000000000000000000000');\n\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\n(await poaNetworkConsensusMock.getCurrentValidatorsLength.call()).should.be.bignumber.equal(4);",
                "err": {},
                "isRoot": false,
                "uuid": "82cf0024-f19c-49e4-8abe-661c5e4bc197",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create a ballot with earlier removed mining key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #createBallotToAddNewValidator cannot create a ballot with earlier removed mining key",
                "timedOut": false,
                "duration": 484,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nlet data = await keysManager.removePayoutKey(miningKeyForVotingKey);\ndata.logs[0].event.should.be.equal(\"PayoutKeyChanged\");\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\n\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\ndata = await keysManager.removeMiningKey(accounts[5]);\ndata.logs[0].event.should.be.equal(\"MiningKeyChanged\");\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[5],       // _newMiningKey\n  accounts[6],       // _newVotingKey\n  accounts[7],       // _newPayoutKey\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallotToAddNewValidator(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  \"memo\",            // _memo\n  accounts[8],       // _newMiningKey\n  accounts[6],       // _newVotingKey\n  accounts[7],       // _newPayoutKey\n  {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "d259f1c6-f992-4abf-8ba5-f3117bd72933",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a8ee3283-8328-46e2-a0fa-7b3c9d48d386",
              "14ec8e8c-7b9a-4997-9c77-eb8519527bfc",
              "c5792c47-1d14-4025-a743-5b23514e28aa",
              "4dfc3a6e-cecc-40a9-af8a-d071b5309239",
              "82cf0024-f19c-49e4-8abe-661c5e4bc197",
              "d259f1c6-f992-4abf-8ba5-f3117bd72933"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3856,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "77d978c8-5e5e-42c6-b815-4de86ec14b0f",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 273,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  1,\n  \"memo\",\n  accounts[3], \n  accounts[1],\n  {from: votingKey}\n);",
                "err": {},
                "isRoot": false,
                "uuid": "7fb1c394-95c3-4d82-9f3e-255b84f383c9",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 152,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "f59869bd-c3f8-475c-ac7a-6fcf89552fc6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "e8e62213-e2b3-47dc-898e-fa5fba00ed31",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 639,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, {from: accounts[3]}).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, {from: accounts[5]}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id))[8];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "78e78329-05ac-4925-a957-535b26f1554c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "48145983-fff6-4f8f-9273-0f76610a3b28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ccf1d1fd-e836-4da7-b7a5-98352a45b3f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 88,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c8fc0872-0c84-45b5-ad01-4570faad4871",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "88915b1d-793b-4946-8f6b-6b713bcd8e77",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a948775a-f0a9-4dd7-bb39-4a494b0f4023",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d2864315-00af-4519-90aa-51db37a599c4",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f59869bd-c3f8-475c-ac7a-6fcf89552fc6",
              "e8e62213-e2b3-47dc-898e-fa5fba00ed31",
              "78e78329-05ac-4925-a957-535b26f1554c",
              "48145983-fff6-4f8f-9273-0f76610a3b28",
              "ccf1d1fd-e836-4da7-b7a5-98352a45b3f3",
              "c8fc0872-0c84-45b5-ad01-4570faad4871",
              "88915b1d-793b-4946-8f6b-6b713bcd8e77",
              "a948775a-f0a9-4dd7-bb39-4a494b0f4023",
              "d2864315-00af-4519-90aa-51db37a599c4"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1629,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e96c4a80-7240-468f-80d3-62a94180dbee",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 444,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey  = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "b95ac0c7-c50d-4707-9919-036669d3e608",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path - no action since it did not meet minimum number of totalVoters",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize happy path - no action since it did not meet minimum number of totalVoters",
                "timedOut": false,
                "duration": 621,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  payoutKeyToAdd,\n  accounts[1],\n  {from: votingKey}\n);\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 1);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(votingId).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  payoutKeyToAdd, // affectedKey\n  new web3.BigNumber(3), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[1], // miningKey\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\n\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey)\n);\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "9a2364e0-f511-46fc-8eca-7b486c02abea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of payout key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of payout key",
                "timedOut": false,
                "duration": 761,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "// Ballot to Add Payout Key for miner account[1]\nawait deployAndTestBallot({\n  _affectedKey: payoutKeyToAdd,\n  _affectedKeyType: 3,\n  _miningKey: accounts[1],\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(accounts[1]);\nkeysState.should.be.deep.equal(\n  [ votingKey,\n  payoutKeyToAdd,\n  true,\n  true,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "8904627f-721a-44ea-bf35-f17ac20bc126",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of VotingKey",
                "timedOut": false,
                "duration": 882,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\nlet votingKeyToAdd = accounts[8];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 1,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ votingKeyToAdd,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "e1985d36-d8d1-4c51-a6a4-583ec5e0f978",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create ballot for using previous mining key",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize cannot create ballot for using previous mining key",
                "timedOut": false,
                "duration": 1838,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n})\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.setTime(VOTING_START_DATE - 1);\nawait deployAndTestBallot({\n  _affectedKey: accounts[5],\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n  \n})\nawait voting.setTime(VOTING_START_DATE - 1);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  miningKey,\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1523a7bf-e7ab-42f7-808a-1a7921430e36",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize addition of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize addition of MiningKey",
                "timedOut": false,
                "duration": 970,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(voting.address);\nlet miningKey = accounts[6];\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: '0x0000000000000000000000000000000000000000',\n  _ballotType: 1,\n  \n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.contain(miningKey);\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "167378e9-909b-4f4f-8b3b-ff6d6aa50a8e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of MiningKey",
                "timedOut": false,
                "duration": 1618,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: miningKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));",
                "err": {},
                "isRoot": false,
                "uuid": "86212fc6-ae95-4a34-b37e-450767c784c9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of VotingKey",
                "timedOut": false,
                "duration": 940,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet votingKeyToAdd = accounts[8];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait addVotingKey(votingKeyToAdd, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: votingKeyToAdd,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "395e22b1-b4da-4179-a439-2d01e74f39dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize removal of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize removal of PayoutKey",
                "timedOut": false,
                "duration": 871,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 2,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "657e324a-3563-4ac4-b8b8-c872ae62688a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of VotingKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of VotingKey",
                "timedOut": false,
                "duration": 844,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addVotingKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newVotingKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newVotingKey,\n  _affectedKeyType: 2,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ newVotingKey,\n  '0x0000000000000000000000000000000000000000',\n  true,\n  true,\n  false ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "a2808eb8-b9d2-4e44-b53f-e7ceeab70569",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of PayoutKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of PayoutKey",
                "timedOut": false,
                "duration": 877,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[7];\nlet affectedKey = accounts[8];\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKey);\nawait addPayoutKey(affectedKey, miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nlet newPayoutKey = accounts[2];\nawait deployAndTestBallot({\n  _affectedKey: newPayoutKey,\n  _affectedKeyType: 3,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  newPayoutKey,\n  true,\n  false,\n  true ]\n)",
                "err": {},
                "isRoot": false,
                "uuid": "7f15707a-c628-4d2b-ac85-314057665d49",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize swap of MiningKey",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize finalize swap of MiningKey",
                "timedOut": false,
                "duration": 1054,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\n// Ballot to Add Voting Key for miner account[1]\n// uint256 _affectedKeyType, [enum KeyTypes {Invalid, MiningKey, VotingKey, PayoutKey}]\n// uint256 _ballotType [  enum BallotTypes {Invalid, Adding, Removal, Swap} ]\nawait deployAndTestBallot({\n  _affectedKey: affectedKey,\n  _affectedKeyType: 1,\n  _miningKey: miningKey,\n  _ballotType: 3,\n})\nconst keysState = await keysManager.validatorKeys.call(miningKey);\nkeysState.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  false,\n  false,\n  false ]\n)\nconst keysStateNew = await keysManager.validatorKeys.call(affectedKey);\nkeysStateNew.should.be.deep.equal(\n  [ '0x0000000000000000000000000000000000000000',\n  '0x0000000000000000000000000000000000000000',\n  true,\n  false,\n  false ]\n)\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nconst validators = await poaNetworkConsensusMock.getValidators.call();\nvalidators.should.not.contain(miningKey);\nvalidators.should.contain(affectedKey);\nfalse.should.be.equal(await poaNetworkConsensusMock.isValidator.call(miningKey));\ntrue.should.be.equal(await poaNetworkConsensusMock.isValidator.call(affectedKey));",
                "err": {},
                "isRoot": false,
                "uuid": "4ca5bdd2-6b25-4f32-abb2-6fd2189fe7c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevent double finalize",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize prevent double finalize",
                "timedOut": false,
                "duration": 1500,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let miningKey = accounts[6];\nlet affectedKey = accounts[5];\nawait proxyStorageMock.setVotingContractMock(masterOfCeremony);\nawait addMiningKey(miningKey);\nawait proxyStorageMock.setVotingContractMock(voting.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  3,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  2,\n  1,\n  \"memo\",\n  affectedKey,\n  miningKey,\n  {from: votingKey}\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nnew web3.BigNumber(3).should.be.bignumber.equal(await voting.getBallotType.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId))[9]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(2).should.be.bignumber.equal(await voting.getBallotType.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond))[9]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond))[8]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId))[8]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "3c7e83c4-8d11-4980-80e9-4f9827a9c42c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1243,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const miningKey = accounts[4];\nconst affectedKey = accounts[6];\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  3,                 // uint256 _ballotType (KeySwap)\n  1,                 // uint256 _affectedKeyType (MiningKey)\n  \"memo\",            // string _memo\n  affectedKey,       // address _affectedKey\n  miningKey,         // address _miningKey\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1))[9]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "d8250d5b-26f7-4be6-857a-39e080c16f2a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9a2364e0-f511-46fc-8eca-7b486c02abea",
              "8904627f-721a-44ea-bf35-f17ac20bc126",
              "e1985d36-d8d1-4c51-a6a4-583ec5e0f978",
              "1523a7bf-e7ab-42f7-808a-1a7921430e36",
              "167378e9-909b-4f4f-8b3b-ff6d6aa50a8e",
              "86212fc6-ae95-4a34-b37e-450767c784c9",
              "395e22b1-b4da-4179-a439-2d01e74f39dd",
              "657e324a-3563-4ac4-b8b8-c872ae62688a",
              "a2808eb8-b9d2-4e44-b53f-e7ceeab70569",
              "7f15707a-c628-4d2b-ac85-314057665d49",
              "4ca5bdd2-6b25-4f32-abb2-6fd2189fe7c6",
              "3c7e83c4-8d11-4980-80e9-4f9827a9c42c",
              "d8250d5b-26f7-4be6-857a-39e080c16f2a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 14019,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "366b82b2-f66a-42ef-963b-131af7305ab3",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_keys_upgrade_test.js",
            "file": "/test/voting_to_change_keys_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: Voting to change keys upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE, // _startTime\n  VOTING_END_DATE,   // _endTime\n  1,                 // _ballotType (KeyAdding)\n  1,                 // _affectedKeyType (MiningKey)\n  \"memo\",            // _memo\n  accounts[7],       // _affectedKey\n  accounts[2],       // _miningKey\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeKeysMock.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeKeysMock.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  accounts[7], // affectedKey\n  new web3.BigNumber(1), // affectedKeyType\n  \"0x0000000000000000000000000000000000000000\", // newVotingKey\n  \"0x0000000000000000000000000000000000000000\", // newPayoutKey\n  accounts[2], // miningKey\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(1), // ballotType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false // canBeFinalizedNow\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "3df3fb0d-b5c8-48ef-9b07-34da7ddbc823",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3df3fb0d-b5c8-48ef-9b07-34da7ddbc823"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1614,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "cd7081ce-31be-46fb-9a51-67da3563d944",
        "title": "Contract: VotingToChangeMinThreshold [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
        "file": "/test/voting_to_change_min_threshold_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3146,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "8c073e2f-f127-40df-b9e4-0e992e01acca",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "3de1dc4c-9858-4f47-a456-50e0404146f7",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1122,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "a12d9391-0d24-40eb-ae91-16be99c8f0de",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "981844fd-100a-4069-89d3-b3b8688e6902",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "2d256e61-d759-43cf-bd9b-a2d50fac60b4",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 10,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "0a640b03-e1fb-4bfc-b015-8ef483cb3e55",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 191,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "dbeee4a1-7faa-4380-8faf-7c66ec6aa25c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a4a72971-fb7e-45c2-a067-28d7ac871a15",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 32,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0d5d7f28-31b1-4d32-ba80-7f98292e66b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8080,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "981d3917-65c7-4320-8df2-2005639cafd8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "dbeee4a1-7faa-4380-8faf-7c66ec6aa25c",
              "a4a72971-fb7e-45c2-a067-28d7ac871a15",
              "0d5d7f28-31b1-4d32-ba80-7f98292e66b3",
              "981d3917-65c7-4320-8df2-2005639cafd8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8319,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "68e4fd32-0c70-4a5d-9e74-3824d7dba737",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 135,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "67b6413b-ebee-44dd-b3c7-439f16798b8f",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 158,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "9af2f088-4e46-4d90-8986-a96e577f8bcc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 160,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "275c41cd-8eb8-4087-82dd-857316b8a526",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 410,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "20afcdfc-36d5-453c-914c-031b37309d7c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a2d6afe3-d2c7-40c7-8612-47c5a1fa85be",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fd790c3f-deb6-457e-8eda-d30d60a67e16",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "71b52129-3286-4e35-874e-e04899a72386",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "48d6c94c-be52-416f-918c-289f4aaf8398",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 138,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9f507b08-8487-4649-8f93-a8721e301645",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 143,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5ff484c6-e9e6-4741-a3de-789a620cdbdf",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9af2f088-4e46-4d90-8986-a96e577f8bcc",
              "275c41cd-8eb8-4087-82dd-857316b8a526",
              "20afcdfc-36d5-453c-914c-031b37309d7c",
              "a2d6afe3-d2c7-40c7-8612-47c5a1fa85be",
              "fd790c3f-deb6-457e-8eda-d30d60a67e16",
              "71b52129-3286-4e35-874e-e04899a72386",
              "48d6c94c-be52-416f-918c-289f4aaf8398",
              "9f507b08-8487-4649-8f93-a8721e301645",
              "5ff484c6-e9e6-4741-a3de-789a620cdbdf"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1352,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "b7919929-0b1e-4f79-85ff-d2b18e3892eb",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 0,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "7b163706-5996-4970-b61b-49223d80309b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 506,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "d08b0398-da42-4694-9d5d-84ef6a10479b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1026,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "5fb00d03-7beb-4b29-9db8-f7702c8b79f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1546,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "990aa0c4-fa73-4116-9ff5-fed4b552d5b9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1733,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "6141d3e8-19d9-44d4-94f0-5bcbd6174827",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1309,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "84824253-9c88-417d-b5e9-4965f9a1ced8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d08b0398-da42-4694-9d5d-84ef6a10479b",
              "5fb00d03-7beb-4b29-9db8-f7702c8b79f7",
              "990aa0c4-fa73-4116-9ff5-fed4b552d5b9",
              "6141d3e8-19d9-44d4-94f0-5bcbd6174827",
              "84824253-9c88-417d-b5e9-4965f9a1ced8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6120,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "52a01316-27c0-43ed-bcc3-f99ccf7522e4",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1230,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0ecf76c0-7d63-4de0-ac32-5bfd1756948a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0ecf76c0-7d63-4de0-ac32-5bfd1756948a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1230,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "de8825f4-ba1a-40c8-9d14-d91d45bcbc0d",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_test.js",
            "file": "/test/voting_to_change_min_threshold_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 119,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await Voting.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "75eedbbc-d8f9-4512-981b-bad9f6688dab",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 65,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "751df26c-ed5c-42e8-a261-3c1249bc3519",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "0eab3fb7-7a7c-4205-9fb9-d00268be2646",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 68,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "9bb46a26-0f64-42b6-998a-c14a3d260b08",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "c80b3a29-8b45-4aef-ab1d-420b76f7ad61",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "4651ef23-183a-49f1-b55b-2badfb401c24",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeMinThreshold [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 325,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "81e4d436-8925-4350-a835-d1f7b72e36e8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "751df26c-ed5c-42e8-a261-3c1249bc3519",
              "0eab3fb7-7a7c-4205-9fb9-d00268be2646",
              "9bb46a26-0f64-42b6-998a-c14a3d260b08",
              "c80b3a29-8b45-4aef-ab1d-420b76f7ad61",
              "4651ef23-183a-49f1-b55b-2badfb401c24",
              "81e4d436-8925-4350-a835-d1f7b72e36e8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 703,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "6eadadfa-6d53-48f6-97bb-44300264d273",
        "title": "Contract: VotingToChangeMinThreshold upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
        "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2455,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "6883b7ea-10ce-4757-8a22-7b4f3df79a40",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e9135d0e-15de-4064-8738-af84273f51ed",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1175,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[3];\nvotingKey2 = accounts[5];\nvotingKey3 = accounts[6];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\n\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nvoting = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await Voting.at(votingEternalStorage.address);\nawait voting.init(172800, 0).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800, 3).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst votingNew = await VotingNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingNew.at(votingEternalStorage.address);\n\nawait proxyStorageMock.initializeAddresses(\n  keysManager.address,\n  accounts[0],\n  voting.address,\n  accounts[0],\n  accounts[0],\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  accounts[0]\n);\n\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[2]);\nawait addVotingKey(votingKey2, accounts[2]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait addMiningKey(accounts[7]);\nawait addMiningKey(accounts[8]);\nawait addMiningKey(accounts[9]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;",
            "err": {},
            "isRoot": false,
            "uuid": "e673fe71-4546-49cf-a80a-a49f4f6af33c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2c4b3616-1443-43ee-bfa9-d00b5cde4c95",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "720ae59f-6d1e-4f5c-9c32-0989d5adfdbd",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 17,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "7d7144d7-4b54-45b5-ba3d-c8535eb0a5cb",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 201,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey});\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "12e097f2-74df-49fc-8e53-526f2f6c9d37",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should be more than or equal to 3",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should be more than or equal to 3",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "72612a6a-ebe8-4271-9b6b-abab9b44ee02",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed value should not be equal to the same value",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot proposed value should not be equal to the same value",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 3,\"memo\", {from: votingKey}).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ac95bcca-8ad6-40e7-ab55-9e4bad534eab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8548,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4,\"memo\", {from: votingKey});\n// we have 6 validators, so 200 limit / 6 = 33.3 ~ 33\nnew web3.BigNumber(33).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 106 validators\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey}).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "86a05374-01c3-411a-816f-d4a4def8949c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "12e097f2-74df-49fc-8e53-526f2f6c9d37",
              "72612a6a-ebe8-4271-9b6b-abab9b44ee02",
              "ac95bcca-8ad6-40e7-ab55-9e4bad534eab",
              "86a05374-01c3-411a-816f-d4a4def8949c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8788,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e6b4cb44-ca36-48f2-9185-9f287960f867",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 138,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();\nlet validators = await poaNetworkConsensusMock.getValidators.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\",{from: votingKey});",
                "err": {},
                "isRoot": false,
                "uuid": "ae2b9645-6653-43bc-9bf3-f310927445db",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 151,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.accept, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "1af3e513-fd42-4b62-a4b2-b99cb1c883ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 168,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst {logs} = await voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);\nlogs[0].args.voterMiningKey.should.be.equal(miningKeyForVotingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "290ba060-c8a4-4f44-a15a-dbd75548346c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 352,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\n// add new voter\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait voting.vote(id, choice.accept, {from: votingKey3}).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "5f9d3036-80ba-4cf7-a585-8e3d5c6291b5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "791006af-a892-43b0-85da-d7c6af37a1ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b97dcaa3-0775-4cfe-a31f-1a3592627738",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "2754170b-ba2b-4f6e-a942-56284f0be315",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 147,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ed7daa2e-f3ec-414a-a094-3dcb142a00db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "0e650790-0dc4-4990-8d50-3a7ba613cc78",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 136,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "1eea92da-9b9c-45d4-961e-7530adb10376",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1af3e513-fd42-4b62-a4b2-b99cb1c883ac",
              "290ba060-c8a4-4f44-a15a-dbd75548346c",
              "5f9d3036-80ba-4cf7-a585-8e3d5c6291b5",
              "791006af-a892-43b0-85da-d7c6af37a1ee",
              "b97dcaa3-0775-4cfe-a31f-1a3592627738",
              "2754170b-ba2b-4f6e-a942-56284f0be315",
              "ed7daa2e-f3ec-414a-a094-3dcb142a00db",
              "0e650790-0dc4-4990-8d50-3a7ba613cc78",
              "1eea92da-9b9c-45d4-961e-7530adb10376"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1290,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "23242bb2-33ca-41e1-9901-99f190656d34",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 1,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "payoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();",
                "err": {},
                "isRoot": false,
                "uuid": "2c88acbf-cc53-4652-a17c-f72576d5e86e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 414,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "66d4a26e-9c19-47a9-8f75-fe7080736b7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change to proposedValue when quorum is reached",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should change to proposedValue when quorum is reached",
                "timedOut": false,
                "duration": 1130,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 4;\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue, \"memo\", {from: votingKey});\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.reject, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(votingId, {from: votingKey});\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  new web3.BigNumber(proposedValue), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(3);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey2)\n);\ntrue.should.be.equal(\n  await voting.hasAlreadyVoted.call(votingId, votingKey3)\n);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(proposedValue);\nlet votingForKeys = await VotingForKeys.new();\nconst votingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800);\nawait votingForKeys.migrateDisable();\nconst nextId = await votingForKeys.nextBallotId.call();\nawait votingForKeys.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  3,\n  \"memo\",\n  accounts[5],\n  accounts[1],\n  {from: votingKey}\n);\nconst minThresholdVotingForKeys = await votingForKeys.getMinThresholdOfVoters.call(nextId);\nminThresholdVotingForKeys.should.be.bignumber.equal(proposedValue);",
                "err": {},
                "isRoot": false,
                "uuid": "a6c955d2-49bc-4b59-8e4e-763afcc53297",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1415,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue1 = 4;\nlet proposedValue2 = 5;\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, proposedValue1, \"memo\",{from: votingKey});\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85c9\");\nawait addMiningKey(\"0xa6Bf70bd230867c870eF13631D7EFf1AE8Ab85d9\");\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.createBallot(VOTING_START_DATE+2, VOTING_END_DATE+2, proposedValue2, \"memo\",{from: votingKey});\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(4).should.be.bignumber.equal(await voting.getProposedValue.call(votingId));\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nnew web3.BigNumber(5).should.be.bignumber.equal(await voting.getProposedValue.call(votingIdForSecond));\nfalse.should.be.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[4]); // isFinalized\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nnew web3.BigNumber(1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingId, votingKey))[3]) // progress",
                "err": {},
                "isRoot": false,
                "uuid": "ba51e5d2-cf09-4897-b00c-58514b8ab7fe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1903,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  2,                 // uint256 _proposedValue\n  \"memo\",            // string _memo\n  {from: votingKey3}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey3))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "4b6d0a42-4cd8-4b11-a003-6efe7bbcccdd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should decrease validator limit only once when calling finalize more than once",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #finalize should decrease validator limit only once when calling finalize more than once",
                "timedOut": false,
                "duration": 1212,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let result = await keysManager.removeMiningKey(accounts[7]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[8]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nresult = await keysManager.removeMiningKey(accounts[9]);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait voting.setMinPossibleThreshold(2);\nawait ballotsStorage.setThresholdMock(1, 1);\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 2, \"memo\", {from: votingKey});\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(2);\n\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait ballotsStorage.setThresholdMock(2, 1);\nawait voting.setTime(VOTING_END_DATE + 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs.length.should.be.equal(0);\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(false);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(1);\nawait ballotsStorage.setThresholdMock(1, 1);\nresult = await voting.finalize(votingId, {from: votingKey});\nresult.logs[0].event.should.equal(\"BallotFinalized\");\n(await voting.validatorActiveBallots.call(miningKeyForVotingKey)).should.be.bignumber.equal(1);\n(await voting.getIsFinalized.call(votingId)).should.be.equal(true);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "ac9ed97d-69e1-44f7-9d0a-7caeba08990e",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "66d4a26e-9c19-47a9-8f75-fe7080736b7e",
              "a6c955d2-49bc-4b59-8e4e-763afcc53297",
              "ba51e5d2-cf09-4897-b00c-58514b8ab7fe",
              "4b6d0a42-4cd8-4b11-a003-6efe7bbcccdd",
              "ac9ed97d-69e1-44f7-9d0a-7caeba08990e"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6074,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "f724c08b-b49d-47a2-9ae2-3e7304b12170",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_min_threshold_upgrade_test.js",
            "file": "/test/voting_to_change_min_threshold_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeMinThreshold upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(VOTING_START_DATE, VOTING_END_DATE, 4, \"memo\", {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: votingKey3}).should.be.fulfilled;\nlet votingNew = await Voting.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await Voting.at(votingEternalStorage.address);\nawait votingNew.init(172800, 3).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[2], accounts[4]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  new web3.BigNumber(4), // proposedValue\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(3);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(true);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "fc401920-d9e0-427a-b0eb-bbba0feec154",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fc401920-d9e0-427a-b0eb-bbba0feec154"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1222,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "3055dc13-392e-455d-8ab8-d7ef83e4a792",
        "title": "Contract: VotingToChangeProxyAddress [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
        "file": "/test/voting_to_change_proxy_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2129,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "3a415d85-674d-4d11-8383-5da43f381be4",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "b1787e81-cff8-464f-83d1-aef58cd868e9",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1047,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "da9692da-a258-48ea-a6cc-f80786374db0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "e319decf-513b-483c-a9ca-c04f356d4a7d",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "cfc9fb3e-d054-442a-a46c-e3f1705c8b6b",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 140,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "978108a8-dd6b-4469-97fc-673c18e46577",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 236,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "f23dc6e7-07c5-4469-b6a7-75751968dc9b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "11f1c24d-f460-4da7-a1bb-0a721f78ac12",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 297,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "8316fcdd-b3dc-4b61-bc06-72bce87949d2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 7932,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "e630a9cd-95f2-4fa2-886a-d5902d465eab",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f23dc6e7-07c5-4469-b6a7-75751968dc9b",
              "11f1c24d-f460-4da7-a1bb-0a721f78ac12",
              "8316fcdd-b3dc-4b61-bc06-72bce87949d2",
              "e630a9cd-95f2-4fa2-886a-d5902d465eab"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8478,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7fe4ca5b-36a5-4763-8930-48054567c629",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 222,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "bc9e5a97-964d-494e-9c21-0e1bba9a433a",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "af9cd2d4-a287-45fa-9d81-c2fc561bf0ee",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 145,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "8edec5d7-720a-49c3-a481-d701d6ff1448",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 665,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "07bce10b-19b6-44c5-a2b8-8e527d9444e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a33df3e9-5af1-41a2-9b1a-51c17b041110",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 73,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9bac16eb-86e3-41da-9c44-a24b6b105562",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "03951155-ae58-4259-8add-cefa027531dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 153,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4265ef5f-932f-4700-965b-04c835aafd2e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a7ce1c11-46d7-41a0-807e-2e5f6acd4aa5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 142,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "f499f55b-843c-4362-9ac4-f09424e24428",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "af9cd2d4-a287-45fa-9d81-c2fc561bf0ee",
              "8edec5d7-720a-49c3-a481-d701d6ff1448",
              "07bce10b-19b6-44c5-a2b8-8e527d9444e2",
              "a33df3e9-5af1-41a2-9b1a-51c17b041110",
              "9bac16eb-86e3-41da-9c44-a24b6b105562",
              "03951155-ae58-4259-8add-cefa027531dd",
              "4265ef5f-932f-4700-965b-04c835aafd2e",
              "a7ce1c11-46d7-41a0-807e-2e5f6acd4aa5",
              "f499f55b-843c-4362-9ac4-f09424e24428"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1657,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9f39ad43-a9a9-4890-87f3-ae72d67e70e8",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 368,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "15ec053a-cac8-4019-b375-b8ee10b17919",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 463,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "05cb733d-abc0-43cb-a57d-2dcebbeb581a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 774,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "5f6104b6-5207-4d6a-a75f-55f31956a6f4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 777,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "12c8dcfd-8bbb-41b0-8951-4e74b1a90d0a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 833,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "4d1449da-f3d7-4a03-8db5-0d3fa49ecdf2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 767,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "c754572d-6385-4c84-afc1-a88fb23d5ca8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 829,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "e20d5e28-4372-4ec2-8ced-4987d75d739e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 841,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "ac8b96bf-c772-4b03-bdcb-db5ec2b2e231",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 741,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "d4812c10-eae2-428e-a986-b3fdaec61c3d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change RewardByBlock implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize should change RewardByBlock implementation",
                "timedOut": false,
                "duration": 823,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 9;\nconst rewardByBlockNew = await RewardByBlock.new();\nconst newAddress = rewardByBlockNew.address;\nawait deployAndTest({contractType, newAddress})\nconst eternalProxyAddress = await proxyStorageMock.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "f0bf1a13-c1ed-41e2-a992-17abd1d0c6fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1174,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "d3898927-c0fa-4ab9-ad40-ea54ad9036c4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1304,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "75f85317-2a88-42b3-b75a-5469ca55267f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "05cb733d-abc0-43cb-a57d-2dcebbeb581a",
              "5f6104b6-5207-4d6a-a75f-55f31956a6f4",
              "12c8dcfd-8bbb-41b0-8951-4e74b1a90d0a",
              "4d1449da-f3d7-4a03-8db5-0d3fa49ecdf2",
              "c754572d-6385-4c84-afc1-a88fb23d5ca8",
              "e20d5e28-4372-4ec2-8ced-4987d75d739e",
              "ac8b96bf-c772-4b03-bdcb-db5ec2b2e231",
              "d4812c10-eae2-428e-a986-b3fdaec61c3d",
              "f0bf1a13-c1ed-41e2-a992-17abd1d0c6fb",
              "d3898927-c0fa-4ab9-ad40-ea54ad9036c4",
              "75f85317-2a88-42b3-b75a-5469ca55267f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9326,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "35fc7773-f2cf-4c96-afdf-cd300806c642",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1570,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "51328b50-fd70-4745-8fca-ac01bfd9f7d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51328b50-fd70-4745-8fca-ac01bfd9f7d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1570,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "5a23e0b7-c542-4d09-abd3-76baa8c8dff3",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_test.js",
            "file": "/test/voting_to_change_proxy_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 127,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToChangeProxyAddress.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "00818527-07ba-41ed-b0b5-9cbaba7d8501",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 85,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "e2bf8baf-073c-4863-bcc8-6448b21857f3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 75,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "59dc3d78-6229-4ef9-816a-59b76a6b2042",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 79,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "e55e4fca-35fe-4899-9f19-a96d43b6aa35",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 94,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "09cb0d73-5214-4e30-8760-aff17eff396a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "5bb609c6-e4c3-41fc-895d-b7347ad2fcd7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToChangeProxyAddress [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 423,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToChangeProxyAddressNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "ab57d568-2ea9-4073-b9c0-a0e05b26d164",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e2bf8baf-073c-4863-bcc8-6448b21857f3",
              "59dc3d78-6229-4ef9-816a-59b76a6b2042",
              "e55e4fca-35fe-4899-9f19-a96d43b6aa35",
              "09cb0d73-5214-4e30-8760-aff17eff396a",
              "5bb609c6-e4c3-41fc-895d-b7347ad2fcd7",
              "ab57d568-2ea9-4073-b9c0-a0e05b26d164"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 830,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "c154857b-7f5c-4107-a040-a8a87fc94fc3",
        "title": "Contract: VotingToChangeProxyAddress upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
        "file": "/test/voting_to_change_proxy_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 3078,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "5fa1c096-6599-4ebe-a655-ab40878ff244",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "2ba3d268-88e0-4859-8aa3-2f6c121c2f63",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1018,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "votingKey = accounts[2];\nmasterOfCeremony = accounts[0];\nminingKeyForVotingKey = accounts[1];\npoaNetworkConsensusMock = await PoaNetworkConsensusMock.new(masterOfCeremony, []);\n\nproxyStorageMock = await ProxyStorageMock.new();\nproxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorageMock.address);\nproxyStorageMock = await ProxyStorageMock.at(proxyStorageEternalStorage.address);\nawait proxyStorageMock.init(poaNetworkConsensusMock.address).should.be.fulfilled;\nawait poaNetworkConsensusMock.setProxyStorage(proxyStorageMock.address);\n\nkeysManager = await KeysManagerMock.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, keysManager.address);\nkeysManager = await KeysManagerMock.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForEmissionFunds = await VotingForEmissionFunds.new();\nconst votingForEmissionFundsEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingForEmissionFunds.address);\nvotingForEmissionFunds = await VotingForEmissionFunds.at(votingForEmissionFundsEternalStorage.address);\n\nvoting = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, voting.address);\nvoting = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait voting.init(172800, {from: accounts[8]}).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(172800).should.be.fulfilled;\nawait voting.migrateDisable().should.be.fulfilled;\nvotingNew = await VotingToChangeProxyAddressNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[7]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[7]}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorageMock.address);\nvoting = await VotingToChangeProxyAddressNew.at(votingEternalStorage.address);\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, validatorMetadata.address);\nlet rewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\nawait proxyStorageMock.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingEternalStorage.address,\n  votingForEmissionFunds.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlock.address\n);",
            "err": {},
            "isRoot": false,
            "uuid": "ee9bb4e5-996f-4744-ad77-2369cf30734c",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "55e3d69c-df70-42d0-ab72-56633efb9358",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "956e84ee-02eb-48df-a994-3bb689c698b0",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 155,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nid = await voting.nextBallotId.call();",
                "err": {},
                "isRoot": false,
                "uuid": "2824915e-2bc0-4cba-bd88-c95b45813674",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 190,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const {logs} = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nconst ballotInfo = await voting.getBallotInfo.call(id, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(id)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nkeysManagerFromContract.should.be.equal(keysManager.address);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "3cd52c34-5fcc-4584-bb5c-da410b435949",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "proposed address should not be 0x0",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot proposed address should not be 0x0",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  '0x0000000000000000000000000000000000000000',\n  { from: votingKey }\n).should.be.fulfilled.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ffe32c34-31d0-44f5-9dcb-4fca80731f66",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "can create multiple ballots",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot can create multiple ballots",
                "timedOut": false,
                "duration": 318,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const { logs } = await voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst keysManagerFromContract = await voting.getKeysManager.call();\nlet activeBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(1);\nlet nextBallotId = await voting.nextBallotId.call();\nnextBallotId.should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE + 1,\n  VOTING_END_DATE + 1,\n  2,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nconst ballotInfo = await voting.getBallotInfo.call(nextBallotId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+1), // startTime\n  new web3.BigNumber(VOTING_END_DATE+1), // endTime\n  new web3.BigNumber(0), // totalVoters\n  new web3.BigNumber(0), // progress\n  false, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  false // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getIndex.call(nextBallotId)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(nextBallotId)).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "0c1f5298-b7bc-467f-bccd-c91d6779d86d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let create more ballots than the limit",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #createBallot should not let create more ballots than the limit",
                "timedOut": false,
                "duration": 8105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n);\n// we have 1 validator, so 200 limit / 1 = 200\nnew web3.BigNumber(200).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait addValidators({proxyStorageMock, keysManager, poaNetworkConsensusMock}); // add 100 validators, so total will be 101 validator\nnew web3.BigNumber(1).should.be.bignumber.equal(await voting.getBallotLimitPerValidator.call());\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  2,\n  \"memo\",\n  accounts[5],\n  {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG)",
                "err": {},
                "isRoot": false,
                "uuid": "27f22459-5be5-4deb-beb4-6bfd7e83fa05",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3cd52c34-5fcc-4584-bb5c-da410b435949",
              "ffe32c34-31d0-44f5-9dcb-4fca80731f66",
              "0c1f5298-b7bc-467f-bccd-c91d6779d86d",
              "27f22459-5be5-4deb-beb4-6bfd7e83fa05"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 8625,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c99ab2cc-c287-44b1-8dc5-ceeb1dce3f0c",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 299,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nid = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);",
                "err": {},
                "isRoot": false,
                "uuid": "105ed6c4-adb5-4a99-922d-f3171907c527",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 148,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.accept, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(1);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "5c6a9fea-373a-4801-aaf2-9bc0a9fcd675",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "reject vote should be accepted",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote reject vote should be accepted",
                "timedOut": false,
                "duration": 141,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nconst { logs } = await voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.decision.should.be.bignumber.equal(2);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(VOTING_START_DATE);",
                "err": {},
                "isRoot": false,
                "uuid": "713cc13d-7281-4621-9dc3-b3c2f12aef1a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 621,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait addVotingKey(accounts[3], accounts[1]);\nawait voting.vote(id, choice.reject, { from: accounts[3] }).should.be.rejectedWith(ERROR_MSG);\n// add new voter\nawait addMiningKey(accounts[2]);\nawait addVotingKey(accounts[4], accounts[2]);\nawait voting.vote(id, choice.reject, { from: accounts[4] }).should.be.fulfilled;\nlet progress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-2);\nlet totalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(2);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[5], accounts[3]);\nawait voting.vote(id, choice.accept, { from: accounts[5] }).should.be.fulfilled;\nprogress = (await voting.getBallotInfo.call(id, votingKey))[3];\nprogress.should.be.bignumber.equal(-1);\ntotalVoters = await voting.getTotalVoters.call(id);\ntotalVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "955c34ef-39bb-4d25-a01e-1cf73f7a8d0e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote nonVoting key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote nonVoting key",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, { from: accounts[0] }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "71fb3473-5357-4b7c-b857-1066c4a06ee3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote before startTime key",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "553217b7-914f-44c7-8570-dc056bc35410",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote after endTime key",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "00651d3d-9b1e-422e-abfb-bac97aff5abe",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 221,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.fulfilled;\nawait voting.vote(id, choice.reject, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c98a8793-0084-409a-aa4e-1addac55b1ea",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 136,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, 0, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 3, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "44e64b89-f958-4025-9e26-9709d5723470",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 144,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE);\nawait voting.vote(99, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, 1, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "6f7cf642-126e-4ffa-ba25-ab4b8788fed8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5c6a9fea-373a-4801-aaf2-9bc0a9fcd675",
              "713cc13d-7281-4621-9dc3-b3c2f12aef1a",
              "955c34ef-39bb-4d25-a01e-1cf73f7a8d0e",
              "71fb3473-5357-4b7c-b857-1066c4a06ee3",
              "553217b7-914f-44c7-8570-dc056bc35410",
              "00651d3d-9b1e-422e-abfb-bac97aff5abe",
              "c98a8793-0084-409a-aa4e-1addac55b1ea",
              "44e64b89-f958-4025-9e26-9709d5723470",
              "6f7cf642-126e-4ffa-ba25-ab4b8788fed8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1605,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3f207615-dfed-43dd-bce1-543bbf055d65",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 391,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "votingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[5];\npayoutKeyToAdd = accounts[0];\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nawait proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(accounts[1]);\nawait addVotingKey(votingKey, accounts[1]);\nawait addMiningKey(accounts[6]);\nawait addVotingKey(votingKey2, accounts[6]);\nawait addMiningKey(accounts[4]);\nawait addVotingKey(votingKey3, accounts[4]);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);",
                "err": {},
                "isRoot": false,
                "uuid": "0691b7b8-0d5e-4886-abca-821b1f235f7e",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "does not change if it did not pass minimum threshold",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize does not change if it did not pass minimum threshold",
                "timedOut": false,
                "duration": 536,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let proposedValue = 5;\nlet contractType = 1; //keysManager\nvotingId = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType,\n  \"memo\",\n  accounts[5],\n  { from: votingKey }\n);\nawait voting.finalize(votingId, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.fulfilled;\n// await voting.vote(votingId, choice.accept, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nconst { logs } = await voting.finalize(votingId, { from: votingKey });\nawait voting.vote(votingId, choice.accept, { from: votingKey }).should.be.rejectedWith(ERROR_MSG);\nactiveBallotsLength = await voting.activeBallotsLength.call();\nactiveBallotsLength.should.be.bignumber.equal(0);\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\n// Finalized(msg.sender);\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.voter.should.be.equal(votingKey);\nconst ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(1), // progress\n  true, // isFinalized\n  accounts[5], // proposedValue\n  new web3.BigNumber(contractType), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nconst minThresholdOfVoters = await ballotsStorage.getBallotThreshold.call(1);\nminThresholdOfVoters.should.be.bignumber.equal(3);",
                "err": {},
                "isRoot": false,
                "uuid": "09779951-f570-46ab-87c1-1ca459e66fe3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change KeysManager implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change KeysManager implementation",
                "timedOut": false,
                "duration": 724,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 1;\nlet keysManagerNew = await KeysManagerMock.new();\nlet newAddress = keysManagerNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getKeysManager.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "73ac1e05-4c7f-4f7c-9dff-12e6047b879a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeKeys implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeKeys implementation",
                "timedOut": false,
                "duration": 904,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 2;\nlet votingToChangeKeysNew = await VotingForKeys.new();\nlet newAddress = votingToChangeKeysNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeKeys.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "ad754726-abe1-4497-bfb6-002409a461e2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeMinThreshold implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeMinThreshold implementation",
                "timedOut": false,
                "duration": 785,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 3;\nlet votingToChangeMinThresholdNew = await VotingForMinThreshold.new();\nlet newAddress = votingToChangeMinThresholdNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeMinThreshold.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "dd923abc-5a34-47ec-ac5c-467490a337fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change VotingToChangeProxy implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change VotingToChangeProxy implementation",
                "timedOut": false,
                "duration": 867,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 4;\nlet votingToChangeProxyNew = await VotingToChangeProxyAddress.new();\nlet newAddress = votingToChangeProxyNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getVotingToChangeProxy.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "69f19bc9-0043-4e67-88fc-1abe9b670b3e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change BallotsStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change BallotsStorage implementation",
                "timedOut": false,
                "duration": 862,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 5;\nlet ballotsStorageNew = await BallotsStorage.new();\nlet newAddress = ballotsStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getBallotsStorage.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "1bd5124a-3e4a-48b8-888a-613f66d7a880",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ValidatorMetadata implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ValidatorMetadata implementation",
                "timedOut": false,
                "duration": 815,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let contractType = 7;\nlet validatorMetadataNew = await ValidatorMetadata.new();\nlet newAddress = validatorMetadataNew.address;\nawait deployAndTest({contractType, newAddress})\nlet eternalProxyAddress = await proxyStorageMock.getValidatorMetadata.call();\nlet eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "e77237b1-6ec9-46be-8c20-c9536aef964a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change ProxyStorage implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change ProxyStorage implementation",
                "timedOut": false,
                "duration": 860,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 8;\nconst proxyStorageNew = await ProxyStorageMock.new();\nconst newAddress = proxyStorageNew.address;\nawait deployAndTest({contractType, newAddress})\nnewAddress.should.be.equal(await proxyStorageEternalStorage.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "091fe88e-cd48-4236-951a-9a0bb7802240",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change RewardByBlock implementation",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize should change RewardByBlock implementation",
                "timedOut": false,
                "duration": 869,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const contractType = 9;\nconst rewardByBlockNew = await RewardByBlock.new();\nconst newAddress = rewardByBlockNew.address;\nawait deployAndTest({contractType, newAddress})\nconst eternalProxyAddress = await proxyStorageMock.getRewardByBlock.call();\nconst eternalProxy = await EternalStorageProxy.at(eternalProxyAddress);\nnewAddress.should.be.equal(await eternalProxy.implementation.call());",
                "err": {},
                "isRoot": false,
                "uuid": "766fc482-9b7a-4c19-af06-488d549491bb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 1184,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let newAddress1 = accounts[4];\nlet newAddress2 = accounts[5];\nlet contractType1 = 100;\nlet contractType2 = 101;\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  contractType1,\n  \"memo\",\n  newAddress1,\n  { from: votingKey }\n);\nawait voting.createBallot(\n  VOTING_START_DATE+2,\n  VOTING_END_DATE+2,\n  contractType2,\n  \"memo\",\n  newAddress2,\n  { from: votingKey }\n);\nconst activeBallotsLength = await voting.activeBallotsLength.call();\nvotingId = await voting.activeBallots.call(activeBallotsLength.toNumber() - 2);\nlet votingIdForSecond = votingId.add(1);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(votingId, choice.reject, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal(await voting.hasAlreadyVoted.call(votingId, votingKey2));\nawait voting.vote(votingId, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(votingId, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nfalse.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait finalize(votingId, true, {from: votingKey});\ntrue.should.be.equal((await voting.getBallotInfo.call(votingId, votingKey))[4]); // isFinalized\nawait voting.finalize(votingId, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\n\nawait voting.finalize(votingIdForSecond, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal(await voting.getIsFinalized.call(votingIdForSecond));\nawait voting.vote(votingIdForSecond, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 3);\nawait finalize(votingIdForSecond, true, {from: votingKey});\nnew web3.BigNumber(-1).should.be.bignumber.equal((await voting.getBallotInfo.call(votingIdForSecond, votingKey))[3]) // progress\nlet ballotInfo = await voting.getBallotInfo.call(votingId, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress1, // proposedValue\n  new web3.BigNumber(contractType1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingId)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingId)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingId)).should.be.bignumber.equal(2);\nballotInfo = await voting.getBallotInfo.call(votingIdForSecond, votingKey);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE+2), // startTime\n  new web3.BigNumber(VOTING_END_DATE+2), // endTime\n  new web3.BigNumber(1), // totalVoters\n  new web3.BigNumber(-1), // progress\n  true, // isFinalized\n  newAddress2, // proposedValue\n  new web3.BigNumber(contractType2), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await voting.getQuorumState.call(votingIdForSecond)).should.be.bignumber.equal(3);\n(await voting.getIndex.call(votingIdForSecond)).should.be.bignumber.equal(0);\n(await voting.getMinThresholdOfVoters.call(votingIdForSecond)).should.be.bignumber.equal(2);",
                "err": {},
                "isRoot": false,
                "uuid": "c78141f5-cb42-4099-a356-0b0567da02dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "allowed at once after all validators gave their votes",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #finalize allowed at once after all validators gave their votes",
                "timedOut": false,
                "duration": 1323,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[7],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(0, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(0, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(0, choice.accept, {from: votingKey3}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.finalize(0, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait finalize(0, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(0, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = moment.utc().add(12, 'days').unix();\nVOTING_END_DATE = moment.utc().add(22, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, // uint256 _startTime\n  VOTING_END_DATE,   // uint256 _endTime\n  100,               // uint256 _contractType\n  \"memo\",            // string _memo\n  accounts[8],       // address _proposedValue\n  {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey))[4]); // isFinalized\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(1, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(1, choice.reject, {from: votingKey2}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+172800+1);\n(await voting.getTime.call()).should.be.bignumber.below(VOTING_END_DATE);\nawait voting.finalize(1, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE+1);\nawait finalize(1, true, {from: votingKey2});\ntrue.should.be.equal((await voting.getBallotInfo.call(1, votingKey2))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "01108b31-ca8a-45f3-b57f-328d797ed3a3",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "09779951-f570-46ab-87c1-1ca459e66fe3",
              "73ac1e05-4c7f-4f7c-9dff-12e6047b879a",
              "ad754726-abe1-4497-bfb6-002409a461e2",
              "dd923abc-5a34-47ec-ac5c-467490a337fb",
              "69f19bc9-0043-4e67-88fc-1abe9b670b3e",
              "1bd5124a-3e4a-48b8-888a-613f66d7a880",
              "e77237b1-6ec9-46be-8c20-c9536aef964a",
              "091fe88e-cd48-4236-951a-9a0bb7802240",
              "766fc482-9b7a-4c19-af06-488d549491bb",
              "c78141f5-cb42-4099-a356-0b0567da02dd",
              "01108b31-ca8a-45f3-b57f-328d797ed3a3"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 9729,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "e3726c84-5694-4b8c-bb6c-497a9575fb0e",
            "title": "#migrate",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_change_proxy_upgrade_test.js",
            "file": "/test/voting_to_change_proxy_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should copy a ballot to the new contract",
                "fullTitle": "Contract: VotingToChangeProxyAddress upgraded [all features] #migrate should copy a ballot to the new contract",
                "timedOut": false,
                "duration": 1601,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await proxyStorageMock.setVotingContractMock(accounts[0]);\nawait addMiningKey(miningKeyForVotingKey);\nawait addVotingKey(votingKey, miningKeyForVotingKey);\nawait addMiningKey(accounts[3]);\nawait addVotingKey(accounts[4], accounts[3]);\nawait addMiningKey(accounts[5]);\nawait addVotingKey(accounts[6], accounts[5]);\nawait proxyStorageMock.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensusMock.setSystemAddress(accounts[0]);\nawait poaNetworkConsensusMock.finalizeChange().should.be.fulfilled;\nVOTING_START_DATE = moment.utc().add(20, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(10, 'days').unix();\nconst id = await voting.nextBallotId.call();\nawait voting.createBallot(\n  VOTING_START_DATE,\n  VOTING_END_DATE,\n  1,\n  \"memo\",\n  accounts[7],\n  {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.reject, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[4]}).should.be.fulfilled;\nawait voting.vote(id, choice.reject, {from: accounts[6]}).should.be.fulfilled;\nlet votingNew = await VotingToChangeProxyAddress.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageMock.address, votingNew.address);\nvotingNew = await VotingToChangeProxyAddress.at(votingEternalStorage.address);\nawait votingNew.init(172800).should.be.fulfilled;\nawait votingNew.setTime(VOTING_START_DATE);\nawait votingNew.migrateBasicOne(\n  id,\n  voting.address,\n  [miningKeyForVotingKey, accounts[3], accounts[5]]\n).should.be.fulfilled;\nconst ballotInfo = await votingNew.getBallotInfo.call(id, votingKey);\n\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  new web3.BigNumber(3), // totalVoters\n  new web3.BigNumber(-3), // progress\n  false, // isFinalized\n  accounts[7], // proposedValue\n  new web3.BigNumber(1), // contractType\n  miningKeyForVotingKey, // creator\n  \"memo\", // memo\n  false, // canBeFinalizedNow\n  true // hasAlreadyVoted\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getIndex.call(id)).should.be.bignumber.equal(0);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, miningKeyForVotingKey)).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[2])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[3])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[4])).should.be.equal(false);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[5])).should.be.equal(true);\n(await votingNew.hasMiningKeyAlreadyVoted.call(id, accounts[6])).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(0);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(0);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(0);\nawait votingNew.migrateBasicAll(voting.address, {from: accounts[6]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll('0x0000000000000000000000000000000000000000').should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\nawait votingNew.migrateBasicAll(voting.address).should.be.fulfilled;\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);\n(await votingNew.activeBallotsLength.call()).should.be.bignumber.equal(1);\n(await votingNew.validatorActiveBallots.call(accounts[1])).should.be.bignumber.equal(1);\n(await votingNew.migrateDisabled.call()).should.be.equal(false);\nawait votingNew.migrateDisable({from: accounts[1]}).should.be.rejectedWith(ERROR_MSG);\nawait votingNew.migrateDisable().should.be.fulfilled;\n(await votingNew.migrateDisabled.call()).should.be.equal(true);\nawait votingNew.migrateBasicAll(voting.address).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5d459c29-9e30-41e4-909c-b8b9cce46a41",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5d459c29-9e30-41e4-909c-b8b9cce46a41"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1601,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "9080c338-4da1-4943-b2b7-bc5c6c3083dc",
        "title": "Contract: VotingToManageEmissionFunds [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
        "file": "/test/voting_to_manage_emission_funds_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 2859,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "106924a5-87ae-4590-947c-0714f69d4d2e",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "bc851817-c0d4-48a2-b05c-9214de3cc334",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1807,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  minBallotDuration,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  minBallotDuration,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  distributionThreshold + 1,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG); // minBallotDuration can't be more than distributionThreshold\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  minBallotDuration,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));",
            "err": {},
            "isRoot": false,
            "uuid": "48920086-2f6e-4f40-a455-b405b4291fe2",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "4c4787c3-6bcc-4dbd-9236-badb1e1d26da",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "a717fc41-857d-472d-bccc-90776cf40fb6",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "f24716b0-9feb-4c3e-962b-cb901563b00d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  minBallotDuration,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "17224ace-5168-4740-924c-398cac1f8058",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f24716b0-9feb-4c3e-962b-cb901563b00d",
              "17224ace-5168-4740-924c-398cac1f8058"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 200,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "8e6a5b5a-270b-49db-8de0-6adc26bfbe3f",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 216,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "9da452df-da15-4385-94d8-06a424714304",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 773,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "90f50b2a-d624-46a7-ab4a-722484106e9b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 117,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0363985f-ce99-4026-b079-06f710275cae",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 39,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "27535f2e-7655-4569-9c08-baee514da4b7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 48,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b5d478b7-b890-4b01-bf16-7e623f110581",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ef3fb5c1-b92e-4ba0-af13-1765de26fe07",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e85014a6-9dc2-4993-8db4-3335963fe48e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot duration must be greater than min ballot duration",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot ballot duration must be greater than min ballot duration",
                "timedOut": false,
                "duration": 208,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(31 * 60, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(31 * 60 + minBallotDuration - 1, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_END_DATE = moment.utc().add(31 * 60 + minBallotDuration + 1, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "7ab2b4ba-79e8-4ee0-85ce-23ed58525947",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 45,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "d888e699-6dc5-417d-926d-91e96044f936",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 360,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + minBallotDuration + 1;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "68d42f14-f16e-4fbe-93ba-19fbef270eef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 383,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8a228af5-da46-4dc5-ac08-fffe4c5e7687",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "90f50b2a-d624-46a7-ab4a-722484106e9b",
              "0363985f-ce99-4026-b079-06f710275cae",
              "27535f2e-7655-4569-9c08-baee514da4b7",
              "b5d478b7-b890-4b01-bf16-7e623f110581",
              "ef3fb5c1-b92e-4ba0-af13-1765de26fe07",
              "e85014a6-9dc2-4993-8db4-3335963fe48e",
              "7ab2b4ba-79e8-4ee0-85ce-23ed58525947",
              "d888e699-6dc5-417d-926d-91e96044f936",
              "68d42f14-f16e-4fbe-93ba-19fbef270eef",
              "8a228af5-da46-4dc5-ac08-fffe4c5e7687"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2053,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "ff6cf3f2-8a84-4f1b-b920-8ee9944caf25",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 296,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "34fcfb48-16c2-449e-8d89-77218ac6872b",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 693,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "70a79f59-2910-4653-b537-0d94b57d58b2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 258,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "134f4a69-27eb-462c-9dda-74531b38bca3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 187,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "00b9ba43-e731-48ad-99f8-64a72eb1be76",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 294,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "eba4383a-2f67-469a-a427-a701b9ace6bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 183,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cbd5b29a-07ec-4993-8797-4f5a025f33d3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 408,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "c9e32c7a-0f47-4f0f-b1b4-510a701bbce1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "70a79f59-2910-4653-b537-0d94b57d58b2",
              "134f4a69-27eb-462c-9dda-74531b38bca3",
              "00b9ba43-e731-48ad-99f8-64a72eb1be76",
              "eba4383a-2f67-469a-a427-a701b9ace6bd",
              "cbd5b29a-07ec-4993-8797-4f5a025f33d3",
              "c9e32c7a-0f47-4f0f-b1b4-510a701bbce1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2023,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7471f4c5-bd6f-4027-ab3f-de580e1885d9",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 107,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "5cdef5cc-7297-41cf-b1d2-ba77407df213",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 74,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "5a1f5db0-fc67-4cfc-8d82-bfc2aa91e855",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 59,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "af81d918-ea15-4a27-8f26-bfc07aa79f10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "5cdef5cc-7297-41cf-b1d2-ba77407df213",
              "5a1f5db0-fc67-4cfc-8d82-bfc2aa91e855",
              "af81d918-ea15-4a27-8f26-bfc07aa79f10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 240,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9a1703c7-d815-4109-96a0-4febb6b16cc7",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 441,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6c190c5d-d307-4c45-89ff-df7a5ebfd85d",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 655,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nconst time = VOTING_START_DATE + minBallotDuration + 1;\nawait voting.setTime(time);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(time);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "d7da5a57-272b-4281-a416-0c3101e79817",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1089,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "65774cb4-488f-4e40-8519-e1b405ee8e67",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "998402c1-4d43-410d-bae3-597f3c5c8da1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8333a45f-8eb3-4f04-8a67-8aebba745f56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 214,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a2c92af6-9218-4cf1-b008-a500a56b0ee9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 240,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "366f5060-aa34-436c-a1b4-8a0afcb83f27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 345,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "628a691c-cbda-41bd-9f42-1602bfd647d5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "40998ddc-a824-4b34-b413-92a729febfca",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1265,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d9f243eb-45ab-4463-9c6a-3714d3cdb48a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let the same user to re-vote with another miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let the same user to re-vote with another miningKey",
                "timedOut": false,
                "duration": 1946,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey4, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey4);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "725e10e5-3a6c-4de8-b7a7-4705aa540b8d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "a8e5b639-e5cf-40f0-9697-fcd83bfdd3a2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be finalized if elapsed time is greater than minBallotDuration",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should be finalized if elapsed time is greater than minBallotDuration",
                "timedOut": false,
                "duration": 163,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "279e5f25-6e9a-4af2-9ce7-c6b9c5819752",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not be finalized if elapsed time is less than minBallotDuration",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #vote should not be finalized if elapsed time is less than minBallotDuration",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE + minBallotDuration - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "d1b08e14-60c1-42c2-bd13-0540ff789a14",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d7da5a57-272b-4281-a416-0c3101e79817",
              "65774cb4-488f-4e40-8519-e1b405ee8e67",
              "998402c1-4d43-410d-bae3-597f3c5c8da1",
              "8333a45f-8eb3-4f04-8a67-8aebba745f56",
              "a2c92af6-9218-4cf1-b008-a500a56b0ee9",
              "366f5060-aa34-436c-a1b4-8a0afcb83f27",
              "628a691c-cbda-41bd-9f42-1602bfd647d5",
              "40998ddc-a824-4b34-b413-92a729febfca",
              "d9f243eb-45ab-4463-9c6a-3714d3cdb48a",
              "725e10e5-3a6c-4de8-b7a7-4705aa540b8d",
              "a8e5b639-e5cf-40f0-9697-fcd83bfdd3a2",
              "279e5f25-6e9a-4af2-9ce7-c6b9c5819752",
              "d1b08e14-60c1-42c2-bd13-0540ff789a14"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6428,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "975e17e0-bf3e-446b-a49a-81afca8b9d66",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 244,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "ac06ccc4-c78e-4fc2-b336-41213977d4ef",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize happy path",
                "timedOut": false,
                "duration": 471,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "fbd8a823-0a4f-4766-b7e0-59dbe0dbb052",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 840,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "6c2c898d-7411-448a-936e-6f7008c89cd1",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 1057,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "716d5900-b0c5-4f23-81c7-18d46e58a4ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1369,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "32159613-349f-4f5b-9183-4b5220221d71",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1895,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "07acbe8c-e4e8-4078-8eca-77e38521395f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1304,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "a105a086-8a6b-4686-a90d-981daf300d27",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1336,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "8eaf2a2f-09c0-4309-be64-02c1c616c80b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 155,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "7bfd046b-7498-4d58-80bf-cfa73136db98",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 178,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d3ed9cbc-5461-4500-8602-4caf8047bdb8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 871,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "2e6bc16d-dc89-428a-b064-95cb9ee548f7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 920,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17 * 60, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(17 * 60 + minBallotDuration + 1, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31 * 60 + minBallotDuration + 1, 'seconds').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "402f94b6-cd86-4288-8bca-9fd069d7cff9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 281,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "e8cce73c-8a24-4e3c-b625-a500d02e696f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 202,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "2514839b-73d3-4dd6-8d2a-2a3b13256089",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 599,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "1634a011-326b-4fa9-a8e1-f505c29d62c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 231,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17 * 60, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(17 * 60 + minBallotDuration + 1, 'seconds').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31 * 60 + minBallotDuration + 1, 'seconds').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "fef86009-5843-478d-84d9-aa8fcbf494ac",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 231,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "15178fae-5bb9-440e-b489-1e330ae6780c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fbd8a823-0a4f-4766-b7e0-59dbe0dbb052",
              "6c2c898d-7411-448a-936e-6f7008c89cd1",
              "716d5900-b0c5-4f23-81c7-18d46e58a4ab",
              "32159613-349f-4f5b-9183-4b5220221d71",
              "07acbe8c-e4e8-4078-8eca-77e38521395f",
              "a105a086-8a6b-4686-a90d-981daf300d27",
              "8eaf2a2f-09c0-4309-be64-02c1c616c80b",
              "7bfd046b-7498-4d58-80bf-cfa73136db98",
              "d3ed9cbc-5461-4500-8602-4caf8047bdb8",
              "2e6bc16d-dc89-428a-b064-95cb9ee548f7",
              "402f94b6-cd86-4288-8bca-9fd069d7cff9",
              "e8cce73c-8a24-4e3c-b625-a500d02e696f",
              "2514839b-73d3-4dd6-8d2a-2a3b13256089",
              "1634a011-326b-4fa9-a8e1-f505c29d62c6",
              "fef86009-5843-478d-84d9-aa8fcbf494ac",
              "15178fae-5bb9-440e-b489-1e330ae6780c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11940,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "7565f4b3-2c10-472e-ae48-4d38da30bb8f",
            "title": "#upgradeTo",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_test.js",
            "file": "/test/voting_to_manage_emission_funds_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo \"before each\" hook",
                "timedOut": false,
                "duration": 100,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "proxyStorageStubAddress = accounts[8];\nvoting = await VotingToManageEmissionFunds.new();\nvotingOldImplementation = voting.address;\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorageStubAddress, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  minBallotDuration,\n  emissionFunds.address\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "53a77c3a-e7d4-4d8b-92ed-5f717955f955",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "may only be called by ProxyStorage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo may only be called by ProxyStorage",
                "timedOut": false,
                "duration": 81,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});",
                "err": {},
                "isRoot": false,
                "uuid": "51619b05-5608-42a6-85e9-195bcb1ce2b3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should change implementation address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should change implementation address",
                "timedOut": false,
                "duration": 77,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet newImplementation = votingNew.address;\n(await votingEternalStorage.implementation.call()).should.be.equal(votingOldImplementation);\nawait upgradeTo(newImplementation, {from: proxyStorageStubAddress});\n(await votingEternalStorage.implementation.call()).should.be.equal(newImplementation);",
                "err": {},
                "isRoot": false,
                "uuid": "3cd8f731-e341-429e-9dee-cbf07b8f538b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should increment implementation version",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo should increment implementation version",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nlet oldVersion = await votingEternalStorage.version.call();\nlet newVersion = oldVersion.add(1);\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\n(await votingEternalStorage.version.call()).should.be.bignumber.equal(newVersion);",
                "err": {},
                "isRoot": false,
                "uuid": "6bed4e35-1024-4b5e-a433-137696749c87",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should work",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should work",
                "timedOut": false,
                "duration": 104,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.initialized.call()).should.be.equal(false);\nawait votingNew.initialize();\n(await votingNew.initialized.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "a0542e23-6aff-41f4-9428-4d9b9c9a55db",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same proxyStorage address",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same proxyStorage address",
                "timedOut": false,
                "duration": 76,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "let votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\n(await votingNew.proxyStorage.call()).should.be.equal(proxyStorageStubAddress);",
                "err": {},
                "isRoot": false,
                "uuid": "769aafb2-42c7-42c1-aca5-e30a4264e39c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "new implementation should use the same storage",
                "fullTitle": "Contract: VotingToManageEmissionFunds [all features] #upgradeTo new implementation should use the same storage",
                "timedOut": false,
                "duration": 712,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst VOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nconst VOTING_END_DATE = moment.utc().add(7, 'days').unix();\nconst id = await voting.nextBallotId.call();\nconst receiver = accounts[9];\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait votingEternalStorage.setProxyStorage(proxyStorageStubAddress);\nlet votingNew = await VotingToManageEmissionFundsNew.new();\nawait upgradeTo(votingNew.address, {from: proxyStorageStubAddress});\nvotingNew = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nconst ballotInfo = await votingNew.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  receiver // receiver\n]);\n(await votingNew.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await votingNew.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await votingNew.noActiveBallotExists.call()).should.be.equal(false);\n(await votingNew.nextBallotId.call()).should.be.bignumber.equal(1);",
                "err": {},
                "isRoot": false,
                "uuid": "4ee119fb-322e-4381-af59-495873aedc76",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "51619b05-5608-42a6-85e9-195bcb1ce2b3",
              "3cd8f731-e341-429e-9dee-cbf07b8f538b",
              "6bed4e35-1024-4b5e-a433-137696749c87",
              "a0542e23-6aff-41f4-9428-4d9b9c9a55db",
              "769aafb2-42c7-42c1-aca5-e30a4264e39c",
              "4ee119fb-322e-4381-af59-495873aedc76"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1126,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      },
      {
        "uuid": "d01ef472-236e-45a0-96e4-30760cfcf7ae",
        "title": "Contract: VotingToManageEmissionFunds upgraded [all features]",
        "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
        "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook: prepare suite",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before all\" hook: prepare suite",
            "timedOut": false,
            "duration": 5657,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "this.timeout(runner.BEFORE_TIMEOUT);\nrunner.initialize(done);",
            "err": {},
            "isRoot": false,
            "uuid": "a4ace04f-50b7-4c71-8fba-0dde034e3f8a",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook: before test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook: before test",
            "timedOut": false,
            "duration": 2,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.startTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "d3e133ac-d273-40cb-8438-51046269292c",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"before each\" hook",
            "timedOut": false,
            "duration": 1920,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "coinbase = accounts[0];\nmasterOfCeremony = accounts[0];\nvotingKey = accounts[2];\nvotingKey2 = accounts[3];\nvotingKey3 = accounts[4];\nvotingKey4 = accounts[7];\nminingKey = accounts[1];\nminingKey2 = accounts[5];\nminingKey3 = accounts[6];\nminingKey4 = accounts[8];\npoaNetworkConsensus = await PoaNetworkConsensus.new(masterOfCeremony, []);\n\nproxyStorage = await ProxyStorage.new();\nconst proxyStorageEternalStorage = await EternalStorageProxy.new(0, proxyStorage.address);\nproxyStorage = await ProxyStorage.at(proxyStorageEternalStorage.address);\nawait proxyStorage.init(poaNetworkConsensus.address).should.be.fulfilled;\nawait poaNetworkConsensus.setProxyStorage(proxyStorage.address);\n\nkeysManager = await KeysManager.new();\nconst keysManagerEternalStorage = await EternalStorageProxy.new(proxyStorage.address, keysManager.address);\nkeysManager = await KeysManager.at(keysManagerEternalStorage.address);\nawait keysManager.init(\n  \"0x0000000000000000000000000000000000000000\"\n).should.be.fulfilled;\n\nballotsStorage = await BallotsStorage.new();\nconst ballotsEternalStorage = await EternalStorageProxy.new(proxyStorage.address, ballotsStorage.address);\nballotsStorage = await BallotsStorage.at(ballotsEternalStorage.address);\nawait ballotsStorage.init([3, 2]).should.be.fulfilled;\nlet votingForKeys = await VotingForKeys.new();\nvotingForKeysEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForKeys.address);\nvotingForKeys = await VotingForKeys.at(votingForKeysEternalStorage.address);\nawait votingForKeys.init(172800).should.be.fulfilled;\nlet votingForMinThreshold = await VotingForMinThreshold.new();\nconst votingForMinThresholdEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForMinThreshold.address);\nvotingForMinThreshold = await VotingForMinThreshold.at(votingForMinThresholdEternalStorage.address);\nawait votingForMinThreshold.init(172800, 3).should.be.fulfilled;\nlet votingForProxy = await VotingForProxy.new();\nconst votingForProxyEternalStorage = await EternalStorageProxy.new(proxyStorage.address, votingForProxy.address);\nvotingForProxy = await VotingForProxy.at(votingForProxyEternalStorage.address);\nawait votingForProxy.init(172800).should.be.fulfilled;\nconst validatorMetadata = await ValidatorMetadata.new();\nconst validatorMetadataEternalStorage = await EternalStorageProxy.new(proxyStorage.address, validatorMetadata.address);\nvoting = await VotingToManageEmissionFunds.new();\nvotingEternalStorage = await EternalStorageProxy.new(proxyStorage.address, voting.address);\nvoting = await VotingToManageEmissionFunds.at(votingEternalStorage.address);\nemissionFunds = await EmissionFunds.new(voting.address);\nemissionReleaseTime = moment.utc().add(10, 'minutes').unix();\nemissionReleaseThreshold = moment.duration(3, 'months').asSeconds();\ndistributionThreshold = moment.duration(7, 'days').asSeconds();\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  minBallotDuration,\n  emissionFunds.address,\n  {from: accounts[8]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  300,\n  minBallotDuration,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  distributionThreshold + 1,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG); // minBallotDuration can't be more than distributionThreshold\nawait voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  minBallotDuration,\n  emissionFunds.address\n).should.be.fulfilled;\nrewardByBlock = await RewardByBlock.new();\nconst rewardByBlockEternalStorage = await EternalStorageProxy.new(proxyStorage.address, rewardByBlock.address);\nrewardByBlock = await RewardByBlock.at(rewardByBlockEternalStorage.address);\n\nawait proxyStorage.initializeAddresses(\n  keysManagerEternalStorage.address,\n  votingForKeysEternalStorage.address,\n  votingForMinThresholdEternalStorage.address,\n  votingForProxyEternalStorage.address,\n  votingEternalStorage.address,\n  ballotsEternalStorage.address,\n  validatorMetadataEternalStorage.address,\n  rewardByBlockEternalStorage.address\n);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\nconst coinbaseInitBalance = await web3.eth.getBalance(coinbase);\nconst howMuchToSend = web3.toWei(10, 'ether');\nconst hash = await web3.eth.sendTransaction({\n  from: coinbase,\n  to: emissionFunds.address,\n  value: howMuchToSend\n});\nconst receipt = await web3.eth.getTransactionReceipt(hash);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(howMuchToSend);\nemissionFundsInitBalance = howMuchToSend;\n(await web3.eth.getBalance(coinbase)).should.be.bignumber.equal(coinbaseInitBalance.sub(howMuchToSend).sub(receipt.gasUsed));\nconst votingNew = await VotingToManageEmissionFundsNew.new();\nawait votingEternalStorage.setProxyStorage(accounts[6]);\nconst {logs} = await votingEternalStorage.upgradeTo(votingNew.address, {from: accounts[6]});\nlogs[0].event.should.be.equal(\"Upgraded\");\nawait votingEternalStorage.setProxyStorage(proxyStorage.address);\nvoting = await VotingToManageEmissionFundsNew.at(votingEternalStorage.address);",
            "err": {},
            "isRoot": false,
            "uuid": "d1cc53c1-05d8-4759-a3fa-87c7df48c95d",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after each\" hook: after test",
            "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] \"after each\" hook: after test",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "runner.endTest(this, done);",
            "err": {},
            "isRoot": false,
            "uuid": "5088d82d-7bea-48f6-a0dc-52e2cc0042e9",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "1a6e69e1-ac02-455d-874a-8fc3a767d5cf",
            "title": "#init",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should change state correctly",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init should change state correctly",
                "timedOut": false,
                "duration": 96,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.distributionThreshold.call()).should.be.bignumber.equal(distributionThreshold);\n(await voting.emissionFunds.call()).should.be.equal(emissionFunds.address);\n(await voting.emissionReleaseThreshold.call()).should.be.bignumber.equal(emissionReleaseThreshold);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.initDisabled.call()).should.be.equal(true);\n(await voting.proxyStorage.call()).should.be.equal(proxyStorage.address);\n(await voting.getKeysManager.call()).should.be.equal(keysManager.address);",
                "err": {},
                "isRoot": false,
                "uuid": "2139aa70-d5f5-42eb-b159-eb83573c59e8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called more than once",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #init cannot be called more than once",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.init(\n  emissionReleaseTime,\n  emissionReleaseThreshold,\n  distributionThreshold,\n  minBallotDuration,\n  emissionFunds.address\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "71d10495-8d20-4dba-af37-5da4f014271c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2139aa70-d5f5-42eb-b159-eb83573c59e8",
              "71d10495-8d20-4dba-af37-5da4f014271c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 110,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "c058c5ff-c5af-4a94-b4e3-a542114ffa4f",
            "title": "#createBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot \"before each\" hook",
                "timedOut": false,
                "duration": 302,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "066e24d4-200e-4a19-84cd-9b58649c0bbf",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot happy path",
                "timedOut": false,
                "duration": 654,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nconst {logs} = await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  await voting.getTime.call(), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(1);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(id)).should.be.bignumber.equal(emissionReleaseTime);\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nlogs[0].event.should.be.equal(\"BallotCreated\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.ballotType.should.be.bignumber.equal(6);\nlogs[0].args.creator.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "91e65853-9dd1-44b0-a3fc-a0d4bcfe3151",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by valid voting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot may only be called by valid voting key",
                "timedOut": false,
                "duration": 120,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: accounts[3]}\n).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "0445a7e7-0a59-4680-b6e8-deb864073e6b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "endTime must be greater than startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot endTime must be greater than startTime",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(19, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "cbd34eca-ea4c-4617-82b9-eee0b953e018",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "startTime must be greater than current time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot startTime must be greater than current time",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(14, 'minutes').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "9265c4b3-7c3b-4c1b-ae91-b3126a2f7e41",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot be called before emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot be called before emission release time",
                "timedOut": false,
                "duration": 51,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(7, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "47d0d19b-0858-48c9-9ede-68ebcbfeb5de",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot cannot last longer than distribution threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot ballot cannot last longer than distribution threshold",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_END_DATE = moment.utc().add(8, 'days').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "10391f41-45af-4713-9c96-6a84c064c4fc",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "ballot duration must be greater than min ballot duration",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot ballot duration must be greater than min ballot duration",
                "timedOut": false,
                "duration": 165,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(31 * 60, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(31 * 60 + minBallotDuration - 1, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_END_DATE = moment.utc().add(31 * 60 + minBallotDuration + 1, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "bac55484-9b07-4663-9c1f-5ccf172e2008",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "receiver address should not be 0x0",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot receiver address should not be 0x0",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, '0x0000000000000000000000000000000000000000', \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "8f93610e-5726-4f9b-9b7c-c55c4578a9ba",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot create multiple ballots during the same distribution period",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot cannot create multiple ballots during the same distribution period",
                "timedOut": false,
                "duration": 366,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[6], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\n(await voting.nextBallotId.call()).should.be.bignumber.equal(1);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotFinalized\");\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.voter.should.be.equal(votingKey);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + minBallotDuration + 1;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.nextBallotId.call()).should.be.bignumber.equal(2);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "35b480fd-8df7-41a5-adc2-119856358396",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow creating new ballot after the next emission release threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #createBallot should allow creating new ballot after the next emission release threshold",
                "timedOut": false,
                "duration": 388,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(0)).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 - 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.rejectedWith(ERROR_MSG);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "b03976fe-4792-48be-8be7-5dc633ff24ce",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "91e65853-9dd1-44b0-a3fc-a0d4bcfe3151",
              "0445a7e7-0a59-4680-b6e8-deb864073e6b",
              "cbd34eca-ea4c-4617-82b9-eee0b953e018",
              "9265c4b3-7c3b-4c1b-ae91-b3126a2f7e41",
              "47d0d19b-0858-48c9-9ede-68ebcbfeb5de",
              "10391f41-45af-4713-9c96-6a84c064c4fc",
              "bac55484-9b07-4663-9c1f-5ccf172e2008",
              "8f93610e-5726-4f9b-9b7c-c55c4578a9ba",
              "35b480fd-8df7-41a5-adc2-119856358396",
              "b03976fe-4792-48be-8be7-5dc633ff24ce"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1902,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "9d1f220c-371c-49ac-997f-ea1702d1d950",
            "title": "#cancelNewBallot",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot \"before each\" hook",
                "timedOut": false,
                "duration": 288,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "86982bb5-74a6-44c2-b7f3-bbd69a4575b1",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot happy path",
                "timedOut": false,
                "duration": 696,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsAmount = await web3.eth.getBalance(emissionFunds.address);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nlet creationTime = await voting.getTime.call();\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nlet ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  creationTime, // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  true, // isCanceled\n  false, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(0), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(emissionReleaseTime);\nid = await voting.nextBallotId.call();\ncreationTime = moment.utc().add(22, 'minutes').unix();\nawait voting.setTime(creationTime);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nballotInfo = await voting.getBallotInfo.call(id);\nballotInfo.should.be.deep.equal([\n  new web3.BigNumber(creationTime), // creationTime\n  new web3.BigNumber(VOTING_START_DATE), // startTime\n  new web3.BigNumber(VOTING_END_DATE), // endTime\n  false, // isCanceled\n  true, // isFinalized\n  miningKey, // creator\n  \"memo\", // memo\n  new web3.BigNumber(emissionFundsAmount), // amount\n  new web3.BigNumber(0), // burnVotes\n  new web3.BigNumber(1), // freezeVotes\n  new web3.BigNumber(0), // sendVotes\n  accounts[5] // receiver\n]);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8868e753-7abb-4989-89e7-476db9e6bec5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel nonexistent or finalized ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel nonexistent or finalized ballot",
                "timedOut": false,
                "duration": 238,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "ba637fb3-8215-4c98-bfc9-6e1ff3734e6d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called by creator of a ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called by creator of a ballot",
                "timedOut": false,
                "duration": 181,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.votingKey.should.be.equal(votingKey);",
                "err": {},
                "isRoot": false,
                "uuid": "c64db179-c072-486c-b71a-42408feef349",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "may only be called within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot may only be called within ballot canceling threshold",
                "timedOut": false,
                "duration": 218,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(31, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "6db6b565-2c87-4538-ae05-863604b184b0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "cannot cancel already cancelled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot cannot cancel already cancelled ballot",
                "timedOut": false,
                "duration": 189,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(29, 'minutes').unix());\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nawait voting.cancelNewBallot({from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "10de877f-b338-47a4-9a14-7197e4dfc0c7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should restore emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #cancelNewBallot should restore emission release time",
                "timedOut": false,
                "duration": 396,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(\n  emissionReleaseTime + emissionReleaseThreshold*5 + 1\n);\nVOTING_START_DATE = emissionReleaseTime + emissionReleaseThreshold*5 + 2;\nVOTING_END_DATE = VOTING_START_DATE + 900;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, accounts[5], \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*5\n);\n(await voting.getEmissionReleaseTimeSnapshot.call(1)).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nawait voting.setTime(emissionReleaseTime + emissionReleaseThreshold*5 + 10);\nawait voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "8b3d5567-53b5-4c7a-9402-0fbb68372d41",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8868e753-7abb-4989-89e7-476db9e6bec5",
              "ba637fb3-8215-4c98-bfc9-6e1ff3734e6d",
              "c64db179-c072-486c-b71a-42408feef349",
              "6db6b565-2c87-4538-ae05-863604b184b0",
              "10de877f-b338-47a4-9a14-7197e4dfc0c7",
              "8b3d5567-53b5-4c7a-9402-0fbb68372d41"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 1918,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "421f77df-c90b-4321-8a86-c7ff22bb79c4",
            "title": "#refreshEmissionReleaseTime",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should not update until the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should not update until the next threshold",
                "timedOut": false,
                "duration": 99,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(2, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);",
                "err": {},
                "isRoot": false,
                "uuid": "64f31978-e5d2-4ed6-ad9d-089bb1c9545d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the next threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the next threshold",
                "timedOut": false,
                "duration": 63,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(4, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "f63f7bce-97cb-450a-9f04-e42b9e5ff700",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should update to the future threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #refreshEmissionReleaseTime should update to the future threshold",
                "timedOut": false,
                "duration": 126,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(moment.utc().add(7, 'months').unix());\nawait voting.refreshEmissionReleaseTime();\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold*2\n);",
                "err": {},
                "isRoot": false,
                "uuid": "5186c11d-6371-4c27-b445-c86962e22617",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "64f31978-e5d2-4ed6-ad9d-089bb1c9545d",
              "f63f7bce-97cb-450a-9f04-e42b9e5ff700",
              "5186c11d-6371-4c27-b445-c86962e22617"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 288,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "879ac32a-383f-4a95-ad31-884fb1396421",
            "title": "#vote",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote \"before each\" hook",
                "timedOut": false,
                "duration": 417,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "76557459-a648-46d3-b271-fac561c8425c",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "should let a validator to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should let a validator to vote",
                "timedOut": false,
                "duration": 669,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const emissionFundsBalanceOld = await web3.eth.getBalance(emissionFunds.address);\nconst receiverBalanceOld = await web3.eth.getBalance(receiver);\nconst time = VOTING_START_DATE + minBallotDuration + 1;\nawait voting.setTime(time);\nconst {logs} = await voting.vote(id, choice.freeze, {from: votingKey}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(0); // burnVotes\nballotInfo[9].should.be.bignumber.equal(1); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(1);\n(await voting.hasAlreadyVoted.call(id, votingKey)).should.be.equal(true);\nlogs[0].event.should.be.equal('Vote');\nlogs[0].args.id.should.be.bignumber.equal(0);\nlogs[0].args.decision.should.be.bignumber.equal(choice.freeze);\nlogs[0].args.voter.should.be.equal(votingKey);\nlogs[0].args.time.should.be.bignumber.equal(time);\nlogs[0].args.voterMiningKey.should.be.equal(miningKey);\nlogs[1].event.should.be.equal('BallotFinalized');\nlogs[1].args.id.should.be.bignumber.equal(0);\nlogs[1].args.voter.should.be.equal(votingKey);\nemissionFundsBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(emissionFunds.address));\nreceiverBalanceOld.should.be.bignumber.equal(await web3.eth.getBalance(receiver));",
                "err": {},
                "isRoot": false,
                "uuid": "f9f7af68-1317-4fae-a50d-fa426e2acb7f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should allow multiple voters to vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should allow multiple voters to vote",
                "timedOut": false,
                "duration": 1376,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE+1);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE+2);\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\n(await voting.getAmount.call(id)).should.be.bignumber.equal(\n  await web3.eth.getBalance(emissionFunds.address)\n);\n(await voting.getAmount.call(id)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nconst ballotInfo = await voting.getBallotInfo.call(id);\nballotInfo[4].should.be.equal(true); // isFinalized\nballotInfo[8].should.be.bignumber.equal(3); // burnVotes\nballotInfo[9].should.be.bignumber.equal(0); // freezeVotes\nballotInfo[10].should.be.bignumber.equal(0); // sendVotes\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey2)).should.be.equal(true);\n(await voting.hasMiningKeyAlreadyVoted.call(id, miningKey3)).should.be.equal(true);\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);",
                "err": {},
                "isRoot": false,
                "uuid": "9233caea-03d3-4588-9f92-bf8f94cfcd5e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote by nonvoting key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote by nonvoting key",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: accounts[0]}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "d9936419-343b-4172-b96f-e2e7cdd41f56",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote before startTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote before startTime",
                "timedOut": false,
                "duration": 72,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8508ecf2-f04b-4ed7-9bd6-469b12a5d410",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote after endTime",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote after endTime",
                "timedOut": false,
                "duration": 203,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_END_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_END_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "353c22c6-f488-4fde-aa91-cdae58c7bf8f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with already voted key",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with already voted key",
                "timedOut": false,
                "duration": 157,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5c94258f-93a5-4820-8173-3004f986bd89",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid choice",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid choice",
                "timedOut": false,
                "duration": 127,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, 0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, 4, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b9ec9c4f-7da0-421d-8ea7-a645a8431275",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote with invalid id",
                "timedOut": false,
                "duration": 131,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE);\nawait voting.vote(99, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(-3, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "8eafa032-28f2-4288-8c27-21c888ea0237",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if already finalized",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if already finalized",
                "timedOut": false,
                "duration": 1289,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.rejectedWith(ERROR_MSG);\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait addValidator(votingKey3, miningKey3);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "b25a3073-fcb9-4360-8d18-e9768147acce",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let the same user to re-vote with another miningKey",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let the same user to re-vote with another miningKey",
                "timedOut": false,
                "duration": 1849,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nconst {logs} = await keysManager.swapMiningKey(miningKey3, miningKey);\nlogs[0].event.should.equal(\"MiningKeyChanged\");\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait proxyStorage.setVotingContractMock(coinbase);\nawait swapVotingKey(votingKey3, miningKey3);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nid = await voting.nextBallotId.call();\nVOTING_START_DATE += emissionReleaseThreshold;\nVOTING_END_DATE += emissionReleaseThreshold;\nawait voting.setTime(VOTING_START_DATE - 5*60);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey2}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 11*60);\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait proxyStorage.setVotingContractMock(coinbase);\nlet result = await keysManager.swapMiningKey(miningKey4, miningKey3);\nresult.logs[0].event.should.equal(\"MiningKeyChanged\");\nawait swapVotingKey(votingKey, miningKey4);\nawait proxyStorage.setVotingContractMock(votingForKeysEternalStorage.address);\nawait poaNetworkConsensus.setSystemAddress(coinbase);\nawait poaNetworkConsensus.finalizeChange().should.be.fulfilled;\nawait poaNetworkConsensus.setSystemAddress('0xffffFFFfFFffffffffffffffFfFFFfffFFFfFFfE');\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "769f8bb2-0dcb-4edf-b5e2-d3736970ca29",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not let vote if ballot is canceled",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not let vote if ballot is canceled",
                "timedOut": false,
                "duration": 105,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(moment.utc().add(20, 'minutes').unix());\nconst {logs} = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nlogs[0].event.should.be.equal(\"BallotCanceled\");\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "134c9931-71c7-4501-a0d1-579b27b08d09",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should be finalized if elapsed time is greater than minBallotDuration",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should be finalized if elapsed time is greater than minBallotDuration",
                "timedOut": false,
                "duration": 169,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "bca3a691-d629-43e2-a4dc-daa4e2140556",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should not be finalized if elapsed time is less than minBallotDuration",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #vote should not be finalized if elapsed time is less than minBallotDuration",
                "timedOut": false,
                "duration": 137,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.setTime(VOTING_START_DATE + minBallotDuration - 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "5583d29a-162e-457e-a79b-66bc67b853a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f9f7af68-1317-4fae-a50d-fa426e2acb7f",
              "9233caea-03d3-4588-9f92-bf8f94cfcd5e",
              "d9936419-343b-4172-b96f-e2e7cdd41f56",
              "8508ecf2-f04b-4ed7-9bd6-469b12a5d410",
              "353c22c6-f488-4fde-aa91-cdae58c7bf8f",
              "5c94258f-93a5-4820-8173-3004f986bd89",
              "b9ec9c4f-7da0-421d-8ea7-a645a8431275",
              "8eafa032-28f2-4288-8c27-21c888ea0237",
              "b25a3073-fcb9-4360-8d18-e9768147acce",
              "769f8bb2-0dcb-4edf-b5e2-d3736970ca29",
              "134c9931-71c7-4501-a0d1-579b27b08d09",
              "bca3a691-d629-43e2-a4dc-daa4e2140556",
              "5583d29a-162e-457e-a79b-66bc67b853a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6330,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          },
          {
            "uuid": "3fce30cf-c1b4-46da-9e7e-70c9005afea2",
            "title": "#finalize",
            "fullFile": "/home/travis/build/poanetwork/poa-network-consensus-contracts/test/voting_to_manage_emission_funds_upgrade_test.js",
            "file": "/test/voting_to_manage_emission_funds_upgrade_test.js",
            "beforeHooks": [
              {
                "title": "\"before each\" hook",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize \"before each\" hook",
                "timedOut": false,
                "duration": 249,
                "pass": false,
                "fail": false,
                "pending": false,
                "code": "receiver = accounts[9];\nawait addValidator(votingKey, miningKey);\nVOTING_START_DATE = moment.utc().add(31, 'minutes').unix();\nVOTING_END_DATE = moment.utc().add(7, 'days').unix();\nid = await voting.nextBallotId.call();\nawait voting.setTime(moment.utc().add(15, 'minutes').unix());",
                "err": {},
                "isRoot": false,
                "uuid": "25c91bd3-b258-4073-8cac-b81d73e527f8",
                "isHook": true,
                "skipped": false
              }
            ],
            "afterHooks": [],
            "tests": [
              {
                "title": "happy path",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize happy path",
                "timedOut": false,
                "duration": 467,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\nconst {logs} = await voting.finalize(id, {from: votingKey2}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);\nlogs[0].event.should.be.equal('BallotFinalized');\nlogs[0].args.id.should.be.bignumber.equal(id);\nlogs[0].args.voter.should.be.equal(votingKey2);",
                "err": {},
                "isRoot": false,
                "uuid": "62a2d9ff-00f6-4dbd-a2ae-ce854e5bb6c6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if it did not pass minimum voters count",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if it did not pass minimum voters count",
                "timedOut": false,
                "duration": 832,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.getMinThresholdOfVoters.call(id)).should.be.bignumber.equal(2);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.burn, {from: votingKey}).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "c5440eb0-4da3-42c7-8765-b725ea315e1a",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 3 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 3 votes",
                "timedOut": false,
                "duration": 950,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "b2456cee-7781-486e-ac71-2f94f9b80682",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "freeze funds if there is no majority of 4 votes",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize freeze funds if there is no majority of 4 votes",
                "timedOut": false,
                "duration": 1350,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(4);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nemissionFundsInitBalance.should.be.bignumber.above(0);",
                "err": {},
                "isRoot": false,
                "uuid": "3a602415-2c28-441d-8bdd-ab748b4440ef",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1745,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait addValidator(votingKey4, miningKey4);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\nawait voting.vote(id, choice.freeze, {from: votingKey4}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(4);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "6f404227-b23f-4dc7-9f3d-35fa6a0a26ab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "send funds to receiver if most votes are for sending",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize send funds to receiver if most votes are for sending",
                "timedOut": false,
                "duration": 1381,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(emissionFundsInitBalance);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.send, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(2);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(\n  receiverInitBalance.add(emissionFundsInitBalance)\n);",
                "err": {},
                "isRoot": false,
                "uuid": "39334c75-0d4b-4b4e-891e-a1c300fc6008",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "burn funds if most votes are for burning",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize burn funds if most votes are for burning",
                "timedOut": false,
                "duration": 1377,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nconst receiverInitBalance = await web3.eth.getBalance(receiver);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.above(0);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.getQuorumState.call(id)).should.be.bignumber.equal(3);\n(await voting.getTotalVoters.call(id)).should.be.bignumber.equal(3);\n(await web3.eth.getBalance(emissionFunds.address)).should.be.bignumber.equal(0);\n(await web3.eth.getBalance(receiver)).should.be.bignumber.equal(receiverInitBalance);",
                "err": {},
                "isRoot": false,
                "uuid": "c0404344-e78d-4d1f-a856-26e785bb627b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents finalize with invalid id",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents finalize with invalid id",
                "timedOut": false,
                "duration": 154,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(1, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "006abeae-e95a-43dc-a638-9ecd12170dc2",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "do not let finalize if a ballot is active",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize do not let finalize if a ballot is active",
                "timedOut": false,
                "duration": 156,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_START_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "c9be85ad-c101-404e-aacb-02ed2ab21bab",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "finalize immediately if the last validator gave his vote",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize finalize immediately if the last validator gave his vote",
                "timedOut": false,
                "duration": 1097,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE + minBallotDuration + 1);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\n\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n\n(await voting.noActiveBallotExists.call()).should.be.equal(true);",
                "err": {},
                "isRoot": false,
                "uuid": "a46f3533-c11d-4b0d-b7d7-1e45aee5fb29",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "does not finalize immediately until ballot canceling threshold is reached",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize does not finalize immediately until ballot canceling threshold is reached",
                "timedOut": false,
                "duration": 944,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17 * 60, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(17 * 60 + minBallotDuration + 1, 'seconds').unix();\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait addValidator(votingKey2, miningKey2);\nawait addValidator(votingKey3, miningKey3);\nawait voting.setTime(VOTING_START_DATE);\nawait voting.vote(id, choice.send, {from: votingKey}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey2}).should.be.fulfilled;\nawait voting.vote(id, choice.burn, {from: votingKey3}).should.be.fulfilled;\n\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.setTime(moment.utc().add(31 * 60 + minBallotDuration + 1, 'seconds').unix());\nawait voting.finalize(id, {from: votingKey3}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized",
                "err": {},
                "isRoot": false,
                "uuid": "733e8cf7-f323-4c02-bb02-27d2b5bc0219",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "prevents double finalize",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize prevents double finalize",
                "timedOut": false,
                "duration": 217,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\nawait voting.finalize(0, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "4b000d8a-65cc-451f-99c2-5848b5661e28",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should refresh emission release time",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize should refresh emission release time",
                "timedOut": false,
                "duration": 205,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime\n);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(0, {from: votingKey}).should.be.fulfilled;\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "f9bf8a2c-13b1-4a6c-80af-c878733318a5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization if the voting key is a contract",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization if the voting key is a contract",
                "timedOut": false,
                "duration": 586,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "const voter = await VotingKey.new(voting.address);\nvotingKey2 = voter.address;\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(false);\nawait addValidator(votingKey2, miningKey2);\nawait voting.setTime(VOTING_END_DATE + 1);\n\nawait voter.callFinalize(id).should.be.rejectedWith(ERROR_MSG);\nfalse.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;\ntrue.should.be.equal((await voting.getBallotInfo.call(id))[4]); // isFinalized\n(await voting.noActiveBallotExists.call()).should.be.equal(true);\n(await voting.emissionReleaseTime.call()).should.be.bignumber.equal(\n  emissionReleaseTime + emissionReleaseThreshold\n);",
                "err": {},
                "isRoot": false,
                "uuid": "149ab022-aab6-4b71-a017-2d86ecf3583c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization within ballot canceling threshold",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization within ballot canceling threshold",
                "timedOut": false,
                "duration": 245,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "VOTING_START_DATE = moment.utc().add(17 * 60, 'seconds').unix();\nVOTING_END_DATE = moment.utc().add(17 * 60 + minBallotDuration + 1, 'seconds').unix();\n\nawait voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);\nawait voting.setTime(moment.utc().add(31 * 60 + minBallotDuration + 1, 'seconds').unix());\nawait voting.finalize(id, {from: votingKey}).should.be.fulfilled;",
                "err": {},
                "isRoot": false,
                "uuid": "a5109cbd-da47-453f-aad6-b66c4549d679",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "deny finalization of canceled ballot",
                "fullTitle": "Contract: VotingToManageEmissionFunds upgraded [all features] #finalize deny finalization of canceled ballot",
                "timedOut": false,
                "duration": 214,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "await voting.createBallot(\n  VOTING_START_DATE, VOTING_END_DATE, receiver, \"memo\", {from: votingKey}\n).should.be.fulfilled;\nawait voting.setTime(moment.utc().add(20, 'minutes').unix());\nlet result = await voting.cancelNewBallot({from: votingKey}).should.be.fulfilled;\nresult.logs[0].event.should.be.equal(\"BallotCanceled\");\nresult.logs[0].args.id.should.be.bignumber.equal(id);\nresult.logs[0].args.votingKey.should.be.equal(votingKey);\nawait voting.setTime(VOTING_END_DATE + 1);\nawait voting.finalize(id, {from: votingKey}).should.be.rejectedWith(ERROR_MSG);",
                "err": {},
                "isRoot": false,
                "uuid": "5215e5e1-31ba-4814-a5dc-af8744415bee",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "62a2d9ff-00f6-4dbd-a2ae-ce854e5bb6c6",
              "c5440eb0-4da3-42c7-8765-b725ea315e1a",
              "b2456cee-7781-486e-ac71-2f94f9b80682",
              "3a602415-2c28-441d-8bdd-ab748b4440ef",
              "6f404227-b23f-4dc7-9f3d-35fa6a0a26ab",
              "39334c75-0d4b-4b4e-891e-a1c300fc6008",
              "c0404344-e78d-4d1f-a856-26e785bb627b",
              "006abeae-e95a-43dc-a638-9ecd12170dc2",
              "c9be85ad-c101-404e-aacb-02ed2ab21bab",
              "a46f3533-c11d-4b0d-b7d7-1e45aee5fb29",
              "733e8cf7-f323-4c02-bb02-27d2b5bc0219",
              "4b000d8a-65cc-451f-99c2-5848b5661e28",
              "f9bf8a2c-13b1-4a6c-80af-c878733318a5",
              "149ab022-aab6-4b71-a017-2d86ecf3583c",
              "a5109cbd-da47-453f-aad6-b66c4549d679",
              "5215e5e1-31ba-4814-a5dc-af8744415bee"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11920,
            "root": false,
            "rootEmpty": false,
            "_timeout": 300000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 300000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2020
}